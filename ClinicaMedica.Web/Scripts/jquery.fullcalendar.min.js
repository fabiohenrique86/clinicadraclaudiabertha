!function (n) { "function" == typeof define && define.amd ? define(["jquery", "moment"], n) : "object" == typeof exports ? module.exports = n(require("jquery"), require("moment")) : n(jQuery, moment) }(function (n, t) { function it(n) { return ui(n, eu) } function wi(n, t) { t.left && n.css({ "border-left-width": 1, "margin-left": t.left - 1 }); t.right && n.css({ "border-right-width": 1, "margin-right": t.right - 1 }) } function bi(n) { n.css({ "margin-left": "", "margin-right": "", "border-left-width": "", "border-right-width": "" }) } function ot() { n("body").addClass("fc-not-allowed") } function st() { n("body").removeClass("fc-not-allowed") } function ki(t, i, r) { var u = Math.floor(i / t.length), e = Math.floor(i - u * (t.length - 1)), f = [], o = [], s = [], h = 0; di(t); t.each(function (i, r) { var l = i === t.length - 1 ? e : u, c = n(r).outerHeight(!0); c < l ? (f.push(r), o.push(c), s.push(n(r).height())) : h += c }); r && (i -= h, u = Math.floor(i / f.length), e = Math.floor(i - u * (f.length - 1))); n(f).each(function (t, i) { var r = t === f.length - 1 ? e : u, h = o[t], c = s[t], l = r - (h - c); h < r && n(i).height(l) }) } function di(n) { n.height("") } function gi(t) { var i = 0; return t.find("> *").each(function (t, r) { var u = n(r).outerWidth(); u > i && (i = u) }), i++, t.width(i), i } function dt(n, t) { var i, r = n.add(t); return r.css({ position: "relative", left: -1 }), i = n.outerHeight() - t.outerHeight(), r.css({ position: "", left: "" }), i } function gt(t) { var r = t.css("position"), i = t.parents().filter(function () { var t = n(this); return /(auto|scroll)/.test(t.css("overflow") + t.css("overflow-y") + t.css("overflow-x")) }).eq(0); return "fixed" !== r && i.length ? i : n(t[0].ownerDocument || document) } function ni(n, t) { var i = n.offset(), r = i.left - (t ? t.left : 0), u = i.top - (t ? t.top : 0); return { left: r, right: r + n.outerWidth(), top: u, bottom: u + n.outerHeight() } } function nr(n, t) { var i = n.offset(), r = ti(n), u = i.left + g(n, "border-left-width") + r.left - (t ? t.left : 0), f = i.top + g(n, "border-top-width") + r.top - (t ? t.top : 0); return { left: u, right: u + n[0].clientWidth, top: f, bottom: f + n[0].clientHeight } } function yu(n, t) { var i = n.offset(), r = i.left + g(n, "border-left-width") + g(n, "padding-left") - (t ? t.left : 0), u = i.top + g(n, "border-top-width") + g(n, "padding-top") - (t ? t.top : 0); return { left: r, right: r + n.width(), top: u, bottom: u + n.height() } } function ti(n) { var t, i = n.innerWidth() - n[0].clientWidth, r = n.innerHeight() - n[0].clientHeight; return i = tr(i), r = tr(r), t = { left: 0, right: 0, top: 0, bottom: r }, pu() && "rtl" == n.css("direction") ? t.left = i : t.right = i, t } function tr(n) { return n = Math.max(0, n), n = Math.round(n) } function pu() { return null === yt && (yt = wu()), yt } function wu() { var t = n("<div><div/><\/div>").css({ position: "absolute", top: -1e3, left: 0, border: 0, padding: 0, overflow: "scroll", direction: "rtl" }).appendTo("body"), i = t.children(), r = i.offset().left > t.offset().left; return t.remove(), r } function g(n, t) { return parseFloat(n.css(t)) || 0 } function ir(n) { return 1 == n.which && !n.ctrlKey } function v(n) { var t = n.originalEvent.touches; return t && t.length ? t[0].pageX : n.pageX } function y(n) { var t = n.originalEvent.touches; return t && t.length ? t[0].pageY : n.pageY } function rr(n) { return /^touch/.test(n.type) } function ur(n) { n.addClass("fc-unselectable").on("selectstart", rt) } function bu(n) { n.removeClass("fc-unselectable").off("selectstart", rt) } function rt(n) { n.preventDefault() } function fr(n, t) { var i = { left: Math.max(n.left, t.left), right: Math.min(n.right, t.right), top: Math.max(n.top, t.top), bottom: Math.min(n.bottom, t.bottom) }; return i.left < i.right && i.top < i.bottom && i } function ku(n, t) { return { left: Math.min(Math.max(n.left, t.left), t.right), top: Math.min(Math.max(n.top, t.top), t.bottom) } } function du(n) { return { left: (n.left + n.right) / 2, top: (n.top + n.bottom) / 2 } } function gu(n, t) { return { left: n.left - t.left, top: n.top - t.top } } function er(t) { var u, i, f = [], r = []; for ("string" == typeof t ? r = t.split(/\s*,\s*/) : "function" == typeof t ? r = [t] : n.isArray(t) && (r = t), u = 0; u < r.length; u++) i = r[u], "string" == typeof i ? f.push("-" == i.charAt(0) ? { field: i.substring(1), order: -1 } : { field: i, order: 1 }) : "function" == typeof i && f.push({ func: i }); return f } function or(n, t, i) { for (var u, r = 0; r < i.length; r++) if (u = sr(n, t, i[r])) return u; return 0 } function sr(n, t, i) { return i.func ? i.func(n, t) : hr(n[i.field], t[i.field]) * (i.order || 1) } function hr(t, i) { return t || i ? null == i ? -1 : null == t ? 1 : "string" === n.type(t) || "string" === n.type(i) ? String(t).localeCompare(String(i)) : t - i : 0 } function ht(n, t) { var i, r, u, f, e = n.start, o = n.end, s = t.start, h = t.end; if (o > s && e < h) return e >= s ? (i = e.clone(), u = !0) : (i = s.clone(), u = !1), o <= h ? (r = o.clone(), f = !0) : (r = h.clone(), f = !1), { start: i, end: r, isStart: u, isEnd: f } } function cr(n, i) { return t.duration({ days: n.clone().stripTime().diff(i.clone().stripTime(), "days"), ms: n.time() - i.time() }) } function nf(n, i) { return t.duration({ days: n.clone().stripTime().diff(i.clone().stripTime(), "days") }) } function lr(n, i, r) { return t.duration(Math.round(n.diff(i, r, !0)), r) } function ii(n, t) { for (var r, u, i = 0; i < pt.length && (r = pt[i], u = tf(r, n, t), !(u >= 1 && b(u))) ; i++); return r } function tf(n, i, r) { return null != r ? r.diff(i, n, !0) : t.isDuration(i) ? i.as(n) : i.end.diff(i.start, n, !0) } function rf(n, t, i) { var r; return d(i) ? (t - n) / i : (r = i.asMonths(), Math.abs(r) >= 1 && b(r) ? t.diff(n, "months", !0) / r : t.diff(n, "days", !0) / i.asDays()) } function ri(n, t) { var i, r; return d(n) || d(t) ? n / t : (i = n.asMonths(), r = t.asMonths(), Math.abs(i) >= 1 && b(i) && Math.abs(r) >= 1 && b(r) ? i / r : n.asDays() / t.asDays()) } function uf(n, i) { var r; return d(n) ? t.duration(n * i) : (r = n.asMonths(), Math.abs(r) >= 1 && b(r) ? t.duration({ months: r * i }) : t.duration({ days: n.asDays() * i })) } function d(n) { return Boolean(n.hours() || n.minutes() || n.seconds() || n.milliseconds()) } function ff(n) { return "[object Date]" === Object.prototype.toString.call(n) || n instanceof Date } function ar(n) { return /^\d+\:\d+(?:\:\d+\.?(?:\d{3})?)?$/.test(n) } function ui(n, t) { var i, r, e, o, u, s, f = {}; if (t) for (i = 0; i < t.length; i++) { for (r = t[i], e = [], o = n.length - 1; o >= 0; o--) if (u = n[o][r], "object" == typeof u) e.unshift(u); else if (void 0 !== u) { f[r] = u; break } e.length && (f[r] = ui(e)) } for (i = n.length - 1; i >= 0; i--) { s = n[i]; for (r in s) r in f || (f[r] = s[r]) } return f } function ut(n) { var t = function () { }; return t.prototype = n, new t } function fi(n, t) { for (var i in n) vr(n, i) && (t[i] = n[i]) } function vr(n, t) { return ou.call(n, t) } function ef(t) { return /undefined|null|boolean|number|string/.test(n.type(t)) } function ct(t, i, r) { if (n.isFunction(t) && (t = [t]), t) { for (var f, u = 0; u < t.length; u++) f = t[u].apply(i, r) || f; return f } } function e() { for (var n = 0; n < arguments.length; n++) if (void 0 !== arguments[n]) return arguments[n] } function u(n) { return (n + "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/'/g, "&#039;").replace(/"/g, "&quot;").replace(/\n/g, "<br />") } function ei(n) { return n.replace(/&.*?;/g, "") } function lt(t) { var i = []; return n.each(t, function (n, t) { null != t && i.push(n + ":" + t) }), i.join(";") } function of(t) { var i = []; return n.each(t, function (n, t) { null != t && i.push(n + '="' + u(t) + '"') }), i.join(" ") } function yr(n) { return n.charAt(0).toUpperCase() + n.slice(1) } function sf(n, t) { return n - t } function b(n) { return n % 1 == 0 } function ft(n, t) { var i = n[t]; return function () { return i.apply(n, arguments) } } function at(n, t, i) { var r, u, f, o, e, s = function () { var h = +new Date - o; h < t ? r = setTimeout(s, t - h) : (r = null, i || (e = n.apply(f, u), f = u = null)) }; return function () { f = this; u = arguments; o = +new Date; var h = i && !r; return r || (r = setTimeout(s, t)), h && (e = n.apply(f, u), f = u = null), e } } function oi(i, r, u) { var o, s, h, e, f = i[0], c = 1 == i.length && "string" == typeof f; return t.isMoment(f) || ff(f) || void 0 === f ? e = t.apply(null, i) : (o = !1, s = !1, c ? ne.test(f) ? (f += "-01", i = [f], o = !0, s = !0) : (h = te.exec(f)) && (o = !h[5], s = !0) : n.isArray(f) && (s = !0), e = r || o ? t.utc.apply(t, i) : t.apply(null, i), o ? (e._ambigTime = !0, e._ambigZone = !0) : u && (s ? e._ambigZone = !0 : c && e.utcOffset(f))), e._fullCalendar = !0, e } function c() { } function hf(n, t) { var i; return vr(t, "constructor") && (i = t.constructor), "function" != typeof i && (i = t.constructor = function () { n.apply(this, arguments) }), i.prototype = ut(n.prototype), fi(t, i.prototype), fi(n, i), i } function pr(n, t) { fi(t, n.prototype) } function f(t) { var r = n.Deferred(), i = r.promise(), u; return ("function" == typeof t && t(function (n) { f.immediate && (i._value = n); r.resolve(n) }, function () { r.reject() }), f.immediate) && (u = i.then, i.then = function (n, t) { var r = i.state(); if ("resolved" === r) { if ("function" == typeof n) return f.resolve(n(i._value)) } else if ("rejected" === r && "function" == typeof t) return t(), i; return u.call(i, n, t) }), i } function si(n) { function i(n) { return new f(function (i) { var r = function () { f.resolve(n()).then(i).then(function () { t.shift(); t.length && t[0]() }) }; t.push(r); 1 === t.length && r() }) } var t = []; this.add = "number" == typeof n ? at(i, n) : i; this.addQuickly = i } function wr(n, t) { return !n && !t || !(!n || !t) && n.component === t.component && br(n, t) && br(t, n) } function br(n, t) { for (var i in n) if (!/^(component|left|right|top|bottom)$/.test(i) && n[i] !== t[i]) return !1; return !0 } function kr(n) { return { start: n.start.clone(), end: n.end ? n.end.clone() : null, allDay: n.allDay } } function dr(n) { var t = gr(n); return "background" === t || "inverse-background" === t } function cf(n) { return "inverse-background" === gr(n) } function gr(n) { return e((n.source || {}).rendering, n.rendering) } function lf(n) { for (var i, r = {}, t = 0; t < n.length; t++) i = n[t], (r[i._id] || (r[i._id] = [])).push(i); return r } function af(n, t) { return n.start - t.start } function vf(r) { var u, f, e, s, o = i.dataAttrPrefix; return o && (o += "-"), u = r.data(o + "event") || null, u && (u = "object" == typeof u ? n.extend({}, u) : {}, f = u.start, null == f && (f = u.time), e = u.duration, s = u.stick, delete u.start, delete u.time, delete u.duration, delete u.stick), null == f && (f = r.data(o + "start")), null == f && (f = r.data(o + "time")), null == e && (e = r.data(o + "duration")), null == s && (s = r.data(o + "stick")), f = null != f ? t.duration(f) : null, e = null != e ? t.duration(e) : null, s = Boolean(s), { eventProps: u, startTime: f, duration: e, stick: s } } function yf(n, t) { for (var r, i = 0; i < t.length; i++) if (r = t[i], r.leftCol <= n.rightCol && r.rightCol >= n.leftCol) return !0; return !1 } function pf(n, t) { return n.leftCol - t.leftCol } function wf(n) { for (var u, t, i = [], r = 0; r < n.length; r++) { for (u = n[r], t = 0; t < i.length && tu(u, i[t]).length; t++); u.level = t; (i[t] || (i[t] = [])).push(u) } return i } function bf(n) { for (var f, i, r, u, t = 0; t < n.length; t++) for (f = n[t], i = 0; i < f.length; i++) for (r = f[i], r.forwardSegs = [], u = t + 1; u < n.length; u++) tu(r, n[u], r.forwardSegs) } function nu(n) { var t, i, u = n.forwardSegs, r = 0; if (void 0 === n.forwardPressure) { for (t = 0; t < u.length; t++) i = u[t], nu(i), r = Math.max(r, 1 + i.forwardPressure); n.forwardPressure = r } } function tu(n, t, i) { i = i || []; for (var r = 0; r < t.length; r++) kf(n, t[r]) && i.push(t[r]); return i } function kf(n, t) { return n.bottom > t.top && n.top < t.bottom } function iu(n) { this.items = n || [] } function ru(t, i) { function c(n) { i = n } function l() { var u = i.layout; r = t.options.theme ? "ui" : "fc"; u ? (f ? f.empty() : f = this.el = n("<div class='fc-toolbar " + i.extraClasses + "'/>"), f.append(o("left")).append(o("right")).append(o("center")).append('<div class="fc-clear"/>')) : h() } function h() { f && (f.remove(), f = e.el = null) } function o(f) { var e = n('<div class="fc-' + f + '"/>'), o = i.layout[f]; return o && n.each(o.split(" "), function () { var f, i = n(), o = !0; n.each(this.split(","), function (f, e) { var c, y, l, a, v, p, w, b, k, h; "title" == e ? (i = i.add(n("<h2>&nbsp;<\/h2>")), o = !1) : ((c = (t.options.customButtons || {})[e]) ? (l = function (n) { c.click && c.click.call(h[0], n) }, a = "", v = c.text) : (y = t.getViewSpec(e)) ? (l = function () { t.changeView(e) }, s.push(e), a = y.buttonTextOverride, v = y.buttonTextDefault) : t[e] && (l = function () { t[e]() }, a = (t.overrides.buttonText || {})[e], v = t.options.buttonText[e]), l && (p = c ? c.themeIcon : t.options.themeButtonIcons[e], w = c ? c.icon : t.options.buttonIcons[e], b = a ? u(a) : p && t.options.theme ? "<span class='ui-icon ui-icon-" + p + "'><\/span>" : w && !t.options.theme ? "<span class='fc-icon fc-icon-" + w + "'><\/span>" : u(v), k = ["fc-" + e + "-button", r + "-button", r + "-state-default"], h = n('<button type="button" class="' + k.join(" ") + '">' + b + "<\/button>").click(function (n) { h.hasClass(r + "-state-disabled") || (l(n), (h.hasClass(r + "-state-active") || h.hasClass(r + "-state-disabled")) && h.removeClass(r + "-state-hover")) }).mousedown(function () { h.not("." + r + "-state-active").not("." + r + "-state-disabled").addClass(r + "-state-down") }).mouseup(function () { h.removeClass(r + "-state-down") }).hover(function () { h.not("." + r + "-state-active").not("." + r + "-state-disabled").addClass(r + "-state-hover") }, function () { h.removeClass(r + "-state-hover").removeClass(r + "-state-down") }), i = i.add(h))) }); o && i.first().addClass(r + "-corner-left").end().last().addClass(r + "-corner-right").end(); i.length > 1 ? (f = n("<div/>"), o && f.addClass("fc-button-group"), f.append(i), e.append(f)) : e.append(i) }), e } function a(n) { f && f.find("h2").text(n) } function v(n) { f && f.find(".fc-" + n + "-button").addClass(r + "-state-active") } function y(n) { f && f.find(".fc-" + n + "-button").removeClass(r + "-state-active") } function p(n) { f && f.find(".fc-" + n + "-button").prop("disabled", !0).addClass(r + "-state-disabled") } function w(n) { f && f.find(".fc-" + n + "-button").prop("disabled", !1).removeClass(r + "-state-disabled") } function b() { return s } var e = this, f, r, s; e.setToolbarOptions = c; e.render = l; e.removeElement = h; e.updateTitle = a; e.activateButton = v; e.deactivateButton = y; e.disableButton = p; e.enableButton = w; e.getViewsWithButtons = b; e.el = null; s = [] } function df(r, u) { function k(n) { n._locale = c } function bt() { a ? y() && (d(), h()) : kt() } function kt() { r.addClass("fc"); r.on("click.fc", "a[data-goto]", function (t) { var s = n(this), u = s.data("goto"), o = f.moment(u.date), r = u.type, i = e.opt("navLink" + yr(r) + "Click"); "function" == typeof i ? i(o, t) : ("string" == typeof i && (r = i), yt(o, r)) }); f.bindOption("theme", function (n) { ki = n ? "ui" : "fc"; r.toggleClass("ui-widget", n); r.toggleClass("fc-unthemed", !n) }); f.bindOptions(["isRTL", "locale"], function (n) { r.toggleClass("fc-ltr", !n); r.toggleClass("fc-rtl", n) }); a = n("<div class='fc-view-container'/>").prependTo(r); var t = ii(); l = new iu(t); p = f.header = t[0]; w = f.footer = t[1]; lt(); vt(); h(f.options.defaultView); f.options.handleWindowResize && (b = at(ni, f.options.windowResizeDelay), n(window).resize(b)) } function dt() { e && e.removeElement(); l.proxyCall("removeElement"); a.remove(); r.removeClass("fc fc-ltr fc-rtl fc-unthemed ui-widget"); r.off(".fc"); b && n(window).unbind("resize", b); o.unneeded() } function y() { return r.is(":visible") } function h(t, i) { v++; var r = e && t && e.type !== t; r && (nt(), et()); !e && t && (e = f.view = rt[t] || (rt[t] = f.instantiateView(t)), e.setElement(n("<div class='fc-view fc-" + t + "-view' />").appendTo(a)), l.proxyCall("activateButton", t)); e && (s = e.massageCurrentDate(s), e.isDateSet && s >= e.intervalStart && s < e.intervalEnd || y() && (i && e.captureInitialScroll(i), e.setDate(s, i), i && e.releaseScroll(), ri())); r && tt(); v-- } function et() { l.proxyCall("deactivateButton", e.type); e.removeElement(); e = f.view = null } function gt() { v++; nt(); var n = e.type, t = e.queryScroll(); et(); d(); h(n, t); tt(); v-- } function ot(n) { if (y()) return n && st(), v++, e.updateSize(!0), v--, !0 } function d() { y() && st() } function st() { var t = f.options.contentHeight, n = f.options.height; it = "number" == typeof t ? t : "function" == typeof t ? t() : "number" == typeof n ? n - g() : "function" == typeof n ? n() - g() : "parent" === n ? r.parent().height() - g() : Math.round(a.width() / Math.max(f.options.aspectRatio, .5)) } function g() { return l.items.reduce(function (n, t) { var i = t.el ? t.el.outerHeight(!0) : 0; return n + i }, 0) } function ni(n) { !v && n.target === window && e.start && ot(!0) && e.publiclyTrigger("windowResize", wt) } function ti() { y() && f.reportEventChange() } function ii() { return [new ru(f, ht()), new ru(f, ct())] } function ht() { return { extraClasses: "fc-header-toolbar", layout: f.options.header } } function ct() { return { extraClasses: "fc-footer-toolbar", layout: f.options.footer } } function lt() { p.setToolbarOptions(ht()); p.render(); p.el && r.prepend(p.el) } function vt() { w.setToolbarOptions(ct()); w.render(); w.el && r.append(w.el) } function ri() { var n = f.getNow(); n >= e.intervalStart && n < e.intervalEnd ? l.proxyCall("disableButton", "today") : l.proxyCall("enableButton", "today") } function ui() { e.select(f.buildSelectSpan.apply(f, arguments)) } function fi() { e && e.unselect() } function ei() { s = e.computePrevDate(s); h() } function oi() { s = e.computeNextDate(s); h() } function si() { s.add(-1, "years"); h() } function hi() { s.add(1, "years"); h() } function ci() { s = f.getNow(); h() } function li(n) { s = f.moment(n).stripZone(); h() } function ai(n) { s.add(t.duration(n)); h() } function yt(n, t) { var i; t = t || "day"; i = f.getViewSpec(t) || f.getUnitViewSpec(t); s = n.clone(); h(i ? i.type : null) } function vi() { return f.applyTimezone(s) } function nt() { ft++ || a.css({ width: "100%", height: a.height(), overflow: "hidden" }) } function tt() { --ft || a.css({ width: "", height: "", overflow: "" }) } function yi() { return f } function pi() { return e } function wi(n, t) { var i; if ("string" == typeof n) { if (void 0 === t) return f.options[n]; i = {}; i[n] = t; pt(i) } else "object" == typeof n && pt(n) } function pt(n) { var t, i = 0; for (t in n) f.dynamicOverrides[t] = n[t]; f.viewSpecCache = {}; f.populateOptionsHash(); for (t in n) f.triggerOptionHandlers(t), i++; if (1 === i) { if ("height" === t || "contentHeight" === t || "aspectRatio" === t) return void ot(!0); if ("defaultDate" === t) return; if ("businessHours" === t) return void (e && (e.unrenderBusinessHours(), e.renderBusinessHours())); if ("timezone" === t) return f.rezoneArrayEventSources(), void f.refetchEvents() } lt(); vt(); rt = {}; gt() } function bi(n, t) { var i = Array.prototype.slice.call(arguments, 2); if (t = t || wt, this.triggerWith(n, t, i), f.options[n]) return f.options[n].apply(t, i) } var f = this, c, ft; o.needed(); f.render = bt; f.destroy = dt; f.rerenderEvents = ti; f.changeView = h; f.select = ui; f.unselect = fi; f.prev = ei; f.next = oi; f.prevYear = si; f.nextYear = hi; f.today = ci; f.gotoDate = li; f.incrementDate = ai; f.zoomTo = yt; f.getDate = vi; f.getCalendar = yi; f.getView = pi; f.option = wi; f.publiclyTrigger = bi; f.dynamicOverrides = {}; f.viewSpecCache = {}; f.optionHandlers = {}; f.overrides = n.extend({}, u); f.populateOptionsHash(); f.bindOptions(["locale", "monthNames", "monthNamesShort", "dayNames", "dayNamesShort", "firstDay", "weekNumberCalculation"], function (n, t, i, r, u, f, e) { if ("iso" === e && (e = "ISO"), c = ut(fu(n)), t && (c._months = t), i && (c._monthsShort = i), r && (c._weekdays = r), u && (c._weekdaysShort = u), null == f && "ISO" === e && (f = 1), null != f) { var o = ut(c._week); o.dow = f; c._week = o } "ISO" !== e && "local" !== e && "function" != typeof e || (c._fullCalendar_weekCalc = e); s && k(s) }); f.defaultAllDayEventDuration = t.duration(f.options.defaultAllDayEventDuration); f.defaultTimedEventDuration = t.duration(f.options.defaultTimedEventDuration); f.moment = function () { var n; return "local" === f.options.timezone ? (n = i.moment.apply(null, arguments), n.hasTime() && n.local()) : n = "UTC" === f.options.timezone ? i.moment.utc.apply(null, arguments) : i.moment.parseZone.apply(null, arguments), k(n), n }; f.localizeMoment = k; f.getIsAmbigTimezone = function () { return "local" !== f.options.timezone && "UTC" !== f.options.timezone }; f.applyTimezone = function (n) { if (!n.hasTime()) return n.clone(); var i, t = f.moment(n.toArray()), r = n.time() - t.time(); return r && (i = t.clone().add(r), n.time() - i.time() == 0 && (t = i)), t }; f.getNow = function () { var n = f.options.now; return "function" == typeof n && (n = n()), f.moment(n).stripZone() }; f.getEventEnd = function (n) { return n.end ? n.end.clone() : f.getDefaultEventEnd(n.allDay, n.start) }; f.getDefaultEventEnd = function (n, t) { var i = t.clone(); return n ? i.stripTime().add(f.defaultAllDayEventDuration) : i.add(f.defaultTimedEventDuration), f.getIsAmbigTimezone() && i.stripZone(), i }; f.humanizeDuration = function (n) { return n.locale(f.options.locale).humanize() }; gf.call(f); var l, p, w, a, ki, e, it, b, s, wt = r[0], rt = {}, v = 0; s = null != f.options.defaultDate ? f.moment(f.options.defaultDate).stripZone() : f.getNow(); f.getSuggestedViewHeight = function () { return void 0 === it && d(), it }; f.isHeightAuto = function () { return "auto" === f.options.contentHeight || "auto" === f.options.height }; f.setToolbarsTitle = function (n) { l.proxyCall("updateTitle", n) }; f.freezeContentHeight = nt; f.thawContentHeight = tt; ft = 0; f.initialize() } function uu(t) { n.each(oe, function (n, i) { null == t[n] && (t[n] = i(t)) }) } function fu(n) { return t.localeData(n) || t.localeData("en") } function gf() { function kt(n, t) { return !r.options.lazyFetching || d(n, t) ? g(n, t) : f.resolve(l) } function c() { l = dt(o); r.trigger("eventsReset", l) } function dt(n) { for (var i, u = [], t = 0; t < n.length; t++) i = n[t], i.start.clone().stripZone() < h && r.getEventEnd(i).stripZone() > s && u.push(i); return u } function d(n, t) { return !s || n < s || t > h } function g(n, t) { return s = n, h = t, nt() } function nt() { return v(u, "reset") } function gt(n) { return v(ft(n)) } function v(n, t) { var i, u; for ("reset" === t ? o = [] : "add" !== t && (o = st(o, n)), i = 0; i < n.length; i++) u = n[i], "pending" !== u._status && p++, u._fetchId = (u._fetchId || 0) + 1, u._status = "pending"; for (i = 0; i < n.length; i++) u = n[i], ni(u, u._fetchId); return p ? new f(function (n) { r.one("eventsReceived", n) }) : f.resolve(l) } function ni(t, i) { it(t, function (r) { var u, f, e, s = n.isArray(t.events); if (i === t._fetchId && "rejected" !== t._status) { if (t._status = "resolved", r) for (u = 0; u < r.length; u++) f = r[u], e = s ? f : y(f, t), e && o.push.apply(o, b(e)); tt() } }) } function ti(n) { var t = "pending" === n._status; n._status = "rejected"; t && tt() } function tt() { p--; p || (c(o), r.trigger("eventsReceived", l)) } function it(t, u) { for (var c, a = i.sourceFetchers, f, v, o = 0; o < a.length; o++) { if (c = a[o].call(r, t, s.clone(), h.clone(), r.options.timezone, u), c === !0) return; if ("object" == typeof c) return void it(c, u) } if (f = t.events, f) n.isFunction(f) ? (r.pushLoading(), f.call(r, s.clone(), h.clone(), r.options.timezone, function (n) { u(n); r.popLoading() })) : n.isArray(f) ? u(f) : u(); else if (v = t.url, v) { var y, b = t.success, k = t.error, d = t.complete; y = n.isFunction(t.data) ? t.data() : t.data; var l = n.extend({}, y || {}), p = e(t.startParam, r.options.startParam), w = e(t.endParam, r.options.endParam), g = e(t.timezoneParam, r.options.timezoneParam); p && (l[p] = s.format()); w && (l[w] = h.format()); r.options.timezone && "local" != r.options.timezone && (l[g] = r.options.timezone); r.pushLoading(); n.ajax(n.extend({}, hu, t, { data: l, success: function (t) { t = t || []; var i = ct(b, this, arguments); n.isArray(i) && (t = i); u(t) }, error: function () { ct(k, this, arguments); u() }, complete: function () { ct(d, this, arguments); r.popLoading() } })) } else u() } function ii(n) { var t = rt(n); t && (u.push(t), v([t], "add")) } function rt(t) { var u, f, e = i.sourceNormalizers; if (n.isFunction(t) || n.isArray(t) ? u = { events: t } : "string" == typeof t ? u = { url: t } : "object" == typeof t && (u = n.extend({}, t)), u) { for (u.className ? "string" == typeof u.className && (u.className = u.className.split(/\s+/)) : u.className = [], n.isArray(u.events) && (u.origArray = u.events, u.events = n.map(u.events, function (n) { return y(n, u) })), f = 0; f < e.length; f++) e[f].call(r, u); return u } } function ri(n) { w(et(n)) } function ui(n) { null == n ? w(u, !0) : w(ft(n)) } function w(t, i) { for (var r = 0; r < t.length; r++) ti(t[r]); i ? (u = [], o = []) : (u = n.grep(u, function (n) { for (r = 0; r < t.length; r++) if (n === t[r]) return !1; return !0 }), o = st(o, t)); c() } function fi() { return u.slice(1) } function ut(t) { return n.grep(u, function (n) { return n.id && n.id === t })[0] } function ft(t) { t ? n.isArray(t) || (t = [t]) : t = []; for (var r = [], i = 0; i < t.length; i++) r.push.apply(r, et(t[i])); return r } function et(t) { for (var i, r = 0; r < u.length; r++) if (i = u[r], i === t) return [i]; return i = ut(t), i ? [i] : n.grep(u, function (n) { return ei(t, n) }) } function ei(n, t) { return n && t && ot(n) == ot(t) } function ot(n) { return ("object" == typeof n ? n.origArray || n.googleCalendarId || n.url || n.events : null) || n } function st(t, i) { return n.grep(t, function (n) { for (var t = 0; t < i.length; t++) if (n.source === i[t]) return !1; return !0 }) } function oi(n) { ht([n]) } function ht(n) { for (var t, i = 0; i < n.length; i++) t = n[i], t.start = r.moment(t.start), t.end = t.end ? r.moment(t.end) : null, bt(t, si(t)); c() } function si(t) { var i = {}; return n.each(t, function (n, t) { lt(n) && void 0 !== t && ef(t) && (i[n] = t) }), i } function lt(n) { return !/^_|^(id|allDay|start|end)$/.test(n) } function hi(n, t) { return at([n], t) } function at(n, t) { for (var r, s, f, i, e = [], u = 0; u < n.length; u++) if (s = y(n[u])) { for (r = b(s), f = 0; f < r.length; f++) i = r[f], i.source || (t && (k.events.push(i), i.source = k), o.push(i)); e = e.concat(r) } return e.length && c(), e } function ci(t) { var r, i; for (null == t ? t = function () { return !0 } : n.isFunction(t) || (r = t + "", t = function (n) { return n._id == r }), o = n.grep(o, t, !0), i = 0; i < u.length; i++) n.isArray(u[i].events) && (u[i].events = n.grep(u[i].events, t, !0)); c() } function yt(t) { return n.isFunction(t) ? n.grep(o, t) : null != t ? (t += "", n.grep(o, function (n) { return n._id == t })) : o } function li(n) { n.start = r.moment(n.start); n.end && (n.end = r.moment(n.end)); vt(n) } function y(i, u) { var o, f, h, s = {}; if (r.options.eventDataTransform && (i = r.options.eventDataTransform(i)), u && u.eventDataTransform && (i = u.eventDataTransform(i)), n.extend(s, i), u && (s.source = u), s._id = i._id || (void 0 === i.id ? "_fc" + cu++ : i.id + ""), s.className = i.className ? "string" == typeof i.className ? i.className.split(/\s+/) : i.className : [], o = i.start || i.date, f = i.end, ar(o) && (o = t.duration(o)), ar(f) && (f = t.duration(f)), i.dow || t.isDuration(o) || t.isDuration(f)) s.start = o ? t.duration(o) : null, s.end = f ? t.duration(f) : null, s._recurring = !0; else { if (o && (o = r.moment(o), !o.isValid())) return !1; f && (f = r.moment(f), f.isValid() || (f = null)); h = i.allDay; void 0 === h && (h = e(u ? u.allDayDefault : void 0, r.options.allDayDefault)); pt(o, f, h, s) } return r.normalizeEvent(s), s } function pt(n, t, i, r) { r.start = n; r.end = t; r.allDay = i; a(r); vt(r) } function a(n) { wt(n); n.end && !n.end.isAfter(n.start) && (n.end = null); n.end || (n.end = r.options.forceEventDuration ? r.getDefaultEventEnd(n.allDay, n.start) : null) } function wt(n) { null == n.allDay && (n.allDay = !(n.start.hasTime() || n.end && n.end.hasTime())); n.allDay ? (n.start.stripTime(), n.end && n.end.stripTime()) : (n.start.hasTime() || (n.start = r.applyTimezone(n.start.time(0))), n.end && !n.end.hasTime() && (n.end = r.applyTimezone(n.end.time(0)))) } function b(t, i, r) { var f, a, e, u, o, c, l, v, y, p = []; if (i = i || s, r = r || h, t) if (t._recurring) { if (a = t.dow) for (f = {}, e = 0; e < a.length; e++) f[a[e]] = !0; for (u = i.clone().stripTime() ; u.isBefore(r) ;) f && !f[u.day()] || (o = t.start, c = t.end, l = u.clone(), v = null, o && (l = l.time(o)), c && (v = u.clone().time(c)), y = n.extend({}, t), pt(l, v, !o && !c, y), p.push(y)), u.add(1, "days") } else p.push(t); return p } function bt(t, i, u) { function s(n, t) { return u ? lr(n, t, u) : i.allDay ? nf(n, t) : cr(n, t) } var f, h, e, c, o, l, v = {}; return i = i || {}, i.start || (i.start = t.start.clone()), void 0 === i.end && (i.end = t.end ? t.end.clone() : null), null == i.allDay && (i.allDay = t.allDay), a(i), f = { start: t._start.clone(), end: t._end ? t._end.clone() : r.getDefaultEventEnd(t._allDay, t._start), allDay: i.allDay }, a(f), h = null !== t._end && null === i.end, e = s(i.start, f.start), i.end ? (c = s(i.end, f.end), o = c.subtract(e)) : o = null, n.each(i, function (n, t) { lt(n) && void 0 !== t && (v[n] = t) }), l = ai(yt(t._id), h, i.allDay, e, o, v), { dateDelta: e, durationDelta: o, undo: l } } function ai(t, i, u, f, e, o) { var h = r.getIsAmbigTimezone(), s = []; return f && !f.valueOf() && (f = null), e && !e.valueOf() && (e = null), n.each(t, function (t, c) { var v, l; v = { start: c.start.clone(), end: c.end ? c.end.clone() : null, allDay: c.allDay }; n.each(o, function (n) { v[n] = c[n] }); l = { start: c._start, end: c._end, allDay: u }; a(l); i ? l.end = null : e && !l.end && (l.end = r.getDefaultEventEnd(l.allDay, l.start)); f && (l.start.add(f), l.end && l.end.add(f)); e && l.end.add(e); h && !l.allDay && (f || e) && (l.start.stripZone(), l.end && l.end.stripZone()); n.extend(c, o, l); vt(c); s.push(function () { n.extend(c, v); vt(c) }) }), function () { for (var n = 0; n < s.length; n++) s[n]() } } var r = this; r.requestEvents = kt; r.reportEventChange = c; r.isFetchNeeded = d; r.fetchEvents = g; r.fetchEventSources = v; r.refetchEvents = nt; r.refetchEventSources = gt; r.getEventSources = fi; r.getEventSourceById = ut; r.addEventSource = ii; r.removeEventSource = ri; r.removeEventSources = ui; r.updateEvent = oi; r.updateEvents = ht; r.renderEvent = hi; r.renderEvents = at; r.removeEvents = ci; r.clientEvents = yt; r.mutateEvent = bt; r.normalizeEventDates = a; r.normalizeEventTimes = wt; var s, h, l, k = { events: [] }, u = [k], p = 0, o = []; n.each((r.options.events ? [r.options.events] : []).concat(r.options.eventSources || []), function (n, t) { var i = rt(t); i && u.push(i) }); r.getEventCache = function () { return o }; r.getPrunedEventCache = function () { return l }; r.rezoneArrayEventSources = function () { for (var i, r, t = 0; t < u.length; t++) if (i = u[t].events, n.isArray(i)) for (r = 0; r < i.length; r++) li(i[r]) }; r.buildEventFromInput = y; r.expandEvent = b } function vt(n) { n._allDay = n.allDay; n._start = n.start.clone(); n._end = n.end ? n.end.clone() : null } var i = n.fullCalendar = { version: "3.2.0", internalApiVersion: 8 }, s = i.views = {}, eu, yt, hi, pt, ou, tt, o, su, a, ai, et, vi, w, kt, r, k, hu, cu, yi, au, vu; n.fn.fullCalendar = function (t) { var u = Array.prototype.slice.call(arguments, 1), i = this; return this.each(function (f, e) { var h, s = n(e), o = s.data("fullCalendar"); "string" == typeof t ? o && n.isFunction(o[t]) && (h = o[t].apply(o, u), f || (i = h), "destroy" === t && s.removeData("fullCalendar")) : o || (o = new r(s, t), s.data("fullCalendar", o), o.render()) }), i }; eu = ["header", "footer", "buttonText", "buttonIcons", "themeButtonIcons"]; i.intersectRanges = ht; i.applyAll = ct; i.debounce = at; i.isInt = b; i.htmlEscape = u; i.cssToStr = lt; i.proxy = ft; i.capitaliseFirstLetter = yr; i.getOuterRect = ni; i.getClientRect = nr; i.getContentRect = yu; i.getScrollbarWidths = ti; yt = null; i.preventDefault = rt; i.intersectRects = fr; i.parseFieldSpecs = er; i.compareByFieldSpecs = or; i.compareByFieldSpec = sr; i.flexibleCompare = hr; i.computeIntervalUnit = ii; i.divideRangeByDuration = rf; i.divideDurationByDuration = ri; i.multiplyDuration = uf; i.durationHasTime = d; hi = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"]; pt = ["year", "month", "week", "day", "hour", "minute", "second", "millisecond"]; i.log = function () { var n = window.console; if (n && n.log) return n.log.apply(n, arguments) }; i.warn = function () { var n = window.console; return n && n.warn ? n.warn.apply(n, arguments) : i.log.apply(i, arguments) }; ou = {}.hasOwnProperty; i.createObject = ut; var ne = /^\s*\d{4}-\d\d$/, te = /^\s*\d{4}-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?)?$/, h = t.fn, p = n.extend({}, h), ci = t.momentProperties; ci.push("_fullCalendar"); ci.push("_ambigTime"); ci.push("_ambigZone"); i.moment = function () { return oi(arguments) }; i.moment.utc = function () { var n = oi(arguments, !0); return n.hasTime() && n.utc(), n }; i.moment.parseZone = function () { return oi(arguments, !0, !0) }; h.week = h.weeks = function (n) { var t = this._locale._fullCalendar_weekCalc; return null == n && "function" == typeof t ? t(this) : "ISO" === t ? p.isoWeek.apply(this, arguments) : p.week.apply(this, arguments) }; h.time = function (n) { if (!this._fullCalendar) return p.time.apply(this, arguments); if (null == n) return t.duration({ hours: this.hours(), minutes: this.minutes(), seconds: this.seconds(), milliseconds: this.milliseconds() }); this._ambigTime = !1; t.isDuration(n) || t.isMoment(n) || (n = t.duration(n)); var i = 0; return t.isDuration(n) && (i = 24 * Math.floor(n.asDays())), this.hours(i + n.hours()).minutes(n.minutes()).seconds(n.seconds()).milliseconds(n.milliseconds()) }; h.stripTime = function () { return this._ambigTime || (this.utc(!0), this.set({ hours: 0, minutes: 0, seconds: 0, ms: 0 }), this._ambigTime = !0, this._ambigZone = !0), this }; h.hasTime = function () { return !this._ambigTime }; h.stripZone = function () { var n; return this._ambigZone || (n = this._ambigTime, this.utc(!0), this._ambigTime = n || !1, this._ambigZone = !0), this }; h.hasZone = function () { return !this._ambigZone }; h.local = function (n) { return p.local.call(this, this._ambigZone || n), this._ambigTime = !1, this._ambigZone = !1, this }; h.utc = function (n) { return p.utc.call(this, n), this._ambigTime = !1, this._ambigZone = !1, this }; h.utcOffset = function (n) { return null != n && (this._ambigTime = !1, this._ambigZone = !1), p.utcOffset.apply(this, arguments) }; h.format = function () { return this._fullCalendar && arguments[0] ? ie(this, arguments[0]) : this._ambigTime ? wt(this, "YYYY-MM-DD") : this._ambigZone ? wt(this, "YYYY-MM-DD[T]HH:mm:ss") : p.format.apply(this, arguments) }; h.toISOString = function () { return this._ambigTime ? wt(this, "YYYY-MM-DD") : this._ambigZone ? wt(this, "YYYY-MM-DD[T]HH:mm:ss") : p.toISOString.apply(this, arguments) }, function () { function w(n, t) { return g(f(t).fakeFormatString, n) } function t(n, t) { return p.format.call(n, t) } function b(n, t, r, u, e) { var o; return n = i.moment.parseZone(n), t = i.moment.parseZone(t), o = n.localeData(), r = o.longDateFormat(r) || r, k(f(r), n, t, u || " - ", e) } function k(n, t, i, r, f) { for (var o, c, s = n.sameUnits, p = t.clone().stripZone(), w = i.clone().stripZone(), l = u(n.fakeFormatString, t), d = u(n.fakeFormatString, i), b = "", y = "", a = "", v = "", k = "", e = 0; e < s.length && (!s[e] || p.isSame(w, s[e])) ; e++) b += l[e]; for (o = s.length - 1; o > e && (!s[o] || p.isSame(w, s[o])) && (o - 1 !== e || "." !== l[o]) ; o--) y = l[o] + y; for (c = e; c <= o; c++) a += l[c], v += d[c]; return (a || v) && (k = f ? v + r + a : a + r + v), h(b + k + y) } function f(n) { return y[n] || (y[n] = d(n)) } function d(n) { var t = r(n); return { fakeFormatString: o(t), sameUnits: s(t) } } function r(n) { for (var t, i = [], u = /\[([^\]]*)\]|\(([^\)]*)\)|(LTS|LT|(\w)\4*o?)|([^\w\[\(]+)/g; t = u.exec(n) ;) t[1] ? i.push.apply(i, e(t[1])) : t[2] ? i.push({ maybe: r(t[2]) }) : t[3] ? i.push({ token: t[3] }) : t[5] && i.push.apply(i, e(t[5])); return i } function e(n) { return ". " === n ? [".", " "] : [n] } function o(t) { for (var i, r = [], u = 0; u < t.length; u++) i = t[u], "string" == typeof i ? r.push("[" + i + "]") : i.token ? i.token in a ? r.push(l + "[" + i.token + "]") : r.push(i.token) : i.maybe && r.push(n + o(i.maybe) + n); return r.join(c) } function s(n) { for (var t, u, i = [], r = 0; r < n.length; r++) t = n[r], t.token ? (u = v[t.token.charAt(0)], i.push(u ? u.unit : "second")) : t.maybe ? i.push.apply(i, s(t.maybe)) : i.push(null); return i } function g(n, t) { return h(u(n, t).join("")) } function u(n, i) { for (var u, f = [], o = t(i, n), e = o.split(c), r = 0; r < e.length; r++) u = e[r], u.charAt(0) === l ? f.push(a[u.substring(1)](i)) : f.push(u); return f } function h(n) { return n.replace(tt, function (n, t) { return t.match(/[1-9]/) ? t : "" }) } function nt(n) { for (var f, u, t, e = r(n), i = 0; i < e.length; i++) f = e[i], f.token && (u = v[f.token.charAt(0)], u && (!t || u.value > t.value) && (t = u)); return t ? t.unit : null } i.formatDate = w; i.formatRange = b; i.oldMomentFormat = t; i.queryMostGranularFormatUnit = nt; var c = "\v", l = "\x1f", n = "\x1e", tt = new RegExp(n + "([^" + n + "]*)" + n, "g"), a = { t: function (n) { return t(n, "a").charAt(0) }, T: function (n) { return t(n, "A").charAt(0) } }, v = { Y: { value: 1, unit: "year" }, M: { value: 2, unit: "month" }, W: { value: 3, unit: "week" }, w: { value: 3, unit: "week" }, D: { value: 4, unit: "day" }, d: { value: 4, unit: "day" } }, y = {} }(); var ie = i.formatDate, re = i.formatRange, wt = i.oldMomentFormat; i.Class = c; c.extend = function () { for (var t, i = arguments.length, n = 0; n < i; n++) t = arguments[n], n < i - 1 && pr(this, t); return hf(this, t || {}) }; c.mixin = function (n) { pr(this, n) }; i.Promise = f; f.immediate = !0; f.resolve = function (t) { var r, i, u; return t && "function" == typeof t.resolve ? t.promise() : t && "function" == typeof t.then ? t : (r = n.Deferred().resolve(t), i = r.promise(), f.immediate && (u = i.then, i._value = t, i.then = function (n, r) { return "function" == typeof n ? f.resolve(n(t)) : u.call(i, n, r) }), i) }; f.reject = function () { return n.Deferred().reject().promise() }; f.all = function (t) { var r, u, i, e = !1; if (f.immediate) for (e = !0, r = [], u = 0; u < t.length; u++) if (i = t[u], i && "function" == typeof i.state && "resolved" === i.state() && "_value" in i) r.push(i._value); else { if (i && "function" == typeof i.then) { e = !1; break } r.push(i) } return e ? f.resolve(r) : n.when.apply(n.when, t).then(function () { return n.when(n.makeArray(arguments)) }) }; i.TaskQueue = si; var li = i.EmitterMixin = { on: function (t, i) { return n(this).on(t, this._prepareIntercept(i)), this }, one: function (t, i) { return n(this).one(t, this._prepareIntercept(i)), this }, _prepareIntercept: function (t) { var i = function (n, i) { return t.apply(i.context || this, i.args || []) }; return t.guid || (t.guid = n.guid++), i.guid = t.guid, i }, off: function (t, i) { return n(this).off(t, i), this }, trigger: function (t) { var i = Array.prototype.slice.call(arguments, 1); return n(this).triggerHandler(t, { args: i }), this }, triggerWith: function (t, i, r) { return n(this).triggerHandler(t, { context: i, args: r }), this } }, nt = i.ListenerMixin = function () { var t = 0; return { listenerId: null, listenTo: function (t, i, r) { if ("object" == typeof i) for (var u in i) i.hasOwnProperty(u) && this.listenTo(t, u, i[u]); else "string" == typeof i && t.on(i + "." + this.getListenerNamespace(), n.proxy(r, this)) }, stopListeningTo: function (n, t) { n.off((t || "") + "." + this.getListenerNamespace()) }, getListenerNamespace: function () { return null == this.listenerId && (this.listenerId = t++), "_listener" + this.listenerId } } }(), ue = c.extend(nt, { isHidden: !0, options: null, el: null, margin: 10, constructor: function (n) { this.options = n || {} }, show: function () { this.isHidden && (this.el || this.render(), this.el.show(), this.position(), this.isHidden = !1, this.trigger("show")) }, hide: function () { this.isHidden || (this.el.hide(), this.isHidden = !0, this.trigger("hide")) }, render: function () { var i = this, t = this.options; this.el = n('<div class="fc-popover"/>').addClass(t.className || "").css({ top: 0, left: 0 }).append(t.content).appendTo(t.parentEl); this.el.on("click", ".fc-close", function () { i.hide() }); t.autoHide && this.listenTo(n(document), "mousedown", this.documentMousedown) }, documentMousedown: function (t) { this.el && !n(t.target).closest(this.el).length && this.hide() }, removeElement: function () { this.hide(); this.el && (this.el.remove(), this.el = null); this.stopListeningTo(n(document), "mousedown") }, position: function () { var f, e, o, t, i, r = this.options, h = this.el.offsetParent().offset(), c = this.el.outerWidth(), l = this.el.outerHeight(), s = n(window), u = gt(this.el); t = r.top || 0; i = void 0 !== r.left ? r.left : void 0 !== r.right ? r.right - c : 0; u.is(window) || u.is(document) ? (u = s, f = 0, e = 0) : (o = u.offset(), f = o.top, e = o.left); f += s.scrollTop(); e += s.scrollLeft(); r.viewportConstrain !== !1 && (t = Math.min(t, f + u.outerHeight() - l - this.margin), t = Math.max(t, f + this.margin), i = Math.min(i, e + u.outerWidth() - c - this.margin), i = Math.max(i, e + this.margin)); this.el.css({ top: t - h.top, left: i - h.left }) }, trigger: function (n) { this.options[n] && this.options[n].apply(this, Array.prototype.slice.call(arguments, 1)) } }), bt = i.CoordCache = c.extend({ els: null, forcedOffsetParentEl: null, origin: null, boundingRect: null, isHorizontal: !1, isVertical: !1, lefts: null, rights: null, tops: null, bottoms: null, constructor: function (t) { this.els = n(t.els); this.isHorizontal = t.isHorizontal; this.isVertical = t.isVertical; this.forcedOffsetParentEl = t.offsetParent ? n(t.offsetParent) : null }, build: function () { var n = this.forcedOffsetParentEl; !n && this.els.length > 0 && (n = this.els.eq(0).offsetParent()); this.origin = n ? n.offset() : null; this.boundingRect = this.queryBoundingRect(); this.isHorizontal && this.buildElHorizontals(); this.isVertical && this.buildElVerticals() }, clear: function () { this.origin = null; this.boundingRect = null; this.lefts = null; this.rights = null; this.tops = null; this.bottoms = null }, ensureBuilt: function () { this.origin || this.build() }, buildElHorizontals: function () { var t = [], i = []; this.els.each(function (r, u) { var f = n(u), e = f.offset().left, o = f.outerWidth(); t.push(e); i.push(e + o) }); this.lefts = t; this.rights = i }, buildElVerticals: function () { var t = [], i = []; this.els.each(function (r, u) { var f = n(u), e = f.offset().top, o = f.outerHeight(); t.push(e); i.push(e + o) }); this.tops = t; this.bottoms = i }, getHorizontalIndex: function (n) { this.ensureBuilt(); for (var i = this.lefts, r = this.rights, u = i.length, t = 0; t < u; t++) if (n >= i[t] && n < r[t]) return t }, getVerticalIndex: function (n) { this.ensureBuilt(); for (var i = this.tops, r = this.bottoms, u = i.length, t = 0; t < u; t++) if (n >= i[t] && n < r[t]) return t }, getLeftOffset: function (n) { return this.ensureBuilt(), this.lefts[n] }, getLeftPosition: function (n) { return this.ensureBuilt(), this.lefts[n] - this.origin.left }, getRightOffset: function (n) { return this.ensureBuilt(), this.rights[n] }, getRightPosition: function (n) { return this.ensureBuilt(), this.rights[n] - this.origin.left }, getWidth: function (n) { return this.ensureBuilt(), this.rights[n] - this.lefts[n] }, getTopOffset: function (n) { return this.ensureBuilt(), this.tops[n] }, getTopPosition: function (n) { return this.ensureBuilt(), this.tops[n] - this.origin.top }, getBottomOffset: function (n) { return this.ensureBuilt(), this.bottoms[n] }, getBottomPosition: function (n) { return this.ensureBuilt(), this.bottoms[n] - this.origin.top }, getHeight: function (n) { return this.ensureBuilt(), this.bottoms[n] - this.tops[n] }, queryBoundingRect: function () { var n; return this.els.length > 0 && (n = gt(this.els.eq(0)), !n.is(document)) ? nr(n) : null }, isPointInBounds: function (n, t) { return this.isLeftInBounds(n) && this.isTopInBounds(t) }, isLeftInBounds: function (n) { return !this.boundingRect || n >= this.boundingRect.left && n < this.boundingRect.right }, isTopInBounds: function (n) { return !this.boundingRect || n >= this.boundingRect.top && n < this.boundingRect.bottom } }), l = i.DragListener = c.extend(nt, { options: null, subjectEl: null, originX: null, originY: null, scrollEl: null, isInteracting: !1, isDistanceSurpassed: !1, isDelayEnded: !1, isDragging: !1, isTouch: !1, delay: null, delayTimeoutId: null, minDistance: null, shouldCancelTouchScroll: !0, scrollAlwaysKills: !1, constructor: function (n) { this.options = n || {} }, startInteraction: function (t, i) { var r = rr(t); if ("mousedown" === t.type) { if (o.get().shouldIgnoreMouse()) return; if (!ir(t)) return; t.preventDefault() } this.isInteracting || (i = i || {}, this.delay = e(i.delay, this.options.delay, 0), this.minDistance = e(i.distance, this.options.distance, 0), this.subjectEl = this.options.subjectEl, ur(n("body")), this.isInteracting = !0, this.isTouch = r, this.isDelayEnded = !1, this.isDistanceSurpassed = !1, this.originX = v(t), this.originY = y(t), this.scrollEl = gt(n(t.target)), this.bindHandlers(), this.initAutoScroll(), this.handleInteractionStart(t), this.startDelay(t), this.minDistance || this.handleDistanceSurpassed(t)) }, handleInteractionStart: function (n) { this.trigger("interactionStart", n) }, endInteraction: function (t, i) { this.isInteracting && (this.endDrag(t), this.delayTimeoutId && (clearTimeout(this.delayTimeoutId), this.delayTimeoutId = null), this.destroyAutoScroll(), this.unbindHandlers(), this.isInteracting = !1, this.handleInteractionEnd(t, i), bu(n("body"))) }, handleInteractionEnd: function (n, t) { this.trigger("interactionEnd", n, t || !1) }, bindHandlers: function () { var n = o.get(); this.isTouch ? this.listenTo(n, { touchmove: this.handleTouchMove, touchend: this.endInteraction, scroll: this.handleTouchScroll }) : this.listenTo(n, { mousemove: this.handleMouseMove, mouseup: this.endInteraction }); this.listenTo(n, { selectstart: rt, contextmenu: rt }) }, unbindHandlers: function () { this.stopListeningTo(o.get()) }, startDrag: function (n, t) { this.startInteraction(n, t); this.isDragging || (this.isDragging = !0, this.handleDragStart(n)) }, handleDragStart: function (n) { this.trigger("dragStart", n) }, handleMove: function (n) { var r, t = v(n) - this.originX, i = y(n) - this.originY, u = this.minDistance; this.isDistanceSurpassed || (r = t * t + i * i, r >= u * u && this.handleDistanceSurpassed(n)); this.isDragging && this.handleDrag(t, i, n) }, handleDrag: function (n, t, i) { this.trigger("drag", n, t, i); this.updateAutoScroll(i) }, endDrag: function (n) { this.isDragging && (this.isDragging = !1, this.handleDragEnd(n)) }, handleDragEnd: function (n) { this.trigger("dragEnd", n) }, startDelay: function (n) { var t = this; this.delay ? this.delayTimeoutId = setTimeout(function () { t.handleDelayEnd(n) }, this.delay) : this.handleDelayEnd(n) }, handleDelayEnd: function (n) { this.isDelayEnded = !0; this.isDistanceSurpassed && this.startDrag(n) }, handleDistanceSurpassed: function (n) { this.isDistanceSurpassed = !0; this.isDelayEnded && this.startDrag(n) }, handleTouchMove: function (n) { this.isDragging && this.shouldCancelTouchScroll && n.preventDefault(); this.handleMove(n) }, handleMouseMove: function (n) { this.handleMove(n) }, handleTouchScroll: function (n) { this.isDragging && !this.scrollAlwaysKills || this.endInteraction(n, !0) }, trigger: function (n) { this.options[n] && this.options[n].apply(this, Array.prototype.slice.call(arguments, 1)); this["_" + n] && this["_" + n].apply(this, Array.prototype.slice.call(arguments, 1)) } }); l.mixin({ isAutoScroll: !1, scrollBounds: null, scrollTopVel: null, scrollLeftVel: null, scrollIntervalId: null, scrollSensitivity: 30, scrollSpeed: 200, scrollIntervalMs: 50, initAutoScroll: function () { var n = this.scrollEl; this.isAutoScroll = this.options.scroll && n && !n.is(window) && !n.is(document); this.isAutoScroll && this.listenTo(n, "scroll", at(this.handleDebouncedScroll, 100)) }, destroyAutoScroll: function () { this.endAutoScroll(); this.isAutoScroll && this.stopListeningTo(this.scrollEl, "scroll") }, computeScrollBounds: function () { this.isAutoScroll && (this.scrollBounds = ni(this.scrollEl)) }, updateAutoScroll: function (n) { var r, u, f, e, t = this.scrollSensitivity, i = this.scrollBounds, o = 0, s = 0; i && (r = (t - (y(n) - i.top)) / t, u = (t - (i.bottom - y(n))) / t, f = (t - (v(n) - i.left)) / t, e = (t - (i.right - v(n))) / t, r >= 0 && r <= 1 ? o = r * this.scrollSpeed * -1 : u >= 0 && u <= 1 && (o = u * this.scrollSpeed), f >= 0 && f <= 1 ? s = f * this.scrollSpeed * -1 : e >= 0 && e <= 1 && (s = e * this.scrollSpeed)); this.setScrollVel(o, s) }, setScrollVel: function (n, t) { this.scrollTopVel = n; this.scrollLeftVel = t; this.constrainScrollVel(); !this.scrollTopVel && !this.scrollLeftVel || this.scrollIntervalId || (this.scrollIntervalId = setInterval(ft(this, "scrollIntervalFunc"), this.scrollIntervalMs)) }, constrainScrollVel: function () { var n = this.scrollEl; this.scrollTopVel < 0 ? n.scrollTop() <= 0 && (this.scrollTopVel = 0) : this.scrollTopVel > 0 && n.scrollTop() + n[0].clientHeight >= n[0].scrollHeight && (this.scrollTopVel = 0); this.scrollLeftVel < 0 ? n.scrollLeft() <= 0 && (this.scrollLeftVel = 0) : this.scrollLeftVel > 0 && n.scrollLeft() + n[0].clientWidth >= n[0].scrollWidth && (this.scrollLeftVel = 0) }, scrollIntervalFunc: function () { var n = this.scrollEl, t = this.scrollIntervalMs / 1e3; this.scrollTopVel && n.scrollTop(n.scrollTop() + this.scrollTopVel * t); this.scrollLeftVel && n.scrollLeft(n.scrollLeft() + this.scrollLeftVel * t); this.constrainScrollVel(); this.scrollTopVel || this.scrollLeftVel || this.endAutoScroll() }, endAutoScroll: function () { this.scrollIntervalId && (clearInterval(this.scrollIntervalId), this.scrollIntervalId = null, this.handleScrollEnd()) }, handleDebouncedScroll: function () { this.scrollIntervalId || this.handleScrollEnd() }, handleScrollEnd: function () { } }); tt = l.extend({ component: null, origHit: null, hit: null, coordAdjust: null, constructor: function (n, t) { l.call(this, t); this.component = n }, handleInteractionStart: function (n) { var i, r, t, u = this.subjectEl; this.component.hitsNeeded(); this.computeScrollBounds(); n ? (r = { left: v(n), top: y(n) }, t = r, u && (i = ni(u), t = ku(t, i)), this.origHit = this.queryHit(t.left, t.top), u && this.options.subjectCenter && (this.origHit && (i = fr(this.origHit, i) || i), t = du(i)), this.coordAdjust = gu(t, r)) : (this.origHit = null, this.coordAdjust = null); l.prototype.handleInteractionStart.apply(this, arguments) }, handleDragStart: function (n) { var t; l.prototype.handleDragStart.apply(this, arguments); t = this.queryHit(v(n), y(n)); t && this.handleHitOver(t) }, handleDrag: function (n, t, i) { var r; l.prototype.handleDrag.apply(this, arguments); r = this.queryHit(v(i), y(i)); wr(r, this.hit) || (this.hit && this.handleHitOut(), r && this.handleHitOver(r)) }, handleDragEnd: function () { this.handleHitDone(); l.prototype.handleDragEnd.apply(this, arguments) }, handleHitOver: function (n) { var t = wr(n, this.origHit); this.hit = n; this.trigger("hitOver", this.hit, t, this.origHit) }, handleHitOut: function () { this.hit && (this.trigger("hitOut", this.hit), this.handleHitDone(), this.hit = null) }, handleHitDone: function () { this.hit && this.trigger("hitDone", this.hit) }, handleInteractionEnd: function () { l.prototype.handleInteractionEnd.apply(this, arguments); this.origHit = null; this.hit = null; this.component.hitsNotNeeded() }, handleScrollEnd: function () { l.prototype.handleScrollEnd.apply(this, arguments); this.isDragging && (this.component.releaseHits(), this.component.prepareHits()) }, queryHit: function (n, t) { return this.coordAdjust && (n += this.coordAdjust.left, t += this.coordAdjust.top), this.component.queryHit(n, t) } }); i.touchMouseIgnoreWait = 500; o = c.extend(nt, li, { isTouching: !1, mouseIgnoreDepth: 0, handleScrollProxy: null, bind: function () { var t = this; this.listenTo(n(document), { touchstart: this.handleTouchStart, touchcancel: this.handleTouchCancel, touchend: this.handleTouchEnd, mousedown: this.handleMouseDown, mousemove: this.handleMouseMove, mouseup: this.handleMouseUp, click: this.handleClick, selectstart: this.handleSelectStart, contextmenu: this.handleContextMenu }); window.addEventListener("touchmove", this.handleTouchMoveProxy = function (i) { t.handleTouchMove(n.Event(i)) }, { passive: !1 }); window.addEventListener("scroll", this.handleScrollProxy = function (i) { t.handleScroll(n.Event(i)) }, !0) }, unbind: function () { this.stopListeningTo(n(document)); window.removeEventListener("touchmove", this.handleTouchMoveProxy); window.removeEventListener("scroll", this.handleScrollProxy, !0) }, handleTouchStart: function (n) { this.stopTouch(n, !0); this.isTouching = !0; this.trigger("touchstart", n) }, handleTouchMove: function (n) { this.isTouching && this.trigger("touchmove", n) }, handleTouchCancel: function (n) { this.isTouching && (this.trigger("touchcancel", n), this.stopTouch(n)) }, handleTouchEnd: function (n) { this.stopTouch(n) }, handleMouseDown: function (n) { this.shouldIgnoreMouse() || this.trigger("mousedown", n) }, handleMouseMove: function (n) { this.shouldIgnoreMouse() || this.trigger("mousemove", n) }, handleMouseUp: function (n) { this.shouldIgnoreMouse() || this.trigger("mouseup", n) }, handleClick: function (n) { this.shouldIgnoreMouse() || this.trigger("click", n) }, handleSelectStart: function (n) { this.trigger("selectstart", n) }, handleContextMenu: function (n) { this.trigger("contextmenu", n) }, handleScroll: function (n) { this.trigger("scroll", n) }, stopTouch: function (n, t) { this.isTouching && (this.isTouching = !1, this.trigger("touchend", n), t || this.startTouchMouseIgnore()) }, startTouchMouseIgnore: function () { var t = this, n = i.touchMouseIgnoreWait; n && (this.mouseIgnoreDepth++, setTimeout(function () { t.mouseIgnoreDepth-- }, n)) }, shouldIgnoreMouse: function () { return this.isTouching || Boolean(this.mouseIgnoreDepth) } }); !function () { var n = null, t = 0; o.get = function () { return n || (n = new o, n.bind()), n }; o.needed = function () { o.get(); t++ }; o.unneeded = function () { t--; t || (n.unbind(), n = null) } }(); su = c.extend(nt, { options: null, sourceEl: null, el: null, parentEl: null, top0: null, left0: null, y0: null, x0: null, topDelta: null, leftDelta: null, isFollowing: !1, isHidden: !1, isAnimating: !1, constructor: function (t, i) { this.options = i = i || {}; this.sourceEl = t; this.parentEl = i.parentEl ? n(i.parentEl) : t.parent() }, start: function (t) { this.isFollowing || (this.isFollowing = !0, this.y0 = y(t), this.x0 = v(t), this.topDelta = 0, this.leftDelta = 0, this.isHidden || this.updatePosition(), rr(t) ? this.listenTo(n(document), "touchmove", this.handleMove) : this.listenTo(n(document), "mousemove", this.handleMove)) }, stop: function (t, i) { function u() { r.isAnimating = !1; r.removeElement(); r.top0 = r.left0 = null; i && i() } var r = this, f = this.options.revertDuration; this.isFollowing && !this.isAnimating && (this.isFollowing = !1, this.stopListeningTo(n(document)), t && f && !this.isHidden ? (this.isAnimating = !0, this.el.animate({ top: this.top0, left: this.left0 }, { duration: f, complete: u })) : u()) }, getEl: function () { var n = this.el; return n || (n = this.el = this.sourceEl.clone().addClass(this.options.additionalClass || "").css({ position: "absolute", visibility: "", display: this.isHidden ? "none" : "", margin: 0, right: "auto", bottom: "auto", width: this.sourceEl.width(), height: this.sourceEl.height(), opacity: this.options.opacity || "", zIndex: this.options.zIndex }), n.addClass("fc-unselectable"), n.appendTo(this.parentEl)), n }, removeElement: function () { this.el && (this.el.remove(), this.el = null) }, updatePosition: function () { var n, t; this.getEl(); null === this.top0 && (n = this.sourceEl.offset(), t = this.el.offsetParent().offset(), this.top0 = n.top - t.top, this.left0 = n.left - t.left); this.el.css({ top: this.top0 + this.topDelta, left: this.left0 + this.leftDelta }) }, handleMove: function (n) { this.topDelta = y(n) - this.y0; this.leftDelta = v(n) - this.x0; this.isHidden || this.updatePosition() }, hide: function () { this.isHidden || (this.isHidden = !0, this.el && this.el.hide()) }, show: function () { this.isHidden && (this.isHidden = !1, this.updatePosition(), this.getEl().show()) } }); a = i.Grid = c.extend(nt, { hasDayInteractions: !0, view: null, isRTL: null, start: null, end: null, el: null, elsByFill: null, eventTimeFormat: null, displayEventTime: null, displayEventEnd: null, minResizeDuration: null, largeUnit: null, dayClickListener: null, daySelectListener: null, segDragListener: null, segResizeListener: null, externalDragListener: null, constructor: function (n) { this.view = n; this.isRTL = n.opt("isRTL"); this.elsByFill = {}; this.dayClickListener = this.buildDayClickListener(); this.daySelectListener = this.buildDaySelectListener() }, computeEventTimeFormat: function () { return this.view.opt("smallTimeFormat") }, computeDisplayEventTime: function () { return !0 }, computeDisplayEventEnd: function () { return !0 }, setRange: function (n) { this.start = n.start.clone(); this.end = n.end.clone(); this.rangeUpdated(); this.processRangeOptions() }, rangeUpdated: function () { }, processRangeOptions: function () { var n, t, i = this.view; this.eventTimeFormat = i.opt("eventTimeFormat") || i.opt("timeFormat") || this.computeEventTimeFormat(); n = i.opt("displayEventTime"); null == n && (n = this.computeDisplayEventTime()); t = i.opt("displayEventEnd"); null == t && (t = this.computeDisplayEventEnd()); this.displayEventTime = n; this.displayEventEnd = t }, spanToSegs: function () { }, diffDates: function (n, t) { return this.largeUnit ? lr(n, t, this.largeUnit) : cr(n, t) }, hitsNeededDepth: 0, hitsNeeded: function () { this.hitsNeededDepth++ || this.prepareHits() }, hitsNotNeeded: function () { this.hitsNeededDepth && !--this.hitsNeededDepth && this.releaseHits() }, prepareHits: function () { }, releaseHits: function () { }, queryHit: function () { }, getHitSpan: function () { }, getHitEl: function () { }, setElement: function (n) { this.el = n; this.hasDayInteractions && (ur(n), this.bindDayHandler("touchstart", this.dayTouchStart), this.bindDayHandler("mousedown", this.dayMousedown)); this.bindSegHandlers(); this.bindGlobalHandlers() }, bindDayHandler: function (t, i) { var r = this; this.el.on(t, function (t) { if (!n(t.target).is(r.segSelector + "," + r.segSelector + " *,.fc-more,a[data-goto]")) return i.call(r, t) }) }, removeElement: function () { this.unbindGlobalHandlers(); this.clearDragListeners(); this.el.remove() }, renderSkeleton: function () { }, renderDates: function () { }, unrenderDates: function () { }, bindGlobalHandlers: function () { this.listenTo(n(document), { dragstart: this.externalDragStart, sortstart: this.externalDragStart }) }, unbindGlobalHandlers: function () { this.stopListeningTo(n(document)) }, dayMousedown: function (n) { var t = this.view; t.isSelected || t.selectedEvent || (this.dayClickListener.startInteraction(n), t.opt("selectable") && this.daySelectListener.startInteraction(n, { distance: t.opt("selectMinDistance") })) }, dayTouchStart: function (n) { var i, t = this.view; t.isSelected || t.selectedEvent || (i = t.opt("selectLongPressDelay"), null == i && (i = t.opt("longPressDelay")), this.dayClickListener.startInteraction(n), t.opt("selectable") && this.daySelectListener.startInteraction(n, { delay: i })) }, buildDayClickListener: function () { var n, i = this, r = this.view, t = new tt(this, { scroll: r.opt("dragScroll"), interactionStart: function () { n = t.origHit }, hitOver: function (t, i) { i || (n = null) }, hitOut: function () { n = null }, interactionEnd: function (t, u) { !u && n && r.triggerDayClick(i.getHitSpan(n), i.getHitEl(n), t) } }); return t.shouldCancelTouchScroll = !1, t.scrollAlwaysKills = !0, t }, buildDaySelectListener: function () { var n, t = this, i = this.view; return new tt(this, { scroll: i.opt("dragScroll"), interactionStart: function () { n = null }, dragStart: function () { i.unselect() }, hitOver: function (i, r, u) { u && (n = t.computeSelection(t.getHitSpan(u), t.getHitSpan(i)), n ? t.renderSelection(n) : n === !1 && ot()) }, hitOut: function () { n = null; t.unrenderSelection() }, hitDone: function () { st() }, interactionEnd: function (t, r) { !r && n && i.reportSelection(n, t) } }) }, clearDragListeners: function () { this.dayClickListener.endInteraction(); this.daySelectListener.endInteraction(); this.segDragListener && this.segDragListener.endInteraction(); this.segResizeListener && this.segResizeListener.endInteraction(); this.externalDragListener && this.externalDragListener.endInteraction() }, renderEventLocationHelper: function (n, t) { var i = this.fabricateHelperEvent(n, t); return this.renderHelper(i, t) }, fabricateHelperEvent: function (n, t) { var i = t ? ut(t.event) : {}; return i.start = n.start.clone(), i.end = n.end ? n.end.clone() : null, i.allDay = null, this.view.calendar.normalizeEventDates(i), i.className = (i.className || []).concat("fc-helper"), t || (i.editable = !1), i }, renderHelper: function () { }, unrenderHelper: function () { }, renderSelection: function (n) { this.renderHighlight(n) }, unrenderSelection: function () { this.unrenderHighlight() }, computeSelection: function (n, t) { var i = this.computeSelectionSpan(n, t); return !(i && !this.view.calendar.isSelectionSpanAllowed(i)) && i }, computeSelectionSpan: function (n, t) { var i = [n.start, n.end, t.start, t.end]; return i.sort(sf), { start: i[0].clone(), end: i[3].clone() } }, renderHighlight: function (n) { this.renderFill("highlight", this.spanToSegs(n)) }, unrenderHighlight: function () { this.unrenderFill("highlight") }, highlightSegClasses: function () { return ["fc-highlight"] }, renderBusinessHours: function () { }, unrenderBusinessHours: function () { }, getNowIndicatorUnit: function () { }, renderNowIndicator: function () { }, unrenderNowIndicator: function () { }, renderFill: function () { }, unrenderFill: function (n) { var t = this.elsByFill[n]; t && (t.remove(), delete this.elsByFill[n]) }, renderFillSegEls: function (t, i) { var r, u = this, f = this[t + "SegEl"], e = "", o = []; if (i.length) { for (r = 0; r < i.length; r++) e += this.fillSegHtml(t, i[r]); n(e).each(function (t, r) { var s = i[t], e = n(r); f && (e = f.call(u, s, e)); e && (e = n(e), e.is(u.fillSegTag) && (s.el = e, o.push(s))) }) } return o }, fillSegTag: "div", fillSegHtml: function (n, t) { var i = this[n + "SegClasses"], r = this[n + "SegCss"], u = i ? i.call(this, t) : [], f = lt(r ? r.call(this, t) : {}); return "<" + this.fillSegTag + (u.length ? ' class="' + u.join(" ") + '"' : "") + (f ? ' style="' + f + '"' : "") + " />" }, getDayClasses: function (n, t) { var r = this.view, u = r.calendar.getNow(), i = ["fc-" + hi[n.day()]]; return 1 == r.intervalDuration.as("months") && n.month() != r.intervalStart.month() && i.push("fc-other-month"), n.isSame(u, "day") ? (i.push("fc-today"), t !== !0 && i.push(r.highlightStateClass)) : n < u ? i.push("fc-past") : i.push("fc-future"), i } }); a.mixin({ segSelector: ".fc-event-container > *", mousedOverSeg: null, isDraggingSeg: !1, isResizingSeg: !1, isDraggingExternal: !1, segs: null, renderEvents: function (n) { for (var i = [], r = [], t = 0; t < n.length; t++) (dr(n[t]) ? i : r).push(n[t]); this.segs = [].concat(this.renderBgEvents(i), this.renderFgEvents(r)) }, renderBgEvents: function (n) { var t = this.eventsToSegs(n); return this.renderBgSegs(t) || t }, renderFgEvents: function (n) { var t = this.eventsToSegs(n); return this.renderFgSegs(t) || t }, unrenderEvents: function () { this.handleSegMouseout(); this.clearDragListeners(); this.unrenderFgSegs(); this.unrenderBgSegs(); this.segs = null }, getEventSegs: function () { return this.segs || [] }, renderFgSegs: function () { }, unrenderFgSegs: function () { }, renderFgSegEls: function (t, i) { var r, e = this.view, u = "", f = []; if (t.length) { for (r = 0; r < t.length; r++) u += this.fgSegHtml(t[r], i); n(u).each(function (i, r) { var u = t[i], o = e.resolveEventEl(u.event, n(r)); o && (o.data("fc-seg", u), u.el = o, f.push(u)) }) } return f }, fgSegHtml: function () { }, renderBgSegs: function (n) { return this.renderFill("bgEvent", n) }, unrenderBgSegs: function () { this.unrenderFill("bgEvent") }, bgEventSegEl: function (n, t) { return this.view.resolveEventEl(n.event, t) }, bgEventSegClasses: function (n) { var t = n.event, i = t.source || {}; return ["fc-bgevent"].concat(t.className, i.className || []) }, bgEventSegCss: function (n) { return { "background-color": this.getSegSkinCss(n)["background-color"] } }, businessHoursSegClasses: function () { return ["fc-nonbusiness", "fc-bgevent"] }, buildBusinessHourSegs: function (n, t) { return this.eventsToSegs(this.buildBusinessHourEvents(n, t)) }, buildBusinessHourEvents: function (t, i) { var r, u = this.view.calendar; return null == i && (i = u.options.businessHours), r = u.computeBusinessHourEvents(t, i), !r.length && i && (r = [n.extend({}, yi, { start: this.view.end, end: this.view.end, dow: null })]), r }, bindSegHandlers: function () { this.bindSegHandlersToEl(this.el) }, bindSegHandlersToEl: function (n) { this.bindSegHandlerToEl(n, "touchstart", this.handleSegTouchStart); this.bindSegHandlerToEl(n, "mouseenter", this.handleSegMouseover); this.bindSegHandlerToEl(n, "mouseleave", this.handleSegMouseout); this.bindSegHandlerToEl(n, "mousedown", this.handleSegMousedown); this.bindSegHandlerToEl(n, "click", this.handleSegClick) }, bindSegHandlerToEl: function (t, i, r) { var u = this; t.on(i, this.segSelector, function (t) { var i = n(this).data("fc-seg"); if (i && !u.isDraggingSeg && !u.isResizingSeg) return r.call(u, i, t) }) }, handleSegClick: function (n, t) { var i = this.view.publiclyTrigger("eventClick", n.el[0], n.event, t); i === !1 && t.preventDefault() }, handleSegMouseover: function (n, t) { o.get().shouldIgnoreMouse() || this.mousedOverSeg || (this.mousedOverSeg = n, this.view.isEventResizable(n.event) && n.el.addClass("fc-allow-mouse-resize"), this.view.publiclyTrigger("eventMouseover", n.el[0], n.event, t)) }, handleSegMouseout: function (n, t) { t = t || {}; this.mousedOverSeg && (n = n || this.mousedOverSeg, this.mousedOverSeg = null, this.view.isEventResizable(n.event) && n.el.removeClass("fc-allow-mouse-resize"), this.view.publiclyTrigger("eventMouseout", n.el[0], n.event, t)) }, handleSegMousedown: function (n, t) { var i = this.startSegResize(n, t, { distance: 5 }); !i && this.view.isEventDraggable(n.event) && this.buildSegDragListener(n).startInteraction(t, { distance: 5 }) }, handleSegTouchStart: function (n, t) { var f, r, i = this.view, u = n.event, e = i.isEventSelected(u), o = i.isEventDraggable(u), s = i.isEventResizable(u), h = !1; e && s && (h = this.startSegResize(n, t)); !h && (o || s) && (r = i.opt("eventLongPressDelay"), null == r && (r = i.opt("longPressDelay")), f = o ? this.buildSegDragListener(n) : this.buildSegSelectListener(n), f.startInteraction(t, { delay: e ? 0 : r })) }, startSegResize: function (t, i, r) { return !!n(i.target).is(".fc-resizer") && (this.buildSegResizeListener(t, n(i.target).is(".fc-start-resizer")).startInteraction(i, r), !0) }, buildSegDragListener: function (n) { var o, u, i, r = this, t = this.view, h = t.calendar, s = n.el, f = n.event, e; return this.segDragListener ? this.segDragListener : e = this.segDragListener = new tt(t, { scroll: t.opt("dragScroll"), subjectEl: s, subjectCenter: !0, interactionStart: function (i) { n.component = r; o = !1; u = new su(n.el, { additionalClass: "fc-dragging", parentEl: t.el, opacity: e.isTouch ? null : t.opt("dragOpacity"), revertDuration: t.opt("dragRevertDuration"), zIndex: 2 }); u.hide(); u.start(i) }, dragStart: function (i) { e.isTouch && !t.isEventSelected(f) && t.selectEvent(f); o = !0; r.handleSegMouseout(n, i); r.segDragStart(n, i); t.hideEvent(f) }, hitOver: function (o, s, c) { var l; n.hit && (c = n.hit); i = r.computeEventDrop(c.component.getHitSpan(c), o.component.getHitSpan(o), f); i && !h.isEventSpanAllowed(r.eventToSpan(i), f) && (ot(), i = null); i && (l = t.renderDrag(i, n)) ? (l.addClass("fc-dragging"), e.isTouch || r.applyDragOpacity(l), u.hide()) : u.show(); s && (i = null) }, hitOut: function () { t.unrenderDrag(); u.show(); i = null }, hitDone: function () { st() }, interactionEnd: function (e) { delete n.component; u.stop(!i, function () { o && (t.unrenderDrag(), r.segDragStop(n, e)); i ? t.reportSegDrop(n, i, r.largeUnit, s, e) : t.showEvent(f) }); r.segDragListener = null } }) }, buildSegSelectListener: function (n) { var u = this, t = this.view, i = n.event, r; return this.segDragListener ? this.segDragListener : r = this.segDragListener = new l({ dragStart: function () { r.isTouch && !t.isEventSelected(i) && t.selectEvent(i) }, interactionEnd: function () { u.segDragListener = null } }) }, segDragStart: function (n, t) { this.isDraggingSeg = !0; this.view.publiclyTrigger("eventDragStart", n.el[0], n.event, t, {}) }, segDragStop: function (n, t) { this.isDraggingSeg = !1; this.view.publiclyTrigger("eventDragStop", n.el[0], n.event, t, {}) }, computeEventDrop: function (n, t, i) { var u, r, e = this.view.calendar, o = n.start, f = t.start; return o.hasTime() === f.hasTime() ? (u = this.diffDates(f, o), i.allDay && d(u) ? (r = { start: i.start.clone(), end: e.getEventEnd(i), allDay: !1 }, e.normalizeEventTimes(r)) : r = kr(i), r.start.add(u), r.end && r.end.add(u)) : r = { start: f.clone(), end: null, allDay: !f.hasTime() }, r }, applyDragOpacity: function (n) { var t = this.view.opt("dragOpacity"); null != t && n.css("opacity", t) }, externalDragStart: function (t, i) { var r, u, f = this.view; f.opt("droppable") && (r = n((i ? i.item : null) || t.target), u = f.opt("dropAccept"), (n.isFunction(u) ? u.call(r[0], r) : r.is(u)) && (this.isDraggingExternal || this.listenToExternalDrag(r, t, i))) }, listenToExternalDrag: function (n, t, i) { var r, u = this, e = this.view.calendar, f = vf(n), o = u.externalDragListener = new tt(this, { interactionStart: function () { u.isDraggingExternal = !0 }, hitOver: function (n) { r = u.computeExternalDrop(n.component.getHitSpan(n), f); r && !e.isExternalSpanAllowed(u.eventToSpan(r), r, f.eventProps) && (ot(), r = null); r && u.renderDrag(r) }, hitOut: function () { r = null }, hitDone: function () { st(); u.unrenderDrag() }, interactionEnd: function (t) { r && u.view.reportExternalDrop(f, r, n, t, i); u.isDraggingExternal = !1; u.externalDragListener = null } }); o.startDrag(t) }, computeExternalDrop: function (n, t) { var r = this.view.calendar, i = { start: r.applyTimezone(n.start), end: null }; return t.startTime && !i.start.hasTime() && i.start.time(t.startTime), t.duration && (i.end = i.start.clone().add(t.duration)), i }, renderDrag: function () { }, unrenderDrag: function () { }, buildSegResizeListener: function (n, t) { var e, i, r = this, f = this.view, o = f.calendar, s = n.el, u = n.event, h = o.getEventEnd(u); return this.segResizeListener = new tt(this, { scroll: f.opt("dragScroll"), subjectEl: s, interactionStart: function () { e = !1 }, dragStart: function (t) { e = !0; r.handleSegMouseout(n, t); r.segResizeStart(n, t) }, hitOver: function (e, s, c) { var l = r.getHitSpan(c), a = r.getHitSpan(e); i = t ? r.computeEventStartResize(l, a, u) : r.computeEventEndResize(l, a, u); i && (o.isEventSpanAllowed(r.eventToSpan(i), u) ? i.start.isSame(u.start.clone().stripZone()) && i.end.isSame(h.clone().stripZone()) && (i = null) : (ot(), i = null)); i && (f.hideEvent(u), r.renderEventResize(i, n)) }, hitOut: function () { i = null; f.showEvent(u) }, hitDone: function () { r.unrenderEventResize(); st() }, interactionEnd: function (t) { e && r.segResizeStop(n, t); i ? f.reportSegResize(n, i, r.largeUnit, s, t) : f.showEvent(u); r.segResizeListener = null } }) }, segResizeStart: function (n, t) { this.isResizingSeg = !0; this.view.publiclyTrigger("eventResizeStart", n.el[0], n.event, t, {}) }, segResizeStop: function (n, t) { this.isResizingSeg = !1; this.view.publiclyTrigger("eventResizeStop", n.el[0], n.event, t, {}) }, computeEventStartResize: function (n, t, i) { return this.computeEventResize("start", n, t, i) }, computeEventEndResize: function (n, t, i) { return this.computeEventResize("end", n, t, i) }, computeEventResize: function (n, t, i, r) { var u, e, f = this.view.calendar, o = this.diffDates(i[n], t[n]); return u = { start: r.start.clone(), end: f.getEventEnd(r), allDay: r.allDay }, u.allDay && d(o) && (u.allDay = !1, f.normalizeEventTimes(u)), u[n].add(o), u.start.isBefore(u.end) || (e = this.minResizeDuration || (r.allDay ? f.defaultAllDayEventDuration : f.defaultTimedEventDuration), "start" == n ? u.start = u.end.clone().subtract(e) : u.end = u.start.clone().add(e)), u }, renderEventResize: function () { }, unrenderEventResize: function () { }, getEventTimeText: function (n, t, i) { return null == t && (t = this.eventTimeFormat), null == i && (i = this.displayEventEnd), this.displayEventTime && n.start.hasTime() ? i && n.end ? this.view.formatRange(n, t) : n.start.format(t) : "" }, getSegClasses: function (n, t, i) { var u = this.view, r = ["fc-event", n.isStart ? "fc-start" : "fc-not-start", n.isEnd ? "fc-end" : "fc-not-end"].concat(this.getSegCustomClasses(n)); return t && r.push("fc-draggable"), i && r.push("fc-resizable"), u.isEventSelected(n.event) && r.push("fc-selected"), r }, getSegCustomClasses: function (n) { var t = n.event; return [].concat(t.className, t.source ? t.source.className : []) }, getSegSkinCss: function (n) { return { "background-color": this.getSegBackgroundColor(n), "border-color": this.getSegBorderColor(n), color: this.getSegTextColor(n) } }, getSegBackgroundColor: function (n) { return n.event.backgroundColor || n.event.color || this.getSegDefaultBackgroundColor(n) }, getSegDefaultBackgroundColor: function (n) { var t = n.event.source || {}; return t.backgroundColor || t.color || this.view.opt("eventBackgroundColor") || this.view.opt("eventColor") }, getSegBorderColor: function (n) { return n.event.borderColor || n.event.color || this.getSegDefaultBorderColor(n) }, getSegDefaultBorderColor: function (n) { var t = n.event.source || {}; return t.borderColor || t.color || this.view.opt("eventBorderColor") || this.view.opt("eventColor") }, getSegTextColor: function (n) { return n.event.textColor || this.getSegDefaultTextColor(n) }, getSegDefaultTextColor: function (n) { var t = n.event.source || {}; return t.textColor || this.view.opt("eventTextColor") }, eventToSegs: function (n) { return this.eventsToSegs([n]) }, eventToSpan: function (n) { return this.eventToSpans(n)[0] }, eventToSpans: function (n) { var t = this.eventToRange(n); return this.eventRangeToSpans(t, n) }, eventsToSegs: function (t, i) { var u = this, f = lf(t), r = []; return n.each(f, function (n, t) { for (var e = [], f = 0; f < t.length; f++) e.push(u.eventToRange(t[f])); if (cf(t[0])) for (e = u.invertRanges(e), f = 0; f < e.length; f++) r.push.apply(r, u.eventRangeToSegs(e[f], t[0], i)); else for (f = 0; f < e.length; f++) r.push.apply(r, u.eventRangeToSegs(e[f], t[f], i)) }), r }, eventToRange: function (n) { var t = this.view.calendar, i = n.start.clone().stripZone(), r = (n.end ? n.end.clone() : t.getDefaultEventEnd(null != n.allDay ? n.allDay : !n.start.hasTime(), n.start)).stripZone(); return t.localizeMoment(i), t.localizeMoment(r), { start: i, end: r } }, eventRangeToSegs: function (n, t, i) { for (var f = this.eventRangeToSpans(n, t), u = [], r = 0; r < f.length; r++) u.push.apply(u, this.eventSpanToSegs(f[r], t, i)); return u }, eventRangeToSpans: function (t) { return [n.extend({}, t)] }, eventSpanToSegs: function (n, t, i) { for (var u, f = i ? i(n) : this.spanToSegs(n), r = 0; r < f.length; r++) u = f[r], u.event = t, u.eventStartMS = +n.start, u.eventDurationMS = n.end - n.start; return f }, invertRanges: function (n) { var i, r, f = this.view, o = f.start.clone(), e = f.end.clone(), u = [], t = o; for (n.sort(af), i = 0; i < n.length; i++) r = n[i], r.start > t && u.push({ start: t, end: r.start }), t = r.end; return t < e && u.push({ start: t, end: e }), u }, sortEventSegs: function (n) { n.sort(ft(this, "compareEventSegs")) }, compareEventSegs: function (n, t) { return n.eventStartMS - t.eventStartMS || t.eventDurationMS - n.eventDurationMS || t.event.allDay - n.event.allDay || or(n.event, t.event, this.view.eventOrderSpecs) } }); i.pluckEventDateProps = kr; i.isBgEvent = dr; i.dataAttrPrefix = ""; ai = i.DayTableMixin = { breakOnWeeks: !1, dayDates: null, dayIndices: null, daysPerRow: null, rowCnt: null, colCnt: null, colHeadFormat: null, updateDayTable: function () { for (var n, e, r, o = this.view, i = this.start.clone(), u = -1, f = [], t = []; i.isBefore(this.end) ;) o.isHiddenDay(i) ? f.push(u + .5) : (u++, f.push(u), t.push(i.clone())), i.add(1, "days"); if (this.breakOnWeeks) { for (e = t[0].day(), n = 1; n < t.length && t[n].day() != e; n++); r = Math.ceil(t.length / n) } else r = 1, n = t.length; this.dayDates = t; this.dayIndices = f; this.daysPerRow = n; this.rowCnt = r; this.updateDayTableCols() }, updateDayTableCols: function () { this.colCnt = this.computeColCnt(); this.colHeadFormat = this.view.opt("columnFormat") || this.computeColHeadFormat() }, computeColCnt: function () { return this.daysPerRow }, getCellDate: function (n, t) { return this.dayDates[this.getCellDayIndex(n, t)].clone() }, getCellRange: function (n, t) { var i = this.getCellDate(n, t), r = i.clone().add(1, "days"); return { start: i, end: r } }, getCellDayIndex: function (n, t) { return n * this.daysPerRow + this.getColDayIndex(t) }, getColDayIndex: function (n) { return this.isRTL ? this.colCnt - 1 - n : n }, getDateDayIndex: function (n) { var t = this.dayIndices, i = n.diff(this.start, "days"); return i < 0 ? t[0] - 1 : i >= t.length ? t[t.length - 1] + 1 : t[i] }, computeColHeadFormat: function () { return this.rowCnt > 1 || this.colCnt > 10 ? "ddd" : this.colCnt > 1 ? this.view.opt("dayOfMonthFormat") : "dddd" }, sliceRangeByRow: function (n) { for (var u, f, t, i, e = this.daysPerRow, o = this.view.computeDayRange(n), s = this.getDateDayIndex(o.start), h = this.getDateDayIndex(o.end.clone().subtract(1, "days")), c = [], r = 0; r < this.rowCnt; r++) u = r * e, f = u + e - 1, t = Math.max(s, u), i = Math.min(h, f), t = Math.ceil(t), i = Math.floor(i), t <= i && c.push({ row: r, firstRowDayIndex: t - u, lastRowDayIndex: i - u, isStart: t === s, isEnd: i === h }); return c }, sliceRangeByDay: function (n) { for (var u, e, f, t, i, o = this.daysPerRow, s = this.view.computeDayRange(n), h = this.getDateDayIndex(s.start), c = this.getDateDayIndex(s.end.clone().subtract(1, "days")), l = [], r = 0; r < this.rowCnt; r++) for (u = r * o, e = u + o - 1, f = u; f <= e; f++) t = Math.max(h, f), i = Math.min(c, f), t = Math.ceil(t), i = Math.floor(i), t <= i && l.push({ row: r, firstRowDayIndex: t - u, lastRowDayIndex: i - u, isStart: t === h, isEnd: i === c }); return l }, renderHeadHtml: function () { var n = this.view; return '<div class="fc-row ' + n.widgetHeaderClass + '"><table><thead>' + this.renderHeadTrHtml() + "<\/thead><\/table><\/div>" }, renderHeadIntroHtml: function () { return this.renderIntroHtml() }, renderHeadTrHtml: function () { return "<tr>" + (this.isRTL ? "" : this.renderHeadIntroHtml()) + this.renderHeadDateCellsHtml() + (this.isRTL ? this.renderHeadIntroHtml() : "") + "<\/tr>" }, renderHeadDateCellsHtml: function () { for (var t, i = [], n = 0; n < this.colCnt; n++) t = this.getCellDate(0, n), i.push(this.renderHeadDateCellHtml(t)); return i.join("") }, renderHeadDateCellHtml: function (n, t, i) { var f = this.view, r = ["fc-day-header", f.widgetHeaderClass]; return 1 === this.rowCnt ? r = r.concat(this.getDayClasses(n, !0)) : r.push("fc-" + hi[n.day()]), '<th class="' + r.join(" ") + '"' + (1 === this.rowCnt ? ' data-date="' + n.format("YYYY-MM-DD") + '"' : "") + (t > 1 ? ' colspan="' + t + '"' : "") + (i ? " " + i : "") + ">" + f.buildGotoAnchorHtml({ date: n, forceOff: this.rowCnt > 1 || 1 === this.colCnt }, u(n.format(this.colHeadFormat))) + "<\/th>" }, renderBgTrHtml: function (n) { return "<tr>" + (this.isRTL ? "" : this.renderBgIntroHtml(n)) + this.renderBgCellsHtml(n) + (this.isRTL ? this.renderBgIntroHtml(n) : "") + "<\/tr>" }, renderBgIntroHtml: function () { return this.renderIntroHtml() }, renderBgCellsHtml: function (n) { for (var i, r = [], t = 0; t < this.colCnt; t++) i = this.getCellDate(n, t), r.push(this.renderBgCellHtml(i)); return r.join("") }, renderBgCellHtml: function (n, t) { var r = this.view, i = this.getDayClasses(n); return i.unshift("fc-day", r.widgetContentClass), '<td class="' + i.join(" ") + '" data-date="' + n.format("YYYY-MM-DD") + '"' + (t ? " " + t : "") + "><\/td>" }, renderIntroHtml: function () { }, bookendCells: function (n) { var t = this.renderIntroHtml(); t && (this.isRTL ? n.append(t) : n.prepend(t)) } }; et = i.DayGrid = a.extend(ai, { numbersVisible: !1, bottomCoordPadding: 0, rowEls: null, cellEls: null, helperEls: null, rowCoordCache: null, colCoordCache: null, renderDates: function (n) { for (var i, f = this.view, r = this.rowCnt, e = this.colCnt, u = "", t = 0; t < r; t++) u += this.renderDayRowHtml(t, n); for (this.el.html(u), this.rowEls = this.el.find(".fc-row"), this.cellEls = this.el.find(".fc-day"), this.rowCoordCache = new bt({ els: this.rowEls, isVertical: !0 }), this.colCoordCache = new bt({ els: this.cellEls.slice(0, this.colCnt), isHorizontal: !0 }), t = 0; t < r; t++) for (i = 0; i < e; i++) f.publiclyTrigger("dayRender", null, this.getCellDate(t, i), this.getCellEl(t, i)) }, unrenderDates: function () { this.removeSegPopover() }, renderBusinessHours: function () { var n = this.buildBusinessHourSegs(!0); this.renderFill("businessHours", n, "bgevent") }, unrenderBusinessHours: function () { this.unrenderFill("businessHours") }, renderDayRowHtml: function (n, t) { var r = this.view, i = ["fc-row", "fc-week", r.widgetContentClass]; return t && i.push("fc-rigid"), '<div class="' + i.join(" ") + '"><div class="fc-bg"><table>' + this.renderBgTrHtml(n) + '<\/table><\/div><div class="fc-content-skeleton"><table>' + (this.numbersVisible ? "<thead>" + this.renderNumberTrHtml(n) + "<\/thead>" : "") + "<\/table><\/div><\/div>" }, renderNumberTrHtml: function (n) { return "<tr>" + (this.isRTL ? "" : this.renderNumberIntroHtml(n)) + this.renderNumberCellsHtml(n) + (this.isRTL ? this.renderNumberIntroHtml(n) : "") + "<\/tr>" }, renderNumberIntroHtml: function () { return this.renderIntroHtml() }, renderNumberCellsHtml: function (n) { for (var i, r = [], t = 0; t < this.colCnt; t++) i = this.getCellDate(n, t), r.push(this.renderNumberCellHtml(i)); return r.join("") }, renderNumberCellHtml: function (n) { var i, r, t = ""; return this.view.dayNumbersVisible || this.view.cellWeekNumbersVisible ? (i = this.getDayClasses(n), i.unshift("fc-day-top"), this.view.cellWeekNumbersVisible && (r = "ISO" === n._locale._fullCalendar_weekCalc ? 1 : n._locale.firstDayOfWeek()), t += '<td class="' + i.join(" ") + '" data-date="' + n.format() + '">', this.view.cellWeekNumbersVisible && n.day() == r && (t += this.view.buildGotoAnchorHtml({ date: n, type: "week" }, { "class": "fc-week-number" }, n.format("w"))), this.view.dayNumbersVisible && (t += this.view.buildGotoAnchorHtml(n, { "class": "fc-day-number" }, n.date())), t += "<\/td>") : "<td/>" }, computeEventTimeFormat: function () { return this.view.opt("extraSmallTimeFormat") }, computeDisplayEventEnd: function () { return 1 == this.colCnt }, rangeUpdated: function () { this.updateDayTable() }, spanToSegs: function (n) { for (var t, r = this.sliceRangeByRow(n), i = 0; i < r.length; i++) t = r[i], this.isRTL ? (t.leftCol = this.daysPerRow - 1 - t.lastRowDayIndex, t.rightCol = this.daysPerRow - 1 - t.firstRowDayIndex) : (t.leftCol = t.firstRowDayIndex, t.rightCol = t.lastRowDayIndex); return r }, prepareHits: function () { this.colCoordCache.build(); this.rowCoordCache.build(); this.rowCoordCache.bottoms[this.rowCnt - 1] += this.bottomCoordPadding }, releaseHits: function () { this.colCoordCache.clear(); this.rowCoordCache.clear() }, queryHit: function (n, t) { if (this.colCoordCache.isLeftInBounds(n) && this.rowCoordCache.isTopInBounds(t)) { var i = this.colCoordCache.getHorizontalIndex(n), r = this.rowCoordCache.getVerticalIndex(t); if (null != r && null != i) return this.getCellHit(r, i) } }, getHitSpan: function (n) { return this.getCellRange(n.row, n.col) }, getHitEl: function (n) { return this.getCellEl(n.row, n.col) }, getCellHit: function (n, t) { return { row: n, col: t, component: this, left: this.colCoordCache.getLeftOffset(t), right: this.colCoordCache.getRightOffset(t), top: this.rowCoordCache.getTopOffset(n), bottom: this.rowCoordCache.getBottomOffset(n) } }, getCellEl: function (n, t) { return this.cellEls.eq(n * this.colCnt + t) }, renderDrag: function (n, t) { if (this.renderHighlight(this.eventToSpan(n)), t && t.component !== this) return this.renderEventLocationHelper(n, t) }, unrenderDrag: function () { this.unrenderHighlight(); this.unrenderHelper() }, renderEventResize: function (n, t) { return this.renderHighlight(this.eventToSpan(n)), this.renderEventLocationHelper(n, t) }, unrenderEventResize: function () { this.unrenderHighlight(); this.unrenderHelper() }, renderHelper: function (t, i) { var u, f = [], r = this.eventToSegs(t); return r = this.renderFgSegEls(r), u = this.renderSegRows(r), this.rowEls.each(function (t, r) { var o, s = n(r), e = n('<div class="fc-helper-skeleton"><table/><\/div>'); o = i && i.row === t ? i.el.position().top : s.find(".fc-content-skeleton tbody").position().top; e.css("top", o).find("table").append(u[t].tbodyEl); s.append(e); f.push(e[0]) }), this.helperEls = n(f) }, unrenderHelper: function () { this.helperEls && (this.helperEls.remove(), this.helperEls = null) }, fillSegTag: "td", renderFill: function (t, i, r) { var u, f, e, o = []; for (i = this.renderFillSegEls(t, i), u = 0; u < i.length; u++) f = i[u], e = this.renderFillRow(t, f, r), this.rowEls.eq(f.row).append(e), o.push(e[0]); return this.elsByFill[t] = n(o), i }, renderFillRow: function (t, i, r) { var f, u, s = this.colCnt, e = i.leftCol, o = i.rightCol + 1; return r = r || t.toLowerCase(), f = n('<div class="fc-' + r + '-skeleton"><table><tr/><\/table><\/div>'), u = f.find("tr"), e > 0 && u.append('<td colspan="' + e + '"/>'), u.append(i.el.attr("colspan", o - e)), o < s && u.append('<td colspan="' + (s - o) + '"/>'), this.bookendCells(u), f } }); et.mixin({ rowStructs: null, unrenderEvents: function () { this.removeSegPopover(); a.prototype.unrenderEvents.apply(this, arguments) }, getEventSegs: function () { return a.prototype.getEventSegs.call(this).concat(this.popoverSegs || []) }, renderBgSegs: function (t) { var i = n.grep(t, function (n) { return n.event.allDay }); return a.prototype.renderBgSegs.call(this, i) }, renderFgSegs: function (t) { var i; return t = this.renderFgSegEls(t), i = this.rowStructs = this.renderSegRows(t), this.rowEls.each(function (t, r) { n(r).find(".fc-content-skeleton > table").append(i[t].tbodyEl) }), t }, unrenderFgSegs: function () { for (var n, t = this.rowStructs || []; n = t.pop() ;) n.tbodyEl.remove(); this.rowStructs = null }, renderSegRows: function (n) { for (var r = [], i = this.groupSegRows(n), t = 0; t < i.length; t++) r.push(this.renderSegRow(t, i[t])); return r }, fgSegHtml: function (n, t) { var r, f, e = this.view, i = n.event, a = e.isEventDraggable(i), s = !t && i.allDay && n.isStart && e.isEventResizableFromStart(i), h = !t && i.allDay && n.isEnd && e.isEventResizableFromEnd(i), c = this.getSegClasses(n, a, s || h), l = lt(this.getSegSkinCss(n)), o = ""; return c.unshift("fc-day-grid-event", "fc-h-event"), n.isStart && (r = this.getEventTimeText(i), r && (o = '<span class="fc-time">' + u(r) + "<\/span>")), f = '<span class="fc-title">' + (u(i.title || "") || "&nbsp;") + "<\/span>", '<a class="' + c.join(" ") + '"' + (i.url ? ' href="' + u(i.url) + '"' : "") + (l ? ' style="' + l + '"' : "") + '><div class="fc-content">' + (this.isRTL ? f + " " + o : o + " " + f) + "<\/div>" + (s ? '<div class="fc-resizer fc-start-resizer" />' : "") + (h ? '<div class="fc-resizer fc-end-resizer" />' : "") + "<\/a>" }, renderSegRow: function (t, i) { function y(t) { for (; u < t;) r = (l[f - 1] || [])[u], r ? r.attr("rowspan", parseInt(r.attr("rowspan") || 1, 10) + 1) : (r = n("<td/>"), o.append(r)), c[f][u] = r, l[f][u] = r, u++ } for (var s, u, o, h, e, r, w = this.colCnt, a = this.buildSegLevels(i), b = Math.max(1, a.length), p = n("<tbody/>"), v = [], c = [], l = [], f = 0; f < b; f++) { if (s = a[f], u = 0, o = n("<tr/>"), v.push([]), c.push([]), l.push([]), s) for (h = 0; h < s.length; h++) { for (e = s[h], y(e.leftCol), r = n('<td class="fc-event-container"/>').append(e.el), e.leftCol != e.rightCol ? r.attr("colspan", e.rightCol - e.leftCol + 1) : l[f][u] = r; u <= e.rightCol;) c[f][u] = r, v[f][u] = e, u++; o.append(r) } y(w); this.bookendCells(o); p.append(o) } return { row: t, tbodyEl: p, cellMatrix: c, segMatrix: v, segLevels: a, segs: i } }, buildSegLevels: function (n) { var r, u, t, i = []; for (this.sortEventSegs(n), r = 0; r < n.length; r++) { for (u = n[r], t = 0; t < i.length && yf(u, i[t]) ; t++); u.level = t; (i[t] || (i[t] = [])).push(u) } for (t = 0; t < i.length; t++) i[t].sort(pf); return i }, groupSegRows: function (n) { for (var i = [], t = 0; t < this.rowCnt; t++) i.push([]); for (t = 0; t < n.length; t++) i[n[t].row].push(n[t]); return i } }); et.mixin({ segPopover: null, popoverSegs: null, removeSegPopover: function () { this.segPopover && this.segPopover.hide() }, limitRows: function (n) { for (var i, r = this.rowStructs || [], t = 0; t < r.length; t++) this.unlimitRow(t), i = !!n && ("number" == typeof n ? n : this.computeRowLevelLimit(t)), i !== !1 && this.limitRow(t, i) }, computeRowLevelLimit: function (t) { function e(t, i) { r = Math.max(r, n(i).outerHeight()) } for (var u, r, o = this.rowEls.eq(t), s = o.height(), f = this.rowStructs[t].tbodyEl.children(), i = 0; i < f.length; i++) if (u = f.eq(i).removeClass("fc-limited"), r = 0, u.find("> td > :first-child").each(e), u.position().top + r > s) return i; return !1 }, limitRow: function (t, i) { function g(f) { for (; u < f;) r = tt.getCellSegs(t, u, i), r.length && (e = p[i - 1][u], v = tt.renderMoreLink(t, u, r), h = n("<div/>").append(v), e.append(h), d.push(h[0])), u++ } var y, p, w, c, f, r, b, l, e, nt, k, s, a, h, v, tt = this, o = this.rowStructs[t], d = [], u = 0; if (i && i < o.segLevels.length) { for (y = o.segLevels[i - 1], p = o.cellMatrix, w = o.tbodyEl.children().slice(i).addClass("fc-limited").get(), c = 0; c < y.length; c++) { for (f = y[c], g(f.leftCol), l = [], b = 0; u <= f.rightCol;) r = this.getCellSegs(t, u, i), l.push(r), b += r.length, u++; if (b) { for (e = p[i - 1][f.leftCol], nt = e.attr("rowspan") || 1, k = [], s = 0; s < l.length; s++) a = n('<td class="fc-more-cell"/>').attr("rowspan", nt), r = l[s], v = this.renderMoreLink(t, f.leftCol + s, [f].concat(r)), h = n("<div/>").append(v), a.append(h), k.push(a[0]), d.push(a[0]); e.addClass("fc-limited").after(n(k)); w.push(e[0]) } } g(this.colCnt); o.moreEls = n(d); o.limitedEls = n(w) } }, unlimitRow: function (n) { var t = this.rowStructs[n]; t.moreEls && (t.moreEls.remove(), t.moreEls = null); t.limitedEls && (t.limitedEls.removeClass("fc-limited"), t.limitedEls = null) }, renderMoreLink: function (t, i, r) { var u = this, f = this.view; return n('<a class="fc-more"/>').text(this.getMoreLinkText(r.length)).on("click", function (e) { var o = f.opt("eventLimitClick"), s = u.getCellDate(t, i), h = n(this), l = u.getCellEl(t, i), a = u.getCellSegs(t, i), c = u.resliceDaySegs(a, s), v = u.resliceDaySegs(r, s); "function" == typeof o && (o = f.publiclyTrigger("eventLimitClick", null, { date: s, dayEl: l, moreEl: h, segs: c, hiddenSegs: v }, e)); "popover" === o ? u.showSegPopover(t, i, h, c) : "string" == typeof o && f.calendar.zoomTo(s, o) }) }, showSegPopover: function (n, t, i, r) { var s, f, u = this, e = this.view, o = i.parent(); s = 1 == this.rowCnt ? e.el : this.rowEls.eq(n); f = { className: "fc-more-popover", content: this.renderSegPopoverContent(n, t, r), parentEl: this.view.el, top: s.offset().top, autoHide: !0, viewportConstrain: e.opt("popoverViewportConstrain"), hide: function () { if (u.popoverSegs) for (var n, t = 0; t < u.popoverSegs.length; ++t) n = u.popoverSegs[t], e.publiclyTrigger("eventDestroy", n.event, n.event, n.el); u.segPopover.removeElement(); u.segPopover = null; u.popoverSegs = null } }; this.isRTL ? f.right = o.offset().left + o.outerWidth() + 1 : f.left = o.offset().left - 1; this.segPopover = new ue(f); this.segPopover.show(); this.bindSegHandlersToEl(this.segPopover.el) }, renderSegPopoverContent: function (t, i, r) { var f, e = this.view, s = e.opt("theme"), h = this.getCellDate(t, i).format(e.opt("dayPopoverFormat")), o = n('<div class="fc-header ' + e.widgetHeaderClass + '"><span class="fc-close ' + (s ? "ui-icon ui-icon-closethick" : "fc-icon fc-icon-x") + '"><\/span><span class="fc-title">' + u(h) + '<\/span><div class="fc-clear"/><\/div><div class="fc-body ' + e.widgetContentClass + '"><div class="fc-event-container"><\/div><\/div>'), c = o.find(".fc-event-container"); for (r = this.renderFgSegEls(r, !0), this.popoverSegs = r, f = 0; f < r.length; f++) this.hitsNeeded(), r[f].hit = this.getCellHit(t, i), this.hitsNotNeeded(), c.append(r[f].el); return o }, resliceDaySegs: function (t, i) { var u = n.map(t, function (n) { return n.event }), r = i.clone(), f = r.clone().add(1, "days"), e = { start: r, end: f }; return t = this.eventsToSegs(u, function (n) { var t = ht(n, e); return t ? [t] : [] }), this.sortEventSegs(t), t }, getMoreLinkText: function (n) { var t = this.view.opt("eventLimitText"); return "function" == typeof t ? t(n) : "+" + n + " " + t }, getCellSegs: function (n, t, i) { for (var r, f = this.rowStructs[n].segMatrix, u = i || 0, e = []; u < f.length;) r = f[u][t], r && e.push(r), u++; return e } }); vi = i.TimeGrid = a.extend(ai, { slotDuration: null, snapDuration: null, snapsPerSlot: null, minTime: null, maxTime: null, labelFormat: null, labelInterval: null, colEls: null, slatContainerEl: null, slatEls: null, nowIndicatorEls: null, colCoordCache: null, slatCoordCache: null, constructor: function () { a.apply(this, arguments); this.processOptions() }, renderDates: function () { this.el.html(this.renderHtml()); this.colEls = this.el.find(".fc-day"); this.slatContainerEl = this.el.find(".fc-slats"); this.slatEls = this.slatContainerEl.find("tr"); this.colCoordCache = new bt({ els: this.colEls, isHorizontal: !0 }); this.slatCoordCache = new bt({ els: this.slatEls, isVertical: !0 }); this.renderContentSkeleton() }, renderHtml: function () { return '<div class="fc-bg"><table>' + this.renderBgTrHtml(0) + '<\/table><\/div><div class="fc-slats"><table>' + this.renderSlatRowHtml() + "<\/table><\/div>" }, renderSlatRowHtml: function () { for (var i, r, f, e = this.view, o = this.isRTL, s = "", n = t.duration(+this.minTime) ; n < this.maxTime;) i = this.start.clone().time(n), r = b(ri(n, this.labelInterval)), f = '<td class="fc-axis fc-time ' + e.widgetContentClass + '" ' + e.axisStyleAttr() + ">" + (r ? "<span>" + u(i.format(this.labelFormat)) + "<\/span>" : "") + "<\/td>", s += '<tr data-time="' + i.format("HH:mm:ss") + '"' + (r ? "" : ' class="fc-minor"') + ">" + (o ? "" : f) + '<td class="' + e.widgetContentClass + '"/>' + (o ? f : "") + "<\/tr>", n.add(this.slotDuration); return s }, processOptions: function () { var i, r = this.view, u = r.opt("slotDuration"), f = r.opt("snapDuration"); u = t.duration(u); f = f ? t.duration(f) : u; this.slotDuration = u; this.snapDuration = f; this.snapsPerSlot = u / f; this.minResizeDuration = f; this.minTime = t.duration(r.opt("minTime")); this.maxTime = t.duration(r.opt("maxTime")); i = r.opt("slotLabelFormat"); n.isArray(i) && (i = i[i.length - 1]); this.labelFormat = i || r.opt("smallTimeFormat"); i = r.opt("slotLabelInterval"); this.labelInterval = i ? t.duration(i) : this.computeLabelInterval(u) }, computeLabelInterval: function (n) { for (var r, u, i = lu.length - 1; i >= 0; i--) if (r = t.duration(lu[i]), u = ri(r, n), b(u) && u > 1) return r; return t.duration(n) }, computeEventTimeFormat: function () { return this.view.opt("noMeridiemTimeFormat") }, computeDisplayEventEnd: function () { return !0 }, prepareHits: function () { this.colCoordCache.build(); this.slatCoordCache.build() }, releaseHits: function () { this.colCoordCache.clear() }, queryHit: function (n, t) { var u = this.snapsPerSlot, f = this.colCoordCache, e = this.slatCoordCache, i, r; if (f.isLeftInBounds(n) && e.isTopInBounds(t) && (i = f.getHorizontalIndex(n), r = e.getVerticalIndex(t), null != i && null != r)) { var o = e.getTopOffset(r), s = e.getHeight(r), c = (t - o) / s, h = Math.floor(c * u), l = r * u + h, a = o + h / u * s, v = o + (h + 1) / u * s; return { col: i, snap: l, component: this, left: f.getLeftOffset(i), right: f.getRightOffset(i), top: a, bottom: v } } }, getHitSpan: function (n) { var i, t = this.getCellDate(0, n.col), r = this.computeSnapTime(n.snap); return t.time(r), i = t.clone().add(this.snapDuration), { start: t, end: i } }, getHitEl: function (n) { return this.colEls.eq(n.col) }, rangeUpdated: function () { this.updateDayTable() }, computeSnapTime: function (n) { return t.duration(this.minTime + this.snapDuration * n) }, spanToSegs: function (n) { for (var i = this.sliceRangeByTimes(n), t = 0; t < i.length; t++) i[t].col = this.isRTL ? this.daysPerRow - 1 - i[t].dayIndex : i[t].dayIndex; return i }, sliceRangeByTimes: function (n) { for (var i, r, u, f = [], t = 0; t < this.daysPerRow; t++) r = this.dayDates[t].clone(), u = { start: r.clone().time(this.minTime), end: r.clone().time(this.maxTime) }, i = ht(n, u), i && (i.dayIndex = t, f.push(i)); return f }, updateSize: function (n) { this.slatCoordCache.build(); n && this.updateSegVerticals([].concat(this.fgSegs || [], this.bgSegs || [], this.businessSegs || [])) }, getTotalSlatHeight: function () { return this.slatContainerEl.outerHeight() }, computeDateTop: function (n, i) { return this.computeTimeTop(t.duration(n - i.clone().stripTime())) }, computeTimeTop: function (n) { var t, r, u = this.slatEls.length, i = (n - this.minTime) / this.slotDuration; return i = Math.max(0, i), i = Math.min(u, i), t = Math.floor(i), t = Math.min(t, u - 1), r = i - t, this.slatCoordCache.getTopPosition(t) + this.slatCoordCache.getHeight(t) * r }, renderDrag: function (n, t) { return t ? this.renderEventLocationHelper(n, t) : void this.renderHighlight(this.eventToSpan(n)) }, unrenderDrag: function () { this.unrenderHelper(); this.unrenderHighlight() }, renderEventResize: function (n, t) { return this.renderEventLocationHelper(n, t) }, unrenderEventResize: function () { this.unrenderHelper() }, renderHelper: function (n, t) { return this.renderHelperSegs(this.eventToSegs(n), t) }, unrenderHelper: function () { this.unrenderHelperSegs() }, renderBusinessHours: function () { this.renderBusinessSegs(this.buildBusinessHourSegs()) }, unrenderBusinessHours: function () { this.unrenderBusinessSegs() }, getNowIndicatorUnit: function () { return "minute" }, renderNowIndicator: function (t) { for (var r = this.spanToSegs({ start: t, end: t }), f = this.computeDateTop(t, t), u = [], i = 0; i < r.length; i++) u.push(n('<div class="fc-now-indicator fc-now-indicator-line"><\/div>').css("top", f).appendTo(this.colContainerEls.eq(r[i].col))[0]); r.length > 0 && u.push(n('<div class="fc-now-indicator fc-now-indicator-arrow"><\/div>').css("top", f).appendTo(this.el.find(".fc-content-skeleton"))[0]); this.nowIndicatorEls = n(u) }, unrenderNowIndicator: function () { this.nowIndicatorEls && (this.nowIndicatorEls.remove(), this.nowIndicatorEls = null) }, renderSelection: function (n) { this.view.opt("selectHelper") ? this.renderEventLocationHelper(n) : this.renderHighlight(n) }, unrenderSelection: function () { this.unrenderHelper(); this.unrenderHighlight() }, renderHighlight: function (n) { this.renderHighlightSegs(this.spanToSegs(n)) }, unrenderHighlight: function () { this.unrenderHighlightSegs() } }); vi.mixin({ colContainerEls: null, fgContainerEls: null, bgContainerEls: null, helperContainerEls: null, highlightContainerEls: null, businessContainerEls: null, fgSegs: null, bgSegs: null, helperSegs: null, highlightSegs: null, businessSegs: null, renderContentSkeleton: function () { for (var t, r = "", i = 0; i < this.colCnt; i++) r += '<td><div class="fc-content-col"><div class="fc-event-container fc-helper-container"><\/div><div class="fc-event-container"><\/div><div class="fc-highlight-container"><\/div><div class="fc-bgevent-container"><\/div><div class="fc-business-container"><\/div><\/div><\/td>'; t = n('<div class="fc-content-skeleton"><table><tr>' + r + "<\/tr><\/table><\/div>"); this.colContainerEls = t.find(".fc-content-col"); this.helperContainerEls = t.find(".fc-helper-container"); this.fgContainerEls = t.find(".fc-event-container:not(.fc-helper-container)"); this.bgContainerEls = t.find(".fc-bgevent-container"); this.highlightContainerEls = t.find(".fc-highlight-container"); this.businessContainerEls = t.find(".fc-business-container"); this.bookendCells(t.find("tr")); this.el.append(t) }, renderFgSegs: function (n) { return n = this.renderFgSegsIntoContainers(n, this.fgContainerEls), this.fgSegs = n, n }, unrenderFgSegs: function () { this.unrenderNamedSegs("fgSegs") }, renderHelperSegs: function (t, i) { var u, f, r, e = []; for (t = this.renderFgSegsIntoContainers(t, this.helperContainerEls), u = 0; u < t.length; u++) f = t[u], i && i.col === f.col && (r = i.el, f.el.css({ left: r.css("left"), right: r.css("right"), "margin-left": r.css("margin-left"), "margin-right": r.css("margin-right") })), e.push(f.el[0]); return this.helperSegs = t, n(e) }, unrenderHelperSegs: function () { this.unrenderNamedSegs("helperSegs") }, renderBgSegs: function (n) { return n = this.renderFillSegEls("bgEvent", n), this.updateSegVerticals(n), this.attachSegsByCol(this.groupSegsByCol(n), this.bgContainerEls), this.bgSegs = n, n }, unrenderBgSegs: function () { this.unrenderNamedSegs("bgSegs") }, renderHighlightSegs: function (n) { n = this.renderFillSegEls("highlight", n); this.updateSegVerticals(n); this.attachSegsByCol(this.groupSegsByCol(n), this.highlightContainerEls); this.highlightSegs = n }, unrenderHighlightSegs: function () { this.unrenderNamedSegs("highlightSegs") }, renderBusinessSegs: function (n) { n = this.renderFillSegEls("businessHours", n); this.updateSegVerticals(n); this.attachSegsByCol(this.groupSegsByCol(n), this.businessContainerEls); this.businessSegs = n }, unrenderBusinessSegs: function () { this.unrenderNamedSegs("businessSegs") }, groupSegsByCol: function (n) { for (var i = [], t = 0; t < this.colCnt; t++) i.push([]); for (t = 0; t < n.length; t++) i[n[t].col].push(n[t]); return i }, attachSegsByCol: function (n, t) { for (var u, r, i = 0; i < this.colCnt; i++) for (u = n[i], r = 0; r < u.length; r++) t.eq(i).append(u[r].el) }, unrenderNamedSegs: function (n) { var t, i = this[n]; if (i) { for (t = 0; t < i.length; t++) i[t].el.remove(); this[n] = null } }, renderFgSegsIntoContainers: function (n, t) { var r, i; for (n = this.renderFgSegEls(n), r = this.groupSegsByCol(n), i = 0; i < this.colCnt; i++) this.updateFgSegCoords(r[i]); return this.attachSegsByCol(r, t), n }, fgSegHtml: function (n, t) { var r, e, o, f = this.view, i = n.event, l = f.isEventDraggable(i), a = !t && n.isStart && f.isEventResizableFromStart(i), s = !t && n.isEnd && f.isEventResizableFromEnd(i), h = this.getSegClasses(n, l, a || s), c = lt(this.getSegSkinCss(n)); return h.unshift("fc-time-grid-event", "fc-v-event"), f.isMultiDayEvent(i) ? (n.isStart || n.isEnd) && (r = this.getEventTimeText(n), e = this.getEventTimeText(n, "LT"), o = this.getEventTimeText(n, null, !1)) : (r = this.getEventTimeText(i), e = this.getEventTimeText(i, "LT"), o = this.getEventTimeText(i, null, !1)), '<a class="' + h.join(" ") + '"' + (i.url ? ' href="' + u(i.url) + '"' : "") + (c ? ' style="' + c + '"' : "") + '><div class="fc-content">' + (r ? '<div class="fc-time" data-start="' + u(o) + '" data-full="' + u(e) + '"><span>' + u(r) + "<\/span><\/div>" : "") + (i.title ? '<div class="fc-title">' + u(i.title) + "<\/div>" : "") + '<\/div><div class="fc-bg"/>' + (s ? '<div class="fc-resizer fc-end-resizer" />' : "") + "<\/a>" }, updateSegVerticals: function (n) { this.computeSegVerticals(n); this.assignSegVerticals(n) }, computeSegVerticals: function (n) { for (var t, i = 0; i < n.length; i++) t = n[i], t.top = this.computeDateTop(t.start, t.start), t.bottom = this.computeDateTop(t.end, t.start) }, assignSegVerticals: function (n) { for (var i, t = 0; t < n.length; t++) i = n[t], i.el.css(this.generateSegVerticalCss(i)) }, generateSegVerticalCss: function (n) { return { top: n.top, bottom: -n.bottom } }, updateFgSegCoords: function (n) { this.computeSegVerticals(n); this.computeFgSegHorizontals(n); this.assignSegVerticals(n); this.assignFgSegHorizontals(n) }, computeFgSegHorizontals: function (n) { var r, i, t; if (this.sortEventSegs(n), r = wf(n), bf(r), i = r[0]) { for (t = 0; t < i.length; t++) nu(i[t]); for (t = 0; t < i.length; t++) this.computeFgSegForwardBack(i[t], 0, 0) } }, computeFgSegForwardBack: function (n, t, i) { var u, r = n.forwardSegs; if (void 0 === n.forwardCoord) for (r.length ? (this.sortForwardSegs(r), this.computeFgSegForwardBack(r[0], t + 1, i), n.forwardCoord = r[0].backwardCoord) : n.forwardCoord = 1, n.backwardCoord = n.forwardCoord - (n.forwardCoord - i) / (t + 1), u = 0; u < r.length; u++) this.computeFgSegForwardBack(r[u], 0, n.forwardCoord) }, sortForwardSegs: function (n) { n.sort(ft(this, "compareForwardSegs")) }, compareForwardSegs: function (n, t) { return t.forwardPressure - n.forwardPressure || (n.backwardCoord || 0) - (t.backwardCoord || 0) || this.compareEventSegs(n, t) }, assignFgSegHorizontals: function (n) { for (var t, i = 0; i < n.length; i++) t = n[i], t.el.css(this.generateFgSegHorizontalCss(t)), t.bottom - t.top < 30 && t.el.addClass("fc-short") }, generateFgSegHorizontalCss: function (n) { var u, f, e = this.view.opt("slotEventOverlap"), i = n.backwardCoord, r = n.forwardCoord, t = this.generateSegVerticalCss(n); return e && (r = Math.min(1, i + 2 * (r - i))), this.isRTL ? (u = 1 - r, f = i) : (u = i, f = 1 - r), t.zIndex = n.level + 1, t.left = 100 * u + "%", t.right = 100 * f + "%", e && n.forwardPressure && (t[this.isRTL ? "marginLeft" : "marginRight"] = 20), t } }); w = i.View = c.extend(li, nt, { type: null, name: null, title: null, calendar: null, options: null, el: null, isDateSet: !1, isDateRendered: !1, dateRenderQueue: null, isEventsBound: !1, isEventsSet: !1, isEventsRendered: !1, eventRenderQueue: null, start: null, end: null, intervalStart: null, intervalEnd: null, intervalDuration: null, intervalUnit: null, isRTL: !1, isSelected: !1, selectedEvent: null, eventOrderSpecs: null, widgetHeaderClass: null, widgetContentClass: null, highlightStateClass: null, nextDayThreshold: null, isHiddenDayHash: null, isNowIndicatorRendered: null, initialNowDate: null, initialNowQueriedMs: null, nowIndicatorTimeoutID: null, nowIndicatorIntervalID: null, constructor: function (n, i, r, u) { this.calendar = n; this.type = this.name = i; this.options = r; this.intervalDuration = u || t.duration(1, "day"); this.nextDayThreshold = t.duration(this.opt("nextDayThreshold")); this.initThemingProps(); this.initHiddenDays(); this.isRTL = this.opt("isRTL"); this.eventOrderSpecs = er(this.opt("eventOrder")); this.dateRenderQueue = new si; this.eventRenderQueue = new si(this.opt("eventRenderWait")); this.initialize() }, initialize: function () { }, opt: function (n) { return this.options[n] }, publiclyTrigger: function (n, t) { var i = this.calendar; return i.publiclyTrigger.apply(i, [n, t || this].concat(Array.prototype.slice.call(arguments, 2), [this])) }, rejectOn: function (n, t) { var i = this; return new f(function (r, u) { function f() { i.off(n, u) } i.one(n, u); t.then(function (n) { f(); r(n) }, function () { f(); u() }) }) }, setRange: function (t) { n.extend(this, t); this.updateTitle() }, computeRange: function (n) { var r, u, f = ii(this.intervalDuration), t = n.clone().startOf(f), i = t.clone().add(this.intervalDuration); return /year|month|week|day/.test(f) ? (t.stripTime(), i.stripTime()) : (t.hasTime() || (t = this.calendar.time(0)), i.hasTime() || (i = this.calendar.time(0))), r = t.clone(), r = this.skipHiddenDays(r), u = i.clone(), u = this.skipHiddenDays(u, -1, !0), { intervalUnit: f, intervalStart: t, intervalEnd: i, start: r, end: u } }, computePrevDate: function (n) { return this.massageCurrentDate(n.clone().startOf(this.intervalUnit).subtract(this.intervalDuration), -1) }, computeNextDate: function (n) { return this.massageCurrentDate(n.clone().startOf(this.intervalUnit).add(this.intervalDuration)) }, massageCurrentDate: function (n, t) { return this.intervalDuration.as("days") <= 1 && this.isHiddenDay(n) && (n = this.skipHiddenDays(n, t), n.startOf("day")), n }, updateTitle: function () { this.title = this.computeTitle(); this.calendar.setToolbarsTitle(this.title) }, computeTitle: function () { var n, t; return "year" === this.intervalUnit || "month" === this.intervalUnit ? (n = this.intervalStart, t = this.intervalEnd) : (n = this.start, t = this.end), this.formatRange({ start: this.calendar.applyTimezone(n), end: this.calendar.applyTimezone(t) }, this.opt("titleFormat") || this.computeTitleFormat(), this.opt("titleRangeSeparator")) }, computeTitleFormat: function () { return "year" == this.intervalUnit ? "YYYY" : "month" == this.intervalUnit ? this.opt("monthYearFormat") : this.intervalDuration.as("days") > 1 ? "ll" : "LL" }, formatRange: function (n, t, i) { var r = n.end; return r.hasTime() || (r = r.clone().subtract(1)), re(n.start, r, t, i, this.opt("isRTL")) }, getAllDayHtml: function () { return this.opt("allDayHtml") || u(this.opt("allDayText")) }, buildGotoAnchorHtml: function (t, r, f) { var e, o, s, h; return n.isPlainObject(t) ? (e = t.date, o = t.type, s = t.forceOff) : e = t, e = i.moment(e), h = { date: e.format("YYYY-MM-DD"), type: o || "day" }, "string" == typeof r && (f = r, r = null), r = r ? " " + of(r) : "", f = f || "", !s && this.opt("navLinks") ? "<a" + r + ' data-goto="' + u(JSON.stringify(h)) + '">' + f + "<\/a>" : "<span" + r + ">" + f + "<\/span>" }, setElement: function (n) { this.el = n; this.bindGlobalHandlers(); this.renderSkeleton() }, removeElement: function () { this.unsetDate(); this.unrenderSkeleton(); this.unbindGlobalHandlers(); this.el.remove() }, renderSkeleton: function () { }, unrenderSkeleton: function () { }, setDate: function (n) { var t = this.isDateSet; this.isDateSet = !0; this.handleDate(n, t); this.trigger(t ? "dateReset" : "dateSet", n) }, unsetDate: function () { this.isDateSet && (this.isDateSet = !1, this.handleDateUnset(), this.trigger("dateUnset")) }, handleDate: function (n) { var t = this; this.unbindEvents(); this.requestDateRender(n).then(function () { t.bindEvents() }) }, handleDateUnset: function () { this.unbindEvents(); this.requestDateUnrender() }, requestDateRender: function (n) { var t = this; return this.dateRenderQueue.add(function () { return t.executeDateRender(n) }) }, requestDateUnrender: function () { var n = this; return this.dateRenderQueue.add(function () { return n.executeDateUnrender() }) }, executeDateRender: function (n) { var t = this; return n ? this.captureInitialScroll() : this.captureScroll(), this.freezeHeight(), this.executeDateUnrender().then(function () { n && t.setRange(t.computeRange(n)); t.render && t.render(); t.renderDates(); t.updateSize(); t.renderBusinessHours(); t.startNowIndicator(); t.thawHeight(); t.releaseScroll(); t.isDateRendered = !0; t.onDateRender(); t.trigger("dateRender") }) }, executeDateUnrender: function () { var n = this; return n.isDateRendered ? this.requestEventsUnrender().then(function () { n.unselect(); n.stopNowIndicator(); n.triggerUnrender(); n.unrenderBusinessHours(); n.unrenderDates(); n.destroy && n.destroy(); n.isDateRendered = !1; n.trigger("dateUnrender") }) : f.resolve() }, onDateRender: function () { this.triggerRender() }, renderDates: function () { }, unrenderDates: function () { }, triggerRender: function () { this.publiclyTrigger("viewRender", this, this, this.el) }, triggerUnrender: function () { this.publiclyTrigger("viewDestroy", this, this, this.el) }, bindGlobalHandlers: function () { this.listenTo(o.get(), { touchstart: this.processUnselect, mousedown: this.handleDocumentMousedown }) }, unbindGlobalHandlers: function () { this.stopListeningTo(o.get()) }, initThemingProps: function () { var n = this.opt("theme") ? "ui" : "fc"; this.widgetHeaderClass = n + "-widget-header"; this.widgetContentClass = n + "-widget-content"; this.highlightStateClass = n + "-state-highlight" }, renderBusinessHours: function () { }, unrenderBusinessHours: function () { }, startNowIndicator: function () { var i, r, n, u = this; this.opt("nowIndicator") && (i = this.getNowIndicatorUnit(), i && (r = ft(this, "updateNowIndicator"), this.initialNowDate = this.calendar.getNow(), this.initialNowQueriedMs = +new Date, this.renderNowIndicator(this.initialNowDate), this.isNowIndicatorRendered = !0, n = this.initialNowDate.clone().startOf(i).add(1, i) - this.initialNowDate, this.nowIndicatorTimeoutID = setTimeout(function () { u.nowIndicatorTimeoutID = null; r(); n = +t.duration(1, i); n = Math.max(100, n); u.nowIndicatorIntervalID = setInterval(r, n) }, n))) }, updateNowIndicator: function () { this.isNowIndicatorRendered && (this.unrenderNowIndicator(), this.renderNowIndicator(this.initialNowDate.clone().add(new Date - this.initialNowQueriedMs))) }, stopNowIndicator: function () { this.isNowIndicatorRendered && (this.nowIndicatorTimeoutID && (clearTimeout(this.nowIndicatorTimeoutID), this.nowIndicatorTimeoutID = null), this.nowIndicatorIntervalID && (clearTimeout(this.nowIndicatorIntervalID), this.nowIndicatorIntervalID = null), this.unrenderNowIndicator(), this.isNowIndicatorRendered = !1) }, getNowIndicatorUnit: function () { }, renderNowIndicator: function () { }, unrenderNowIndicator: function () { }, updateSize: function (n) { n && this.captureScroll(); this.updateHeight(n); this.updateWidth(n); this.updateNowIndicator(); n && this.releaseScroll() }, updateWidth: function () { }, updateHeight: function () { var n = this.calendar; this.setHeight(n.getSuggestedViewHeight(), n.isHeightAuto()) }, setHeight: function () { }, capturedScroll: null, capturedScrollDepth: 0, captureScroll: function () { return !this.capturedScrollDepth++ && (this.capturedScroll = this.isDateRendered ? this.queryScroll() : {}, !0) }, captureInitialScroll: function (t) { this.captureScroll() && (this.capturedScroll.isInitial = !0, t ? n.extend(this.capturedScroll, t) : this.capturedScroll.isComputed = !0) }, releaseScroll: function () { var t = this.capturedScroll, i = this.discardScroll(); t.isComputed && (i ? n.extend(t, this.computeInitialScroll()) : t = null); t && (t.isInitial ? this.hardSetScroll(t) : this.setScroll(t)) }, discardScroll: function () { return !--this.capturedScrollDepth && (this.capturedScroll = null, !0) }, computeInitialScroll: function () { return {} }, queryScroll: function () { return {} }, hardSetScroll: function (n) { var i = this, t = function () { i.setScroll(n) }; t(); setTimeout(t, 0) }, setScroll: function () { }, freezeHeight: function () { this.calendar.freezeContentHeight() }, thawHeight: function () { this.calendar.thawContentHeight() }, bindEvents: function () { var n = this; this.isEventsBound || (this.isEventsBound = !0, this.rejectOn("eventsUnbind", this.requestEvents()).then(function (t) { n.listenTo(n.calendar, "eventsReset", n.setEvents); n.setEvents(t) })) }, unbindEvents: function () { this.isEventsBound && (this.isEventsBound = !1, this.stopListeningTo(this.calendar, "eventsReset"), this.unsetEvents(), this.trigger("eventsUnbind")) }, setEvents: function (n) { var t = this.isEventSet; this.isEventsSet = !0; this.handleEvents(n, t); this.trigger(t ? "eventsReset" : "eventsSet", n) }, unsetEvents: function () { this.isEventsSet && (this.isEventsSet = !1, this.handleEventsUnset(), this.trigger("eventsUnset")) }, whenEventsSet: function () { var n = this; return this.isEventsSet ? f.resolve(this.getCurrentEvents()) : new f(function (t) { n.one("eventsSet", t) }) }, handleEvents: function (n) { this.requestEventsRender(n) }, handleEventsUnset: function () { this.requestEventsUnrender() }, requestEventsRender: function (n) { var t = this; return this.eventRenderQueue.add(function () { return t.executeEventsRender(n) }) }, requestEventsUnrender: function () { var n = this; return this.isEventsRendered ? this.eventRenderQueue.addQuickly(function () { return n.executeEventsUnrender() }) : f.resolve() }, requestCurrentEventsRender: function () { return this.isEventsSet ? void this.requestEventsRender(this.getCurrentEvents()) : f.reject() }, executeEventsRender: function (n) { var t = this; return this.captureScroll(), this.freezeHeight(), this.executeEventsUnrender().then(function () { t.renderEvents(n); t.thawHeight(); t.releaseScroll(); t.isEventsRendered = !0; t.onEventsRender(); t.trigger("eventsRender") }) }, executeEventsUnrender: function () { return this.isEventsRendered && (this.onBeforeEventsUnrender(), this.captureScroll(), this.freezeHeight(), this.destroyEvents && this.destroyEvents(), this.unrenderEvents(), this.thawHeight(), this.releaseScroll(), this.isEventsRendered = !1, this.trigger("eventsUnrender")), f.resolve() }, onEventsRender: function () { this.renderedEventSegEach(function (n) { this.publiclyTrigger("eventAfterRender", n.event, n.event, n.el) }); this.publiclyTrigger("eventAfterAllRender") }, onBeforeEventsUnrender: function () { this.renderedEventSegEach(function (n) { this.publiclyTrigger("eventDestroy", n.event, n.event, n.el) }) }, renderEvents: function () { }, unrenderEvents: function () { }, requestEvents: function () { return this.calendar.requestEvents(this.start, this.end) }, getCurrentEvents: function () { return this.calendar.getPrunedEventCache() }, resolveEventEl: function (t, i) { var r = this.publiclyTrigger("eventRender", t, t, i); return r === !1 ? i = null : r && r !== !0 && (i = n(r)), i }, showEvent: function (n) { this.renderedEventSegEach(function (n) { n.el.css("visibility", "") }, n) }, hideEvent: function (n) { this.renderedEventSegEach(function (n) { n.el.css("visibility", "hidden") }, n) }, renderedEventSegEach: function (n, t) { for (var r = this.getEventSegs(), i = 0; i < r.length; i++) t && r[i].event._id !== t._id || r[i].el && n.call(this, r[i]) }, getEventSegs: function () { return [] }, isEventDraggable: function (n) { return this.isEventStartEditable(n) }, isEventStartEditable: function (n) { return e(n.startEditable, (n.source || {}).startEditable, this.opt("eventStartEditable"), this.isEventGenerallyEditable(n)) }, isEventGenerallyEditable: function (n) { return e(n.editable, (n.source || {}).editable, this.opt("editable")) }, reportSegDrop: function (n, t, i, r, u) { var f = this.calendar, e = f.mutateSeg(n, t, i), o = function () { e.undo(); f.reportEventChange() }; this.triggerEventDrop(n.event, e.dateDelta, o, r, u); f.reportEventChange() }, triggerEventDrop: function (n, t, i, r, u) { this.publiclyTrigger("eventDrop", r[0], n, t, i, u, {}) }, reportExternalDrop: function (t, i, r, u, f) { var e, o, s = t.eventProps; s && (e = n.extend({}, s, i), o = this.calendar.renderEvent(e, t.stick)[0]); this.triggerExternalDrop(o, i, r, u, f) }, triggerExternalDrop: function (n, t, i, r, u) { this.publiclyTrigger("drop", i[0], t.start, r, u); n && this.publiclyTrigger("eventReceive", null, n) }, renderDrag: function () { }, unrenderDrag: function () { }, isEventResizableFromStart: function (n) { return this.opt("eventResizableFromStart") && this.isEventResizable(n) }, isEventResizableFromEnd: function (n) { return this.isEventResizable(n) }, isEventResizable: function (n) { var t = n.source || {}; return e(n.durationEditable, t.durationEditable, this.opt("eventDurationEditable"), n.editable, t.editable, this.opt("editable")) }, reportSegResize: function (n, t, i, r, u) { var f = this.calendar, e = f.mutateSeg(n, t, i), o = function () { e.undo(); f.reportEventChange() }; this.triggerEventResize(n.event, e.durationDelta, o, r, u); f.reportEventChange() }, triggerEventResize: function (n, t, i, r, u) { this.publiclyTrigger("eventResize", r[0], n, t, i, u, {}) }, select: function (n, t) { this.unselect(t); this.renderSelection(n); this.reportSelection(n, t) }, renderSelection: function () { }, reportSelection: function (n, t) { this.isSelected = !0; this.triggerSelect(n, t) }, triggerSelect: function (n, t) { this.publiclyTrigger("select", null, this.calendar.applyTimezone(n.start), this.calendar.applyTimezone(n.end), t) }, unselect: function (n) { this.isSelected && (this.isSelected = !1, this.destroySelection && this.destroySelection(), this.unrenderSelection(), this.publiclyTrigger("unselect", null, n)) }, unrenderSelection: function () { }, selectEvent: function (n) { this.selectedEvent && this.selectedEvent === n || (this.unselectEvent(), this.renderedEventSegEach(function (n) { n.el.addClass("fc-selected") }, n), this.selectedEvent = n) }, unselectEvent: function () { this.selectedEvent && (this.renderedEventSegEach(function (n) { n.el.removeClass("fc-selected") }, this.selectedEvent), this.selectedEvent = null) }, isEventSelected: function (n) { return this.selectedEvent && this.selectedEvent._id === n._id }, handleDocumentMousedown: function (n) { ir(n) && this.processUnselect(n) }, processUnselect: function (n) { this.processRangeUnselect(n); this.processEventUnselect(n) }, processRangeUnselect: function (t) { var i; this.isSelected && this.opt("unselectAuto") && (i = this.opt("unselectCancel"), i && n(t.target).closest(i).length || this.unselect(t)) }, processEventUnselect: function (t) { this.selectedEvent && (n(t.target).closest(".fc-selected").length || this.unselectEvent()) }, triggerDayClick: function (n, t, i) { this.publiclyTrigger("dayClick", t, this.calendar.applyTimezone(n.start), i) }, initHiddenDays: function () { var t, i = this.opt("hiddenDays") || [], r = [], u = 0; for (this.opt("weekends") === !1 && i.push(0, 6), t = 0; t < 7; t++) (r[t] = n.inArray(t, i) !== -1) || u++; if (!u) throw "invalid hiddenDays"; this.isHiddenDayHash = r }, isHiddenDay: function (n) { return t.isMoment(n) && (n = n.day()), this.isHiddenDayHash[n] }, skipHiddenDays: function (n, t, i) { var r = n.clone(); for (t = t || 1; this.isHiddenDayHash[(r.day() + (i ? t : 0) + 7) % 7];) r.add(t, "days"); return r }, computeDayRange: function (n) { var r, u = n.start.clone().stripTime(), i = n.end, t = null; return i && (t = i.clone().stripTime(), r = +i.time(), r && r >= this.nextDayThreshold && t.add(1, "days")), (!i || t <= u) && (t = u.clone().add(1, "days")), { start: u, end: t } }, isMultiDayEvent: function (n) { var t = this.computeDayRange(n); return t.end.diff(t.start, "days") > 1 } }); kt = i.Scroller = c.extend({ el: null, scrollEl: null, overflowX: null, overflowY: null, constructor: function (n) { n = n || {}; this.overflowX = n.overflowX || n.overflow || "auto"; this.overflowY = n.overflowY || n.overflow || "auto" }, render: function () { this.el = this.renderEl(); this.applyOverflow() }, renderEl: function () { return this.scrollEl = n('<div class="fc-scroller"><\/div>') }, clear: function () { this.setHeight("auto"); this.applyOverflow() }, destroy: function () { this.el.remove() }, applyOverflow: function () { this.scrollEl.css({ "overflow-x": this.overflowX, "overflow-y": this.overflowY }) }, lockOverflow: function (n) { var t = this.overflowX, i = this.overflowY; n = n || this.getScrollbarWidths(); "auto" === t && (t = n.top || n.bottom || this.scrollEl[0].scrollWidth - 1 > this.scrollEl[0].clientWidth ? "scroll" : "hidden"); "auto" === i && (i = n.left || n.right || this.scrollEl[0].scrollHeight - 1 > this.scrollEl[0].clientHeight ? "scroll" : "hidden"); this.scrollEl.css({ "overflow-x": t, "overflow-y": i }) }, setHeight: function (n) { this.scrollEl.height(n) }, getScrollTop: function () { return this.scrollEl.scrollTop() }, setScrollTop: function (n) { this.scrollEl.scrollTop(n) }, getClientWidth: function () { return this.scrollEl[0].clientWidth }, getClientHeight: function () { return this.scrollEl[0].clientHeight }, getScrollbarWidths: function () { return ti(this.scrollEl) } }); iu.prototype.proxyCall = function (n) { var i = Array.prototype.slice.call(arguments, 1), t = []; return this.items.forEach(function (r) { t.push(r[n].apply(r, i)) }), t }; r = i.Calendar = c.extend({ dirDefaults: null, localeDefaults: null, overrides: null, dynamicOverrides: null, options: null, viewSpecCache: null, view: null, header: null, footer: null, loadingLevel: 0, constructor: df, initialize: function () { }, populateOptionsHash: function () { var t, n, u, i; t = e(this.dynamicOverrides.locale, this.overrides.locale); n = k[t]; n || (t = r.defaults.locale, n = k[t] || {}); u = e(this.dynamicOverrides.isRTL, this.overrides.isRTL, n.isRTL, r.defaults.isRTL); i = u ? r.rtlDefaults : {}; this.dirDefaults = i; this.localeDefaults = n; this.options = it([r.defaults, i, n, this.overrides, this.dynamicOverrides]); uu(this.options) }, getViewSpec: function (n) { var t = this.viewSpecCache; return t[n] || (t[n] = this.buildViewSpec(n)) }, getUnitViewSpec: function (t) { var r, u, f; if (n.inArray(t, pt) != -1) for (r = this.header.getViewsWithButtons(), n.each(i.views, function (n) { r.push(n) }), u = 0; u < r.length; u++) if (f = this.getViewSpec(r[u]), f && f.singleUnit == t) return f }, buildViewSpec: function (n) { for (var i, f, r, e, h = this.overrides.views || {}, c = [], l = [], o = [], u = n; u;) i = s[u], f = h[u], u = null, "function" == typeof i && (i = { "class": i }), i && (c.unshift(i), l.unshift(i.defaults || {}), r = r || i.duration, u = u || i.type), f && (o.unshift(f), r = r || f.duration, u = u || f.type); return i = ui(c), i.type = n, !!i.class && (r && (r = t.duration(r), r.valueOf() && (i.duration = r, e = ii(r), 1 === r.as(e) && (i.singleUnit = e, o.unshift(h[e] || {})))), i.defaults = it(l), i.overrides = it(o), this.buildViewSpecOptions(i), this.buildViewSpecButtonText(i, n), i) }, buildViewSpecOptions: function (n) { n.options = it([r.defaults, n.defaults, this.dirDefaults, this.localeDefaults, this.overrides, n.overrides, this.dynamicOverrides]); uu(n.options) }, buildViewSpecButtonText: function (n, t) { function i(i) { var r = i.buttonText || {}; return r[t] || (n.buttonTextKey ? r[n.buttonTextKey] : null) || (n.singleUnit ? r[n.singleUnit] : null) } n.buttonTextOverride = i(this.dynamicOverrides) || i(this.overrides) || n.overrides.buttonText; n.buttonTextDefault = i(this.localeDefaults) || i(this.dirDefaults) || n.defaults.buttonText || i(r.defaults) || (n.duration ? this.humanizeDuration(n.duration) : null) || t }, instantiateView: function (n) { var t = this.getViewSpec(n); return new t.class(this, n, t.options, t.duration) }, isValidViewType: function (n) { return Boolean(this.getViewSpec(n)) }, pushLoading: function () { this.loadingLevel++ || this.publiclyTrigger("loading", null, !0, this.view) }, popLoading: function () { --this.loadingLevel || this.publiclyTrigger("loading", null, !1, this.view) }, buildSelectSpan: function (n, t) { var r, i = this.moment(n).stripZone(); return r = t ? this.moment(t).stripZone() : i.hasTime() ? i.clone().add(this.defaultTimedEventDuration) : i.clone().add(this.defaultAllDayEventDuration), { start: i, end: r } } }); r.mixin(li); r.mixin({ optionHandlers: null, bindOption: function (n, t) { this.bindOptions([n], t) }, bindOptions: function (n, t) { for (var r = { func: t, names: n }, i = 0; i < n.length; i++) this.registerOptionHandlerObj(n[i], r); this.triggerOptionHandlerObj(r) }, registerOptionHandlerObj: function (n, t) { (this.optionHandlers[n] || (this.optionHandlers[n] = [])).push(t) }, triggerOptionHandlers: function (n) { for (var i = this.optionHandlers[n] || [], t = 0; t < i.length; t++) this.triggerOptionHandlerObj(i[t]) }, triggerOptionHandlerObj: function (n) { for (var i = n.names, r = [], t = 0; t < i.length; t++) r.push(this.options[i[t]]); n.func.apply(this, r) } }); r.defaults = { titleRangeSeparator: " – ", monthYearFormat: "MMMM YYYY", defaultTimedEventDuration: "02:00:00", defaultAllDayEventDuration: { days: 1 }, forceEventDuration: !1, nextDayThreshold: "09:00:00", defaultView: "month", aspectRatio: 1.35, header: { left: "title", center: "", right: "today prev,next" }, weekends: !0, weekNumbers: !1, weekNumberTitle: "W", weekNumberCalculation: "local", scrollTime: "06:00:00", lazyFetching: !0, startParam: "start", endParam: "end", timezoneParam: "timezone", timezone: !1, isRTL: !1, buttonText: { prev: "prev", next: "next", prevYear: "prev year", nextYear: "next year", year: "year", today: "today", month: "month", week: "week", day: "day" }, buttonIcons: { prev: "left-single-arrow", next: "right-single-arrow", prevYear: "left-double-arrow", nextYear: "right-double-arrow" }, allDayText: "all-day", theme: !1, themeButtonIcons: { prev: "circle-triangle-w", next: "circle-triangle-e", prevYear: "seek-prev", nextYear: "seek-next" }, dragOpacity: .75, dragRevertDuration: 500, dragScroll: !0, unselectAuto: !0, dropAccept: "*", eventOrder: "title", eventLimit: !1, eventLimitText: "more", eventLimitClick: "popover", dayPopoverFormat: "LL", handleWindowResize: !0, windowResizeDelay: 100, longPressDelay: 1e3 }; r.englishDefaults = { dayPopoverFormat: "dddd, MMMM D" }; r.rtlDefaults = { header: { left: "next,prev today", center: "", right: "title" }, buttonIcons: { prev: "right-single-arrow", next: "left-single-arrow", prevYear: "right-double-arrow", nextYear: "left-double-arrow" }, themeButtonIcons: { prev: "circle-triangle-e", next: "circle-triangle-w", nextYear: "seek-prev", prevYear: "seek-next" } }; k = i.locales = {}; i.datepickerLocale = function (t, i, r) { var u = k[t] || (k[t] = {}); u.isRTL = r.isRTL; u.weekNumberTitle = r.weekHeader; n.each(fe, function (n, t) { u[n] = t(r) }); n.datepicker && (n.datepicker.regional[i] = n.datepicker.regional[t] = r, n.datepicker.regional.en = n.datepicker.regional[""], n.datepicker.setDefaults(r)) }; i.locale = function (t, i) { var u, f; u = k[t] || (k[t] = {}); i && (u = k[t] = it([u, i])); f = fu(t); n.each(ee, function (n, t) { null == u[n] && (u[n] = t(f, u)) }); r.defaults.locale = t }; var fe = { buttonText: function (n) { return { prev: ei(n.prevText), next: ei(n.nextText), today: ei(n.currentText) } }, monthYearFormat: function (n) { return n.showMonthAfterYear ? "YYYY[" + n.yearSuffix + "] MMMM" : "MMMM YYYY[" + n.yearSuffix + "]" } }, ee = { dayOfMonthFormat: function (n, t) { var i = n.longDateFormat("l"); return i = i.replace(/^Y+[^\w\s]*|[^\w\s]*Y+$/g, ""), t.isRTL ? i += " ddd" : i = "ddd " + i, i }, mediumTimeFormat: function (n) { return n.longDateFormat("LT").replace(/\s*a$/i, "a") }, smallTimeFormat: function (n) { return n.longDateFormat("LT").replace(":mm", "(:mm)").replace(/(\Wmm)$/, "($1)").replace(/\s*a$/i, "a") }, extraSmallTimeFormat: function (n) { return n.longDateFormat("LT").replace(":mm", "(:mm)").replace(/(\Wmm)$/, "($1)").replace(/\s*a$/i, "t") }, hourFormat: function (n) { return n.longDateFormat("LT").replace(":mm", "").replace(/(\Wmm)$/, "").replace(/\s*a$/i, "a") }, noMeridiemTimeFormat: function (n) { return n.longDateFormat("LT").replace(/\s*a$/i, "") } }, oe = { smallDayDateFormat: function (n) { return n.isRTL ? "D dd" : "dd D" }, weekFormat: function (n) { return n.isRTL ? "w[ " + n.weekNumberTitle + "]" : "[" + n.weekNumberTitle + " ]w" }, smallWeekFormat: function (n) { return n.isRTL ? "w[" + n.weekNumberTitle + "]" : "[" + n.weekNumberTitle + "]w" } }; i.locale("en", r.englishDefaults); i.sourceNormalizers = []; i.sourceFetchers = []; hu = { dataType: "json", cache: !1 }; cu = 1; r.prototype.mutateSeg = function (n, t) { return this.mutateEvent(n.event, t) }; r.prototype.normalizeEvent = function () { }; r.prototype.spanContainsSpan = function (n, t) { var i = n.start.clone().stripZone(), r = this.getEventEnd(n).stripZone(); return t.start >= i && t.end <= r }; r.prototype.getPeerEvents = function (n, t) { for (var r, u = this.getEventCache(), f = [], i = 0; i < u.length; i++) r = u[i], t && t._id === r._id || f.push(r); return f }; r.prototype.isEventSpanAllowed = function (n, t) { var i = t.source || {}, r = e(t.constraint, i.constraint, this.options.eventConstraint), u = e(t.overlap, i.overlap, this.options.eventOverlap); return this.isSpanAllowed(n, r, u, t) && (!this.options.eventAllow || this.options.eventAllow(n, t) !== !1) }; r.prototype.isExternalSpanAllowed = function (t, i, r) { var f, u; return r && (f = n.extend({}, r, i), u = this.expandEvent(this.buildEventFromInput(f))[0]), u ? this.isEventSpanAllowed(t, u) : this.isSelectionSpanAllowed(t) }; r.prototype.isSelectionSpanAllowed = function (n) { return this.isSpanAllowed(n, this.options.selectConstraint, this.options.selectOverlap) && (!this.options.selectAllow || this.options.selectAllow(n) !== !1) }; r.prototype.isSpanAllowed = function (n, t, i, r) { var s, h, c, u, f, o; if (null != t && (s = this.constraintToEvents(t))) { for (h = !1, u = 0; u < s.length; u++) if (this.spanContainsSpan(s[u], n)) { h = !0; break } if (!h) return !1 } for (c = this.getPeerEvents(n, r), u = 0; u < c.length; u++) if ((f = c[u], this.eventIntersectsRange(f, n)) && (i === !1 || "function" == typeof i && !i(f, r) || r && ((o = e(f.overlap, (f.source || {}).overlap), o === !1) || "function" == typeof o && !o(r, f)))) return !1; return !0 }; r.prototype.constraintToEvents = function (n) { return "businessHours" === n ? this.getCurrentBusinessHourEvents() : "object" == typeof n ? null != n.start ? this.expandEvent(this.buildEventFromInput(n)) : null : this.clientEvents(n) }; r.prototype.eventIntersectsRange = function (n, t) { var i = n.start.clone().stripZone(), r = this.getEventEnd(n).stripZone(); return t.start < r && t.end > i }; yi = { id: "_fcBusinessHours", start: "09:00", end: "17:00", dow: [1, 2, 3, 4, 5], rendering: "inverse-background" }; r.prototype.getCurrentBusinessHourEvents = function (n) { return this.computeBusinessHourEvents(n, this.options.businessHours) }; r.prototype.computeBusinessHourEvents = function (t, i) { return i === !0 ? this.expandBusinessHourEvents(t, [{}]) : n.isPlainObject(i) ? this.expandBusinessHourEvents(t, [i]) : n.isArray(i) ? this.expandBusinessHourEvents(t, i, !0) : [] }; r.prototype.expandBusinessHourEvents = function (t, i, r) { for (var u, o = this.getView(), e = [], f = 0; f < i.length; f++) u = i[f], r && !u.dow || (u = n.extend({}, yi, u), t && (u.start = null, u.end = null), e.push.apply(e, this.expandEvent(this.buildEventFromInput(u), o.start, o.end))); return e }; var pi = i.BasicView = w.extend({ scroller: null, dayGridClass: et, dayGrid: null, dayNumbersVisible: !1, colWeekNumbersVisible: !1, cellWeekNumbersVisible: !1, weekNumberWidth: null, headContainerEl: null, headRowEl: null, initialize: function () { this.dayGrid = this.instantiateDayGrid(); this.scroller = new kt({ overflowX: "hidden", overflowY: "auto" }) }, instantiateDayGrid: function () { var n = this.dayGridClass.extend(se); return new n(this) }, setRange: function (n) { w.prototype.setRange.call(this, n); this.dayGrid.breakOnWeeks = /year|month|week/.test(this.intervalUnit); this.dayGrid.setRange(n) }, computeRange: function (n) { var t = w.prototype.computeRange.call(this, n); return /year|month/.test(t.intervalUnit) && (t.start.startOf("week"), t.start = this.skipHiddenDays(t.start), t.end.weekday() && (t.end.add(1, "week").startOf("week"), t.end = this.skipHiddenDays(t.end, -1, !0))), t }, renderDates: function () { this.dayNumbersVisible = this.dayGrid.rowCnt > 1; this.opt("weekNumbers") && (this.opt("weekNumbersWithinDays") ? (this.cellWeekNumbersVisible = !0, this.colWeekNumbersVisible = !1) : (this.cellWeekNumbersVisible = !1, this.colWeekNumbersVisible = !0)); this.dayGrid.numbersVisible = this.dayNumbersVisible || this.cellWeekNumbersVisible || this.colWeekNumbersVisible; this.el.addClass("fc-basic-view").html(this.renderSkeletonHtml()); this.renderHead(); this.scroller.render(); var t = this.scroller.el.addClass("fc-day-grid-container"), i = n('<div class="fc-day-grid" />').appendTo(t); this.el.find(".fc-body > tr > td").append(t); this.dayGrid.setElement(i); this.dayGrid.renderDates(this.hasRigidRows()) }, renderHead: function () { this.headContainerEl = this.el.find(".fc-head-container").html(this.dayGrid.renderHeadHtml()); this.headRowEl = this.headContainerEl.find(".fc-row") }, unrenderDates: function () { this.dayGrid.unrenderDates(); this.dayGrid.removeElement(); this.scroller.destroy() }, renderBusinessHours: function () { this.dayGrid.renderBusinessHours() }, unrenderBusinessHours: function () { this.dayGrid.unrenderBusinessHours() }, renderSkeletonHtml: function () { return '<table><thead class="fc-head"><tr><td class="fc-head-container ' + this.widgetHeaderClass + '"><\/td><\/tr><\/thead><tbody class="fc-body"><tr><td class="' + this.widgetContentClass + '"><\/td><\/tr><\/tbody><\/table>' }, weekNumberStyleAttr: function () { return null !== this.weekNumberWidth ? 'style="width:' + this.weekNumberWidth + 'px"' : "" }, hasRigidRows: function () { var n = this.opt("eventLimit"); return n && "number" != typeof n }, updateWidth: function () { this.colWeekNumbersVisible && (this.weekNumberWidth = gi(this.el.find(".fc-week-number"))) }, setHeight: function (n, t) { var r, u, i = this.opt("eventLimit"); this.scroller.clear(); bi(this.headRowEl); this.dayGrid.removeSegPopover(); i && "number" == typeof i && this.dayGrid.limitRows(i); r = this.computeScrollerHeight(n); this.setGridHeight(r, t); i && "number" != typeof i && this.dayGrid.limitRows(i); t || (this.scroller.setHeight(r), u = this.scroller.getScrollbarWidths(), (u.left || u.right) && (wi(this.headRowEl, u), r = this.computeScrollerHeight(n), this.scroller.setHeight(r)), this.scroller.lockOverflow(u)) }, computeScrollerHeight: function (n) { return n - dt(this.el, this.scroller.el) }, setGridHeight: function (n, t) { t ? di(this.dayGrid.rowEls) : ki(this.dayGrid.rowEls, n, !0) }, computeInitialScroll: function () { return { top: 0 } }, queryScroll: function () { return { top: this.scroller.getScrollTop() } }, setScroll: function (n) { this.scroller.setScrollTop(n.top) }, hitsNeeded: function () { this.dayGrid.hitsNeeded() }, hitsNotNeeded: function () { this.dayGrid.hitsNotNeeded() }, prepareHits: function () { this.dayGrid.prepareHits() }, releaseHits: function () { this.dayGrid.releaseHits() }, queryHit: function (n, t) { return this.dayGrid.queryHit(n, t) }, getHitSpan: function (n) { return this.dayGrid.getHitSpan(n) }, getHitEl: function (n) { return this.dayGrid.getHitEl(n) }, renderEvents: function (n) { this.dayGrid.renderEvents(n); this.updateHeight() }, getEventSegs: function () { return this.dayGrid.getEventSegs() }, unrenderEvents: function () { this.dayGrid.unrenderEvents() }, renderDrag: function (n, t) { return this.dayGrid.renderDrag(n, t) }, unrenderDrag: function () { this.dayGrid.unrenderDrag() }, renderSelection: function (n) { this.dayGrid.renderSelection(n) }, unrenderSelection: function () { this.dayGrid.unrenderSelection() } }), se = { renderHeadIntroHtml: function () { var n = this.view; return n.colWeekNumbersVisible ? '<th class="fc-week-number ' + n.widgetHeaderClass + '" ' + n.weekNumberStyleAttr() + "><span>" + u(n.opt("weekNumberTitle")) + "<\/span><\/th>" : "" }, renderNumberIntroHtml: function (n) { var t = this.view, i = this.getCellDate(n, 0); return t.colWeekNumbersVisible ? '<td class="fc-week-number" ' + t.weekNumberStyleAttr() + ">" + t.buildGotoAnchorHtml({ date: i, type: "week", forceOff: 1 === this.colCnt }, i.format("w")) + "<\/td>" : "" }, renderBgIntroHtml: function () { var n = this.view; return n.colWeekNumbersVisible ? '<td class="fc-week-number ' + n.widgetContentClass + '" ' + n.weekNumberStyleAttr() + "><\/td>" : "" }, renderIntroHtml: function () { var n = this.view; return n.colWeekNumbersVisible ? '<td class="fc-week-number" ' + n.weekNumberStyleAttr() + "><\/td>" : "" } }, he = i.MonthView = pi.extend({ computeRange: function (n) { var i, t = pi.prototype.computeRange.call(this, n); return this.isFixedWeeks() && (i = Math.ceil(t.end.diff(t.start, "weeks", !0)), t.end.add(6 - i, "weeks")), t }, setGridHeight: function (n, t) { t && (n *= this.rowCnt / 6); ki(this.dayGrid.rowEls, n, !t) }, isFixedWeeks: function () { return this.opt("fixedWeekCount") } }); s.basic = { "class": pi }; s.basicDay = { type: "basic", duration: { days: 1 } }; s.basicWeek = { type: "basic", duration: { weeks: 1 } }; s.month = { "class": he, duration: { months: 1 }, defaults: { fixedWeekCount: !0 } }; var ce = i.AgendaView = w.extend({ scroller: null, timeGridClass: vi, timeGrid: null, dayGridClass: et, dayGrid: null, axisWidth: null, headContainerEl: null, noScrollRowEls: null, bottomRuleEl: null, initialize: function () { this.timeGrid = this.instantiateTimeGrid(); this.opt("allDaySlot") && (this.dayGrid = this.instantiateDayGrid()); this.scroller = new kt({ overflowX: "hidden", overflowY: "auto" }) }, instantiateTimeGrid: function () { var n = this.timeGridClass.extend(le); return new n(this) }, instantiateDayGrid: function () { var n = this.dayGridClass.extend(ae); return new n(this) }, setRange: function (n) { w.prototype.setRange.call(this, n); this.timeGrid.setRange(n); this.dayGrid && this.dayGrid.setRange(n) }, renderDates: function () { this.el.addClass("fc-agenda-view").html(this.renderSkeletonHtml()); this.renderHead(); this.scroller.render(); var t = this.scroller.el.addClass("fc-time-grid-container"), i = n('<div class="fc-time-grid" />').appendTo(t); this.el.find(".fc-body > tr > td").append(t); this.timeGrid.setElement(i); this.timeGrid.renderDates(); this.bottomRuleEl = n('<hr class="fc-divider ' + this.widgetHeaderClass + '"/>').appendTo(this.timeGrid.el); this.dayGrid && (this.dayGrid.setElement(this.el.find(".fc-day-grid")), this.dayGrid.renderDates(), this.dayGrid.bottomCoordPadding = this.dayGrid.el.next("hr").outerHeight()); this.noScrollRowEls = this.el.find(".fc-row:not(.fc-scroller *)") }, renderHead: function () { this.headContainerEl = this.el.find(".fc-head-container").html(this.timeGrid.renderHeadHtml()) }, unrenderDates: function () { this.timeGrid.unrenderDates(); this.timeGrid.removeElement(); this.dayGrid && (this.dayGrid.unrenderDates(), this.dayGrid.removeElement()); this.scroller.destroy() }, renderSkeletonHtml: function () { return '<table><thead class="fc-head"><tr><td class="fc-head-container ' + this.widgetHeaderClass + '"><\/td><\/tr><\/thead><tbody class="fc-body"><tr><td class="' + this.widgetContentClass + '">' + (this.dayGrid ? '<div class="fc-day-grid"/><hr class="fc-divider ' + this.widgetHeaderClass + '"/>' : "") + "<\/td><\/tr><\/tbody><\/table>" }, axisStyleAttr: function () { return null !== this.axisWidth ? 'style="width:' + this.axisWidth + 'px"' : "" }, renderBusinessHours: function () { this.timeGrid.renderBusinessHours(); this.dayGrid && this.dayGrid.renderBusinessHours() }, unrenderBusinessHours: function () { this.timeGrid.unrenderBusinessHours(); this.dayGrid && this.dayGrid.unrenderBusinessHours() }, getNowIndicatorUnit: function () { return this.timeGrid.getNowIndicatorUnit() }, renderNowIndicator: function (n) { this.timeGrid.renderNowIndicator(n) }, unrenderNowIndicator: function () { this.timeGrid.unrenderNowIndicator() }, updateSize: function (n) { this.timeGrid.updateSize(n); w.prototype.updateSize.call(this, n) }, updateWidth: function () { this.axisWidth = gi(this.el.find(".fc-axis")) }, setHeight: function (n, t) { var i, r, u; this.bottomRuleEl.hide(); this.scroller.clear(); bi(this.noScrollRowEls); this.dayGrid && (this.dayGrid.removeSegPopover(), i = this.opt("eventLimit"), i && "number" != typeof i && (i = ve), i && this.dayGrid.limitRows(i)); t || (r = this.computeScrollerHeight(n), this.scroller.setHeight(r), u = this.scroller.getScrollbarWidths(), (u.left || u.right) && (wi(this.noScrollRowEls, u), r = this.computeScrollerHeight(n), this.scroller.setHeight(r)), this.scroller.lockOverflow(u), this.timeGrid.getTotalSlatHeight() < r && this.bottomRuleEl.show()) }, computeScrollerHeight: function (n) { return n - dt(this.el, this.scroller.el) }, computeInitialScroll: function () { var i = t.duration(this.opt("scrollTime")), n = this.timeGrid.computeTimeTop(i); return n = Math.ceil(n), n && n++, { top: n } }, queryScroll: function () { return { top: this.scroller.getScrollTop() } }, setScroll: function (n) { this.scroller.setScrollTop(n.top) }, hitsNeeded: function () { this.timeGrid.hitsNeeded(); this.dayGrid && this.dayGrid.hitsNeeded() }, hitsNotNeeded: function () { this.timeGrid.hitsNotNeeded(); this.dayGrid && this.dayGrid.hitsNotNeeded() }, prepareHits: function () { this.timeGrid.prepareHits(); this.dayGrid && this.dayGrid.prepareHits() }, releaseHits: function () { this.timeGrid.releaseHits(); this.dayGrid && this.dayGrid.releaseHits() }, queryHit: function (n, t) { var i = this.timeGrid.queryHit(n, t); return !i && this.dayGrid && (i = this.dayGrid.queryHit(n, t)), i }, getHitSpan: function (n) { return n.component.getHitSpan(n) }, getHitEl: function (n) { return n.component.getHitEl(n) }, renderEvents: function (n) { for (var u, i = [], r = [], f = [], t = 0; t < n.length; t++) n[t].allDay ? i.push(n[t]) : r.push(n[t]); u = this.timeGrid.renderEvents(r); this.dayGrid && (f = this.dayGrid.renderEvents(i)); this.updateHeight() }, getEventSegs: function () { return this.timeGrid.getEventSegs().concat(this.dayGrid ? this.dayGrid.getEventSegs() : []) }, unrenderEvents: function () { this.timeGrid.unrenderEvents(); this.dayGrid && this.dayGrid.unrenderEvents() }, renderDrag: function (n, t) { return n.start.hasTime() ? this.timeGrid.renderDrag(n, t) : this.dayGrid ? this.dayGrid.renderDrag(n, t) : void 0 }, unrenderDrag: function () { this.timeGrid.unrenderDrag(); this.dayGrid && this.dayGrid.unrenderDrag() }, renderSelection: function (n) { n.start.hasTime() || n.end.hasTime() ? this.timeGrid.renderSelection(n) : this.dayGrid && this.dayGrid.renderSelection(n) }, unrenderSelection: function () { this.timeGrid.unrenderSelection(); this.dayGrid && this.dayGrid.unrenderSelection() } }), le = { renderHeadIntroHtml: function () { var t, n = this.view; return n.opt("weekNumbers") ? (t = this.start.format(n.opt("smallWeekFormat")), '<th class="fc-axis fc-week-number ' + n.widgetHeaderClass + '" ' + n.axisStyleAttr() + ">" + n.buildGotoAnchorHtml({ date: this.start, type: "week", forceOff: this.colCnt > 1 }, u(t)) + "<\/th>") : '<th class="fc-axis ' + n.widgetHeaderClass + '" ' + n.axisStyleAttr() + "><\/th>" }, renderBgIntroHtml: function () { var n = this.view; return '<td class="fc-axis ' + n.widgetContentClass + '" ' + n.axisStyleAttr() + "><\/td>" }, renderIntroHtml: function () { var n = this.view; return '<td class="fc-axis" ' + n.axisStyleAttr() + "><\/td>" } }, ae = { renderBgIntroHtml: function () { var n = this.view; return '<td class="fc-axis ' + n.widgetContentClass + '" ' + n.axisStyleAttr() + "><span>" + n.getAllDayHtml() + "<\/span><\/td>" }, renderIntroHtml: function () { var n = this.view; return '<td class="fc-axis" ' + n.axisStyleAttr() + "><\/td>" } }, ve = 5, lu = [{ hours: 1 }, { minutes: 30 }, { minutes: 15 }, { seconds: 30 }, { seconds: 15 }]; return s.agenda = { "class": ce, defaults: { allDaySlot: !0, slotDuration: "00:30:00", minTime: "00:00:00", maxTime: "24:00:00", slotEventOverlap: !0 } }, s.agendaDay = { type: "agenda", duration: { days: 1 } }, s.agendaWeek = { type: "agenda", duration: { weeks: 1 } }, au = w.extend({ grid: null, scroller: null, initialize: function () { this.grid = new vu(this); this.scroller = new kt({ overflowX: "hidden", overflowY: "auto" }) }, setRange: function (n) { w.prototype.setRange.call(this, n); this.grid.setRange(n) }, renderSkeleton: function () { this.el.addClass("fc-list-view " + this.widgetContentClass); this.scroller.render(); this.scroller.el.appendTo(this.el); this.grid.setElement(this.scroller.scrollEl) }, unrenderSkeleton: function () { this.scroller.destroy() }, setHeight: function (n) { this.scroller.setHeight(this.computeScrollerHeight(n)) }, computeScrollerHeight: function (n) { return n - dt(this.el, this.scroller.el) }, renderEvents: function (n) { this.grid.renderEvents(n) }, unrenderEvents: function () { this.grid.unrenderEvents() }, isEventResizable: function () { return !1 }, isEventDraggable: function () { return !1 } }), vu = a.extend({ segSelector: ".fc-list-item", hasDayInteractions: !1, spanToSegs: function (n) { for (var t, r = this.view, i = r.start.clone().time(0), u = 0, f = []; i < r.end;) if (t = ht(n, { start: i, end: i.clone().add(1, "day") }), t && (t.dayIndex = u, f.push(t)), i.add(1, "day"), u++, t && !t.isEnd && n.end.hasTime() && n.end < i.clone().add(this.view.nextDayThreshold)) { t.end = n.end.clone(); t.isEnd = !0; break } return f }, computeEventTimeFormat: function () { return this.view.opt("mediumTimeFormat") }, handleSegClick: function (t, i) { var r; a.prototype.handleSegClick.apply(this, arguments); n(i.target).closest("a[href]").length || (r = t.event.url, r && !i.isDefaultPrevented() && (window.location.href = r)) }, renderFgSegs: function (n) { return n = this.renderFgSegEls(n), n.length ? this.renderSegList(n) : this.renderEmptyMessage(), n }, renderEmptyMessage: function () { this.el.html('<div class="fc-list-empty-wrap2"><div class="fc-list-empty-wrap1"><div class="fc-list-empty">' + u(this.view.opt("noEventsMessage")) + "<\/div><\/div><\/div>") }, renderSegList: function (t) { for (var r, u, f = this.groupSegsByDay(t), e = n('<table class="fc-list-table"><tbody/><\/table>'), o = e.find("tbody"), i = 0; i < f.length; i++) if (r = f[i]) for (o.append(this.dayHeaderHtml(this.view.start.clone().add(i, "days"))), this.sortEventSegs(r), u = 0; u < r.length; u++) o.append(r[u].el); this.el.empty().append(e) }, groupSegsByDay: function (n) { for (var i, r = [], t = 0; t < n.length; t++) i = n[t], (r[i.dayIndex] || (r[i.dayIndex] = [])).push(i); return r }, dayHeaderHtml: function (n) { var t = this.view, i = t.opt("listDayFormat"), r = t.opt("listDayAltFormat"); return '<tr class="fc-list-heading" data-date="' + n.format("YYYY-MM-DD") + '"><td class="' + t.widgetHeaderClass + '" colspan="3">' + (i ? t.buildGotoAnchorHtml(n, { "class": "fc-list-heading-main" }, u(n.format(i))) : "") + (r ? t.buildGotoAnchorHtml(n, { "class": "fc-list-heading-alt" }, u(n.format(r))) : "") + "<\/td><\/tr>" }, fgSegHtml: function (n) { var f, t = this.view, e = ["fc-list-item"].concat(this.getSegCustomClasses(n)), o = this.getSegBackgroundColor(n), i = n.event, r = i.url; return f = i.allDay ? t.getAllDayHtml() : t.isMultiDayEvent(i) ? n.isStart || n.isEnd ? u(this.getEventTimeText(n)) : t.getAllDayHtml() : u(this.getEventTimeText(i)), r && e.push("fc-has-url"), '<tr class="' + e.join(" ") + '">' + (this.displayEventTime ? '<td class="fc-list-item-time ' + t.widgetContentClass + '">' + (f || "") + "<\/td>" : "") + '<td class="fc-list-item-marker ' + t.widgetContentClass + '"><span class="fc-event-dot"' + (o ? ' style="background-color:' + o + '"' : "") + '><\/span><\/td><td class="fc-list-item-title ' + t.widgetContentClass + '"><a' + (r ? ' href="' + u(r) + '"' : "") + ">" + u(n.event.title || "") + "<\/a><\/td><\/tr>" } }), s.list = { "class": au, buttonTextKey: "list", defaults: { buttonText: "list", listDayFormat: "LL", noEventsMessage: "No events to display" } }, s.listDay = { type: "list", duration: { days: 1 }, defaults: { listDayFormat: "dddd" } }, s.listWeek = { type: "list", duration: { weeks: 1 }, defaults: { listDayFormat: "dddd", listDayAltFormat: "LL" } }, s.listMonth = { type: "list", duration: { month: 1 }, defaults: { listDayAltFormat: "dddd" } }, s.listYear = { type: "list", duration: { year: 1 }, defaults: { listDayAltFormat: "dddd" } }, i }); !function (n) { "function" == typeof define && define.amd ? define(["jquery", "moment"], n) : "object" == typeof exports ? module.exports = n(require("jquery"), require("moment")) : n(jQuery, moment) }(function (n, t) { !function () { !function () { return t.defineLocale("af", { months: "Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"), monthsShort: "Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"), weekdays: "Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"), weekdaysShort: "Son_Maa_Din_Woe_Don_Vry_Sat".split("_"), weekdaysMin: "So_Ma_Di_Wo_Do_Vr_Sa".split("_"), meridiemParse: /vm|nm/i, isPM: function (n) { return /^nm$/i.test(n) }, meridiem: function (n, t, i) { return n < 12 ? i ? "vm" : "VM" : i ? "nm" : "NM" }, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Vandag om] LT", nextDay: "[Môre om] LT", nextWeek: "dddd [om] LT", lastDay: "[Gister om] LT", lastWeek: "[Laas] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "oor %s", past: "%s gelede", s: "'n paar sekondes", m: "'n minuut", mm: "%d minute", h: "'n uur", hh: "%d ure", d: "'n dag", dd: "%d dae", M: "'n maand", MM: "%d maande", y: "'n jaar", yy: "%d jaar" }, ordinalParse: /\d{1,2}(ste|de)/, ordinal: function (n) { return n + (1 === n || 8 === n || n >= 20 ? "ste" : "de") }, week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("af", "af", { closeText: "Selekteer", prevText: "Vorige", nextText: "Volgende", currentText: "Vandag", monthNames: ["Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember"], monthNamesShort: ["Jan", "Feb", "Mrt", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des"], dayNames: ["Sondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrydag", "Saterdag"], dayNamesShort: ["Son", "Maa", "Din", "Woe", "Don", "Vry", "Sat"], dayNamesMin: ["So", "Ma", "Di", "Wo", "Do", "Vr", "Sa"], weekHeader: "Wk", dateFormat: "dd/mm/yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("af", { buttonText: { year: "Jaar", month: "Maand", week: "Week", day: "Dag", list: "Agenda" }, allDayHtml: "Heeldag", eventLimitText: "Addisionele", noEventsMessage: "Daar is geen gebeurtenis" }) }(), function () { !function () { var u = { 1: "١", 2: "٢", 3: "٣", 4: "٤", 5: "٥", 6: "٦", 7: "٧", 8: "٨", 9: "٩", 0: "٠" }, f = { "١": "1", "٢": "2", "٣": "3", "٤": "4", "٥": "5", "٦": "6", "٧": "7", "٨": "8", "٩": "9", "٠": "0" }, i = function (n) { return 0 === n ? 0 : 1 === n ? 1 : 2 === n ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5 }, e = { s: ["أقل من ثانية", "ثانية واحدة", ["ثانيتان", "ثانيتين"], "%d ثوان", "%d ثانية", "%d ثانية"], m: ["أقل من دقيقة", "دقيقة واحدة", ["دقيقتان", "دقيقتين"], "%d دقائق", "%d دقيقة", "%d دقيقة"], h: ["أقل من ساعة", "ساعة واحدة", ["ساعتان", "ساعتين"], "%d ساعات", "%d ساعة", "%d ساعة"], d: ["أقل من يوم", "يوم واحد", ["يومان", "يومين"], "%d أيام", "%d يومًا", "%d يوم"], M: ["أقل من شهر", "شهر واحد", ["شهران", "شهرين"], "%d أشهر", "%d شهرا", "%d شهر"], y: ["أقل من عام", "عام واحد", ["عامان", "عامين"], "%d أعوام", "%d عامًا", "%d عام"] }, n = function (n) { return function (t, r) { var f = i(t), u = e[n][i(t)]; return 2 === f && (u = u[r ? 0 : 1]), u.replace(/%d/i, t) } }, r = ["كانون الثاني يناير", "شباط فبراير", "آذار مارس", "نيسان أبريل", "أيار مايو", "حزيران يونيو", "تموز يوليو", "آب أغسطس", "أيلول سبتمبر", "تشرين الأول أكتوبر", "تشرين الثاني نوفمبر", "كانون الأول ديسمبر"]; return t.defineLocale("ar", { months: r, monthsShort: r, weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "D/‏M/‏YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /ص|م/, isPM: function (n) { return "م" === n }, meridiem: function (n) { return n < 12 ? "ص" : "م" }, calendar: { sameDay: "[اليوم عند الساعة] LT", nextDay: "[غدًا عند الساعة] LT", nextWeek: "dddd [عند الساعة] LT", lastDay: "[أمس عند الساعة] LT", lastWeek: "dddd [عند الساعة] LT", sameElse: "L" }, relativeTime: { future: "بعد %s", past: "منذ %s", s: n("s"), m: n("m"), mm: n("m"), h: n("h"), hh: n("h"), d: n("d"), dd: n("d"), M: n("M"), MM: n("M"), y: n("y"), yy: n("y") }, preparse: function (n) { return n.replace(/\u200f/g, "").replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (n) { return f[n] }).replace(/،/g, ",") }, postformat: function (n) { return n.replace(/\d/g, function (n) { return u[n] }).replace(/,/g, "،") }, week: { dow: 6, doy: 12 } }) }(); n.fullCalendar.datepickerLocale("ar", "ar", { closeText: "إغلاق", prevText: "&#x3C;السابق", nextText: "التالي&#x3E;", currentText: "اليوم", monthNames: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"], monthNamesShort: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], dayNames: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"], dayNamesShort: ["أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"], dayNamesMin: ["ح", "ن", "ث", "ر", "خ", "ج", "س"], weekHeader: "أسبوع", dateFormat: "dd/mm/yy", firstDay: 0, isRTL: !0, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("ar", { buttonText: { month: "شهر", week: "أسبوع", day: "يوم", list: "أجندة" }, allDayText: "اليوم كله", eventLimitText: "أخرى", noEventsMessage: "أي أحداث لعرض" }) }(), function () { !function () { return t.defineLocale("ar-dz", { months: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), monthsShort: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "أح_إث_ثلا_أر_خم_جم_سب".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, week: { dow: 0, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("ar-dz", "ar-DZ", { closeText: "إغلاق", prevText: "&#x3C;السابق", nextText: "التالي&#x3E;", currentText: "اليوم", monthNames: ["جانفي", "فيفري", "مارس", "أفريل", "ماي", "جوان", "جويلية", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"], monthNamesShort: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], dayNames: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"], dayNamesShort: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"], dayNamesMin: ["ح", "ن", "ث", "ر", "خ", "ج", "س"], weekHeader: "أسبوع", dateFormat: "dd/mm/yy", firstDay: 6, isRTL: !0, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("ar-dz", { buttonText: { month: "شهر", week: "أسبوع", day: "يوم", list: "أجندة" }, allDayText: "اليوم كله", eventLimitText: "أخرى", noEventsMessage: "أي أحداث لعرض" }) }(), function () { !function () { var u = { 1: "1", 2: "2", 3: "3", 4: "4", 5: "5", 6: "6", 7: "7", 8: "8", 9: "9", 0: "0" }, i = function (n) { return 0 === n ? 0 : 1 === n ? 1 : 2 === n ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5 }, f = { s: ["أقل من ثانية", "ثانية واحدة", ["ثانيتان", "ثانيتين"], "%d ثوان", "%d ثانية", "%d ثانية"], m: ["أقل من دقيقة", "دقيقة واحدة", ["دقيقتان", "دقيقتين"], "%d دقائق", "%d دقيقة", "%d دقيقة"], h: ["أقل من ساعة", "ساعة واحدة", ["ساعتان", "ساعتين"], "%d ساعات", "%d ساعة", "%d ساعة"], d: ["أقل من يوم", "يوم واحد", ["يومان", "يومين"], "%d أيام", "%d يومًا", "%d يوم"], M: ["أقل من شهر", "شهر واحد", ["شهران", "شهرين"], "%d أشهر", "%d شهرا", "%d شهر"], y: ["أقل من عام", "عام واحد", ["عامان", "عامين"], "%d أعوام", "%d عامًا", "%d عام"] }, n = function (n) { return function (t, r) { var e = i(t), u = f[n][i(t)]; return 2 === e && (u = u[r ? 0 : 1]), u.replace(/%d/i, t) } }, r = ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"]; return t.defineLocale("ar-ly", { months: r, monthsShort: r, weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "D/‏M/‏YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /ص|م/, isPM: function (n) { return "م" === n }, meridiem: function (n) { return n < 12 ? "ص" : "م" }, calendar: { sameDay: "[اليوم عند الساعة] LT", nextDay: "[غدًا عند الساعة] LT", nextWeek: "dddd [عند الساعة] LT", lastDay: "[أمس عند الساعة] LT", lastWeek: "dddd [عند الساعة] LT", sameElse: "L" }, relativeTime: { future: "بعد %s", past: "منذ %s", s: n("s"), m: n("m"), mm: n("m"), h: n("h"), hh: n("h"), d: n("d"), dd: n("d"), M: n("M"), MM: n("M"), y: n("y"), yy: n("y") }, preparse: function (n) { return n.replace(/\u200f/g, "").replace(/،/g, ",") }, postformat: function (n) { return n.replace(/\d/g, function (n) { return u[n] }).replace(/,/g, "،") }, week: { dow: 6, doy: 12 } }) }(); n.fullCalendar.datepickerLocale("ar-ly", "ar", { closeText: "إغلاق", prevText: "&#x3C;السابق", nextText: "التالي&#x3E;", currentText: "اليوم", monthNames: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"], monthNamesShort: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], dayNames: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"], dayNamesShort: ["أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"], dayNamesMin: ["ح", "ن", "ث", "ر", "خ", "ج", "س"], weekHeader: "أسبوع", dateFormat: "dd/mm/yy", firstDay: 0, isRTL: !0, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("ar-ly", { buttonText: { month: "شهر", week: "أسبوع", day: "يوم", list: "أجندة" }, allDayText: "اليوم كله", eventLimitText: "أخرى", noEventsMessage: "أي أحداث لعرض" }) }(), function () { !function () { return t.defineLocale("ar-ma", { months: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"), monthsShort: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"), weekdays: "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, week: { dow: 6, doy: 12 } }) }(); n.fullCalendar.datepickerLocale("ar-ma", "ar", { closeText: "إغلاق", prevText: "&#x3C;السابق", nextText: "التالي&#x3E;", currentText: "اليوم", monthNames: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"], monthNamesShort: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], dayNames: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"], dayNamesShort: ["أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"], dayNamesMin: ["ح", "ن", "ث", "ر", "خ", "ج", "س"], weekHeader: "أسبوع", dateFormat: "dd/mm/yy", firstDay: 0, isRTL: !0, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("ar-ma", { buttonText: { month: "شهر", week: "أسبوع", day: "يوم", list: "أجندة" }, allDayText: "اليوم كله", eventLimitText: "أخرى", noEventsMessage: "أي أحداث لعرض" }) }(), function () { !function () { var n = { 1: "١", 2: "٢", 3: "٣", 4: "٤", 5: "٥", 6: "٦", 7: "٧", 8: "٨", 9: "٩", 0: "٠" }, i = { "١": "1", "٢": "2", "٣": "3", "٤": "4", "٥": "5", "٦": "6", "٧": "7", "٨": "8", "٩": "9", "٠": "0" }; return t.defineLocale("ar-sa", { months: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), monthsShort: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /ص|م/, isPM: function (n) { return "م" === n }, meridiem: function (n) { return n < 12 ? "ص" : "م" }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, preparse: function (n) { return n.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (n) { return i[n] }).replace(/،/g, ",") }, postformat: function (t) { return t.replace(/\d/g, function (t) { return n[t] }).replace(/,/g, "،") }, week: { dow: 0, doy: 6 } }) }(); n.fullCalendar.datepickerLocale("ar-sa", "ar", { closeText: "إغلاق", prevText: "&#x3C;السابق", nextText: "التالي&#x3E;", currentText: "اليوم", monthNames: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"], monthNamesShort: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], dayNames: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"], dayNamesShort: ["أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"], dayNamesMin: ["ح", "ن", "ث", "ر", "خ", "ج", "س"], weekHeader: "أسبوع", dateFormat: "dd/mm/yy", firstDay: 0, isRTL: !0, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("ar-sa", { buttonText: { month: "شهر", week: "أسبوع", day: "يوم", list: "أجندة" }, allDayText: "اليوم كله", eventLimitText: "أخرى", noEventsMessage: "أي أحداث لعرض" }) }(), function () { !function () { return t.defineLocale("ar-tn", { months: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), monthsShort: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("ar-tn", "ar", { closeText: "إغلاق", prevText: "&#x3C;السابق", nextText: "التالي&#x3E;", currentText: "اليوم", monthNames: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"], monthNamesShort: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], dayNames: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"], dayNamesShort: ["أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"], dayNamesMin: ["ح", "ن", "ث", "ر", "خ", "ج", "س"], weekHeader: "أسبوع", dateFormat: "dd/mm/yy", firstDay: 0, isRTL: !0, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("ar-tn", { buttonText: { month: "شهر", week: "أسبوع", day: "يوم", list: "أجندة" }, allDayText: "اليوم كله", eventLimitText: "أخرى", noEventsMessage: "أي أحداث لعرض" }) }(), function () { !function () { return t.defineLocale("bg", { months: "януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"), monthsShort: "янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"), weekdays: "неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"), weekdaysShort: "нед_пон_вто_сря_чет_пет_съб".split("_"), weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "D.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY H:mm", LLLL: "dddd, D MMMM YYYY H:mm" }, calendar: { sameDay: "[Днес в] LT", nextDay: "[Утре в] LT", nextWeek: "dddd [в] LT", lastDay: "[Вчера в] LT", lastWeek: function () { switch (this.day()) { case 0: case 3: case 6: return "[В изминалата] dddd [в] LT"; case 1: case 2: case 4: case 5: return "[В изминалия] dddd [в] LT" } }, sameElse: "L" }, relativeTime: { future: "след %s", past: "преди %s", s: "няколко секунди", m: "минута", mm: "%d минути", h: "час", hh: "%d часа", d: "ден", dd: "%d дни", M: "месец", MM: "%d месеца", y: "година", yy: "%d години" }, ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/, ordinal: function (n) { var t = n % 10, i = n % 100; return 0 === n ? n + "-ев" : 0 === i ? n + "-ен" : i > 10 && i < 20 ? n + "-ти" : 1 === t ? n + "-ви" : 2 === t ? n + "-ри" : 7 === t || 8 === t ? n + "-ми" : n + "-ти" }, week: { dow: 1, doy: 7 } }) }(); n.fullCalendar.datepickerLocale("bg", "bg", { closeText: "затвори", prevText: "&#x3C;назад", nextText: "напред&#x3E;", nextBigText: "&#x3E;&#x3E;", currentText: "днес", monthNames: ["Януари", "Февруари", "Март", "Април", "Май", "Юни", "Юли", "Август", "Септември", "Октомври", "Ноември", "Декември"], monthNamesShort: ["Яну", "Фев", "Мар", "Апр", "Май", "Юни", "Юли", "Авг", "Сеп", "Окт", "Нов", "Дек"], dayNames: ["Неделя", "Понеделник", "Вторник", "Сряда", "Четвъртък", "Петък", "Събота"], dayNamesShort: ["Нед", "Пон", "Вто", "Сря", "Чет", "Пет", "Съб"], dayNamesMin: ["Не", "По", "Вт", "Ср", "Че", "Пе", "Съ"], weekHeader: "Wk", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("bg", { buttonText: { month: "Месец", week: "Седмица", day: "Ден", list: "График" }, allDayText: "Цял ден", eventLimitText: function (n) { return "+още " + n }, noEventsMessage: "Няма събития за показване" }) }(), function () { !function () { return t.defineLocale("ca", { months: "gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"), monthsShort: "gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"), monthsParseExact: !0, weekdays: "diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"), weekdaysShort: "dg._dl._dt._dc._dj._dv._ds.".split("_"), weekdaysMin: "Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY H:mm", LLLL: "dddd D MMMM YYYY H:mm" }, calendar: { sameDay: function () { return "[avui a " + (1 !== this.hours() ? "les" : "la") + "] LT" }, nextDay: function () { return "[demà a " + (1 !== this.hours() ? "les" : "la") + "] LT" }, nextWeek: function () { return "dddd [a " + (1 !== this.hours() ? "les" : "la") + "] LT" }, lastDay: function () { return "[ahir a " + (1 !== this.hours() ? "les" : "la") + "] LT" }, lastWeek: function () { return "[el] dddd [passat a " + (1 !== this.hours() ? "les" : "la") + "] LT" }, sameElse: "L" }, relativeTime: { future: "d'aquí %s", past: "fa %s", s: "uns segons", m: "un minut", mm: "%d minuts", h: "una hora", hh: "%d hores", d: "un dia", dd: "%d dies", M: "un mes", MM: "%d mesos", y: "un any", yy: "%d anys" }, ordinalParse: /\d{1,2}(r|n|t|è|a)/, ordinal: function (n, t) { var i = 1 === n ? "r" : 2 === n ? "n" : 3 === n ? "r" : 4 === n ? "t" : "è"; return "w" !== t && "W" !== t || (i = "a"), n + i }, week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("ca", "ca", { closeText: "Tanca", prevText: "Anterior", nextText: "Següent", currentText: "Avui", monthNames: ["gener", "febrer", "març", "abril", "maig", "juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre"], monthNamesShort: ["gen", "feb", "març", "abr", "maig", "juny", "jul", "ag", "set", "oct", "nov", "des"], dayNames: ["diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"], dayNamesShort: ["dg", "dl", "dt", "dc", "dj", "dv", "ds"], dayNamesMin: ["dg", "dl", "dt", "dc", "dj", "dv", "ds"], weekHeader: "Set", dateFormat: "dd/mm/yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("ca", { buttonText: { month: "Mes", week: "Setmana", day: "Dia", list: "Agenda" }, allDayText: "Tot el dia", eventLimitText: "més", noEventsMessage: "No hi ha esdeveniments per mostrar" }) }(), function () { !function () { function i(n) { return n > 1 && n < 5 && 1 != ~~(n / 10) } function n(n, t, r, u) { var f = n + " "; switch (r) { case "s": return t || u ? "pár sekund" : "pár sekundami"; case "m": return t ? "minuta" : u ? "minutu" : "minutou"; case "mm": return t || u ? f + (i(n) ? "minuty" : "minut") : f + "minutami"; case "h": return t ? "hodina" : u ? "hodinu" : "hodinou"; case "hh": return t || u ? f + (i(n) ? "hodiny" : "hodin") : f + "hodinami"; case "d": return t || u ? "den" : "dnem"; case "dd": return t || u ? f + (i(n) ? "dny" : "dní") : f + "dny"; case "M": return t || u ? "měsíc" : "měsícem"; case "MM": return t || u ? f + (i(n) ? "měsíce" : "měsíců") : f + "měsíci"; case "y": return t || u ? "rok" : "rokem"; case "yy": return t || u ? f + (i(n) ? "roky" : "let") : f + "lety" } } var r = "leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"), u = "led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"); return t.defineLocale("cs", { months: r, monthsShort: u, monthsParse: function (n, t) { for (var r = [], i = 0; i < 12; i++) r[i] = new RegExp("^" + n[i] + "$|^" + t[i] + "$", "i"); return r }(r, u), shortMonthsParse: function (n) { for (var i = [], t = 0; t < 12; t++) i[t] = new RegExp("^" + n[t] + "$", "i"); return i }(u), longMonthsParse: function (n) { for (var i = [], t = 0; t < 12; t++) i[t] = new RegExp("^" + n[t] + "$", "i"); return i }(r), weekdays: "neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"), weekdaysShort: "ne_po_út_st_čt_pá_so".split("_"), weekdaysMin: "ne_po_út_st_čt_pá_so".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd D. MMMM YYYY H:mm", l: "D. M. YYYY" }, calendar: { sameDay: "[dnes v] LT", nextDay: "[zítra v] LT", nextWeek: function () { switch (this.day()) { case 0: return "[v neděli v] LT"; case 1: case 2: return "[v] dddd [v] LT"; case 3: return "[ve středu v] LT"; case 4: return "[ve čtvrtek v] LT"; case 5: return "[v pátek v] LT"; case 6: return "[v sobotu v] LT" } }, lastDay: "[včera v] LT", lastWeek: function () { switch (this.day()) { case 0: return "[minulou neděli v] LT"; case 1: case 2: return "[minulé] dddd [v] LT"; case 3: return "[minulou středu v] LT"; case 4: case 5: return "[minulý] dddd [v] LT"; case 6: return "[minulou sobotu v] LT" } }, sameElse: "L" }, relativeTime: { future: "za %s", past: "před %s", s: n, m: n, mm: n, h: n, hh: n, d: n, dd: n, M: n, MM: n, y: n, yy: n }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("cs", "cs", { closeText: "Zavřít", prevText: "&#x3C;Dříve", nextText: "Později&#x3E;", currentText: "Nyní", monthNames: ["leden", "únor", "březen", "duben", "květen", "červen", "červenec", "srpen", "září", "říjen", "listopad", "prosinec"], monthNamesShort: ["led", "úno", "bře", "dub", "kvě", "čer", "čvc", "srp", "zář", "říj", "lis", "pro"], dayNames: ["neděle", "pondělí", "úterý", "středa", "čtvrtek", "pátek", "sobota"], dayNamesShort: ["ne", "po", "út", "st", "čt", "pá", "so"], dayNamesMin: ["ne", "po", "út", "st", "čt", "pá", "so"], weekHeader: "Týd", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("cs", { buttonText: { month: "Měsíc", week: "Týden", day: "Den", list: "Agenda" }, allDayText: "Celý den", eventLimitText: function (n) { return "+další: " + n }, noEventsMessage: "Žádné akce k zobrazení" }) }(), function () { !function () { return t.defineLocale("da", { months: "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"), monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"), weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"), weekdaysShort: "søn_man_tir_ons_tor_fre_lør".split("_"), weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd [d.] D. MMMM YYYY HH:mm" }, calendar: { sameDay: "[I dag kl.] LT", nextDay: "[I morgen kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[I går kl.] LT", lastWeek: "[sidste] dddd [kl] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "%s siden", s: "få sekunder", m: "et minut", mm: "%d minutter", h: "en time", hh: "%d timer", d: "en dag", dd: "%d dage", M: "en måned", MM: "%d måneder", y: "et år", yy: "%d år" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("da", "da", { closeText: "Luk", prevText: "&#x3C;Forrige", nextText: "Næste&#x3E;", currentText: "Idag", monthNames: ["Januar", "Februar", "Marts", "April", "Maj", "Juni", "Juli", "August", "September", "Oktober", "November", "December"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"], dayNames: ["Søndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "Lørdag"], dayNamesShort: ["Søn", "Man", "Tir", "Ons", "Tor", "Fre", "Lør"], dayNamesMin: ["Sø", "Ma", "Ti", "On", "To", "Fr", "Lø"], weekHeader: "Uge", dateFormat: "dd-mm-yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("da", { buttonText: { month: "Måned", week: "Uge", day: "Dag", list: "Agenda" }, allDayText: "Hele dagen", eventLimitText: "flere", noEventsMessage: "Ingen arrangementer at vise" }) }(), function () { !function () { function n(n, t, i) { var r = { m: ["eine Minute", "einer Minute"], h: ["eine Stunde", "einer Stunde"], d: ["ein Tag", "einem Tag"], dd: [n + " Tage", n + " Tagen"], M: ["ein Monat", "einem Monat"], MM: [n + " Monate", n + " Monaten"], y: ["ein Jahr", "einem Jahr"], yy: [n + " Jahre", n + " Jahren"] }; return t ? r[i][0] : r[i][1] } return t.defineLocale("de", { months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"), monthsParseExact: !0, weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd, D. MMMM YYYY HH:mm" }, calendar: { sameDay: "[heute um] LT [Uhr]", sameElse: "L", nextDay: "[morgen um] LT [Uhr]", nextWeek: "dddd [um] LT [Uhr]", lastDay: "[gestern um] LT [Uhr]", lastWeek: "[letzten] dddd [um] LT [Uhr]" }, relativeTime: { future: "in %s", past: "vor %s", s: "ein paar Sekunden", m: n, mm: "%d Minuten", h: n, hh: "%d Stunden", d: n, dd: n, M: n, MM: n, y: n, yy: n }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("de", "de", { closeText: "Schließen", prevText: "&#x3C;Zurück", nextText: "Vor&#x3E;", currentText: "Heute", monthNames: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"], monthNamesShort: ["Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"], dayNames: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"], dayNamesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"], dayNamesMin: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"], weekHeader: "KW", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("de", { buttonText: { month: "Monat", week: "Woche", day: "Tag", list: "Terminübersicht" }, allDayText: "Ganztägig", eventLimitText: function (n) { return "+ weitere " + n }, noEventsMessage: "Keine Ereignisse anzuzeigen" }) }(), function () { !function () { function n(n, t, i) { var r = { m: ["eine Minute", "einer Minute"], h: ["eine Stunde", "einer Stunde"], d: ["ein Tag", "einem Tag"], dd: [n + " Tage", n + " Tagen"], M: ["ein Monat", "einem Monat"], MM: [n + " Monate", n + " Monaten"], y: ["ein Jahr", "einem Jahr"], yy: [n + " Jahre", n + " Jahren"] }; return t ? r[i][0] : r[i][1] } return t.defineLocale("de-at", { months: "Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"), monthsParseExact: !0, weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd, D. MMMM YYYY HH:mm" }, calendar: { sameDay: "[heute um] LT [Uhr]", sameElse: "L", nextDay: "[morgen um] LT [Uhr]", nextWeek: "dddd [um] LT [Uhr]", lastDay: "[gestern um] LT [Uhr]", lastWeek: "[letzten] dddd [um] LT [Uhr]" }, relativeTime: { future: "in %s", past: "vor %s", s: "ein paar Sekunden", m: n, mm: "%d Minuten", h: n, hh: "%d Stunden", d: n, dd: n, M: n, MM: n, y: n, yy: n }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("de-at", "de", { closeText: "Schließen", prevText: "&#x3C;Zurück", nextText: "Vor&#x3E;", currentText: "Heute", monthNames: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"], monthNamesShort: ["Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"], dayNames: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"], dayNamesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"], dayNamesMin: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"], weekHeader: "KW", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("de-at", { buttonText: { month: "Monat", week: "Woche", day: "Tag", list: "Terminübersicht" }, allDayText: "Ganztägig", eventLimitText: function (n) { return "+ weitere " + n }, noEventsMessage: "Keine Ereignisse anzuzeigen" }) }(), function () { !function () { function n(n) { return n instanceof Function || "[object Function]" === Object.prototype.toString.call(n) } return t.defineLocale("el", { monthsNominativeEl: "Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"), monthsGenitiveEl: "Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"), months: function (n, t) { return /D/.test(t.substring(0, t.indexOf("MMMM"))) ? this._monthsGenitiveEl[n.month()] : this._monthsNominativeEl[n.month()] }, monthsShort: "Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"), weekdays: "Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"), weekdaysShort: "Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"), weekdaysMin: "Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"), meridiem: function (n, t, i) { return n > 11 ? i ? "μμ" : "ΜΜ" : i ? "πμ" : "ΠΜ" }, isPM: function (n) { return "μ" === (n + "").toLowerCase()[0] }, meridiemParse: /[ΠΜ]\.?Μ?\.?/i, longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendarEl: { sameDay: "[Σήμερα {}] LT", nextDay: "[Αύριο {}] LT", nextWeek: "dddd [{}] LT", lastDay: "[Χθες {}] LT", lastWeek: function () { switch (this.day()) { case 6: return "[το προηγούμενο] dddd [{}] LT"; default: return "[την προηγούμενη] dddd [{}] LT" } }, sameElse: "L" }, calendar: function (t, i) { var r = this._calendarEl[t], u = i && i.hours(); return n(r) && (r = r.apply(i)), r.replace("{}", u % 12 == 1 ? "στη" : "στις") }, relativeTime: { future: "σε %s", past: "%s πριν", s: "λίγα δευτερόλεπτα", m: "ένα λεπτό", mm: "%d λεπτά", h: "μία ώρα", hh: "%d ώρες", d: "μία μέρα", dd: "%d μέρες", M: "ένας μήνας", MM: "%d μήνες", y: "ένας χρόνος", yy: "%d χρόνια" }, ordinalParse: /\d{1,2}η/, ordinal: "%dη", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("el", "el", { closeText: "Κλείσιμο", prevText: "Προηγούμενος", nextText: "Επόμενος", currentText: "Σήμερα", monthNames: ["Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάιος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος"], monthNamesShort: ["Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαι", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ"], dayNames: ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"], dayNamesShort: ["Κυρ", "Δευ", "Τρι", "Τετ", "Πεμ", "Παρ", "Σαβ"], dayNamesMin: ["Κυ", "Δε", "Τρ", "Τε", "Πε", "Πα", "Σα"], weekHeader: "Εβδ", dateFormat: "dd/mm/yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("el", { buttonText: { month: "Μήνας", week: "Εβδομάδα", day: "Ημέρα", list: "Ατζέντα" }, allDayText: "Ολοήμερο", eventLimitText: "περισσότερα", noEventsMessage: "Δεν υπάρχουν γεγονότα για να εμφανιστεί" }) }(), function () { !function () { return t.defineLocale("en-au", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, ordinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function (n) { var t = n % 10, i = 1 == ~~(n % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th"; return n + i }, week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("en-au", "en-AU", { closeText: "Done", prevText: "Prev", nextText: "Next", currentText: "Today", monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], weekHeader: "Wk", dateFormat: "dd/mm/yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("en-au") }(), function () { !function () { return t.defineLocale("en-ca", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "YYYY-MM-DD", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, ordinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function (n) { var t = n % 10, i = 1 == ~~(n % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th"; return n + i } }) }(); n.fullCalendar.locale("en-ca") }(), function () { !function () { return t.defineLocale("en-gb", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, ordinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function (n) { var t = n % 10, i = 1 == ~~(n % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th"; return n + i }, week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("en-gb", "en-GB", { closeText: "Done", prevText: "Prev", nextText: "Next", currentText: "Today", monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], weekHeader: "Wk", dateFormat: "dd/mm/yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("en-gb") }(), function () { !function () { return t.defineLocale("en-ie", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, ordinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function (n) { var t = n % 10, i = 1 == ~~(n % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th"; return n + i }, week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.locale("en-ie") }(), function () { !function () { return t.defineLocale("en-nz", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, ordinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function (n) { var t = n % 10, i = 1 == ~~(n % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th"; return n + i }, week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("en-nz", "en-NZ", { closeText: "Done", prevText: "Prev", nextText: "Next", currentText: "Today", monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], weekHeader: "Wk", dateFormat: "dd/mm/yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("en-nz") }(), function () { !function () { var n = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"), i = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"); return t.defineLocale("es", { months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), monthsShort: function (t, r) { return /-MMM-/.test(r) ? i[t.month()] : n[t.month()] }, monthsParseExact: !0, weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"), weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"), weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY H:mm", LLLL: "dddd, D [de] MMMM [de] YYYY H:mm" }, calendar: { sameDay: function () { return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, nextDay: function () { return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, nextWeek: function () { return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, lastDay: function () { return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, lastWeek: function () { return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, sameElse: "L" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un día", dd: "%d días", M: "un mes", MM: "%d meses", y: "un año", yy: "%d años" }, ordinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("es", "es", { closeText: "Cerrar", prevText: "&#x3C;Ant", nextText: "Sig&#x3E;", currentText: "Hoy", monthNames: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"], monthNamesShort: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"], dayNames: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"], dayNamesShort: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"], dayNamesMin: ["D", "L", "M", "X", "J", "V", "S"], weekHeader: "Sm", dateFormat: "dd/mm/yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("es", { buttonText: { month: "Mes", week: "Semana", day: "Día", list: "Agenda" }, allDayHtml: "Todo<br/>el día", eventLimitText: "más", noEventsMessage: "No hay eventos para mostrar" }) }(), function () { !function () { var n = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"), i = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"); return t.defineLocale("es-do", { months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), monthsShort: function (t, r) { return /-MMM-/.test(r) ? i[t.month()] : n[t.month()] }, monthsParseExact: !0, weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"), weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"), weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY h:mm A", LLLL: "dddd, D [de] MMMM [de] YYYY h:mm A" }, calendar: { sameDay: function () { return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, nextDay: function () { return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, nextWeek: function () { return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, lastDay: function () { return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, lastWeek: function () { return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, sameElse: "L" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un día", dd: "%d días", M: "un mes", MM: "%d meses", y: "un año", yy: "%d años" }, ordinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("es-do", "es", { closeText: "Cerrar", prevText: "&#x3C;Ant", nextText: "Sig&#x3E;", currentText: "Hoy", monthNames: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"], monthNamesShort: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"], dayNames: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"], dayNamesShort: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"], dayNamesMin: ["D", "L", "M", "X", "J", "V", "S"], weekHeader: "Sm", dateFormat: "dd/mm/yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("es-do", { buttonText: { month: "Mes", week: "Semana", day: "Día", list: "Agenda" }, allDayHtml: "Todo<br/>el día", eventLimitText: "más", noEventsMessage: "No hay eventos para mostrar" }) }(), function () { !function () { return t.defineLocale("eu", { months: "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"), monthsShort: "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"), monthsParseExact: !0, weekdays: "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"), weekdaysShort: "ig._al._ar._az._og._ol._lr.".split("_"), weekdaysMin: "ig_al_ar_az_og_ol_lr".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "YYYY[ko] MMMM[ren] D[a]", LLL: "YYYY[ko] MMMM[ren] D[a] HH:mm", LLLL: "dddd, YYYY[ko] MMMM[ren] D[a] HH:mm", l: "YYYY-M-D", ll: "YYYY[ko] MMM D[a]", lll: "YYYY[ko] MMM D[a] HH:mm", llll: "ddd, YYYY[ko] MMM D[a] HH:mm" }, calendar: { sameDay: "[gaur] LT[etan]", nextDay: "[bihar] LT[etan]", nextWeek: "dddd LT[etan]", lastDay: "[atzo] LT[etan]", lastWeek: "[aurreko] dddd LT[etan]", sameElse: "L" }, relativeTime: { future: "%s barru", past: "duela %s", s: "segundo batzuk", m: "minutu bat", mm: "%d minutu", h: "ordu bat", hh: "%d ordu", d: "egun bat", dd: "%d egun", M: "hilabete bat", MM: "%d hilabete", y: "urte bat", yy: "%d urte" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }(); n.fullCalendar.datepickerLocale("eu", "eu", { closeText: "Egina", prevText: "&#x3C;Aur", nextText: "Hur&#x3E;", currentText: "Gaur", monthNames: ["urtarrila", "otsaila", "martxoa", "apirila", "maiatza", "ekaina", "uztaila", "abuztua", "iraila", "urria", "azaroa", "abendua"], monthNamesShort: ["urt.", "ots.", "mar.", "api.", "mai.", "eka.", "uzt.", "abu.", "ira.", "urr.", "aza.", "abe."], dayNames: ["igandea", "astelehena", "asteartea", "asteazkena", "osteguna", "ostirala", "larunbata"], dayNamesShort: ["ig.", "al.", "ar.", "az.", "og.", "ol.", "lr."], dayNamesMin: ["ig", "al", "ar", "az", "og", "ol", "lr"], weekHeader: "As", dateFormat: "yy-mm-dd", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("eu", { buttonText: { month: "Hilabetea", week: "Astea", day: "Eguna", list: "Agenda" }, allDayHtml: "Egun<br/>osoa", eventLimitText: "gehiago", noEventsMessage: "Ez dago ekitaldirik erakusteko" }) }(), function () { !function () { var n = { 1: "۱", 2: "۲", 3: "۳", 4: "۴", 5: "۵", 6: "۶", 7: "۷", 8: "۸", 9: "۹", 0: "۰" }, i = { "۱": "1", "۲": "2", "۳": "3", "۴": "4", "۵": "5", "۶": "6", "۷": "7", "۸": "8", "۹": "9", "۰": "0" }; return t.defineLocale("fa", { months: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"), monthsShort: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"), weekdays: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"), weekdaysShort: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"), weekdaysMin: "ی_د_س_چ_پ_ج_ش".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, meridiemParse: /قبل از ظهر|بعد از ظهر/, isPM: function (n) { return /بعد از ظهر/.test(n) }, meridiem: function (n) { return n < 12 ? "قبل از ظهر" : "بعد از ظهر" }, calendar: { sameDay: "[امروز ساعت] LT", nextDay: "[فردا ساعت] LT", nextWeek: "dddd [ساعت] LT", lastDay: "[دیروز ساعت] LT", lastWeek: "dddd [پیش] [ساعت] LT", sameElse: "L" }, relativeTime: { future: "در %s", past: "%s پیش", s: "چندین ثانیه", m: "یک دقیقه", mm: "%d دقیقه", h: "یک ساعت", hh: "%d ساعت", d: "یک روز", dd: "%d روز", M: "یک ماه", MM: "%d ماه", y: "یک سال", yy: "%d سال" }, preparse: function (n) { return n.replace(/[۰-۹]/g, function (n) { return i[n] }).replace(/،/g, ",") }, postformat: function (t) { return t.replace(/\d/g, function (t) { return n[t] }).replace(/,/g, "،") }, ordinalParse: /\d{1,2}م/, ordinal: "%dم", week: { dow: 6, doy: 12 } }) }(); n.fullCalendar.datepickerLocale("fa", "fa", { closeText: "بستن", prevText: "&#x3C;قبلی", nextText: "بعدی&#x3E;", currentText: "امروز", monthNames: ["ژانویه", "فوریه", "مارس", "آوریل", "مه", "ژوئن", "ژوئیه", "اوت", "سپتامبر", "اکتبر", "نوامبر", "دسامبر"], monthNamesShort: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], dayNames: ["يکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"], dayNamesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"], dayNamesMin: ["ی", "د", "س", "چ", "پ", "ج", "ش"], weekHeader: "هف", dateFormat: "yy/mm/dd", firstDay: 6, isRTL: !0, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("fa", { buttonText: { month: "ماه", week: "هفته", day: "روز", list: "برنامه" }, allDayText: "تمام روز", eventLimitText: function (n) { return "بیش از " + n }, noEventsMessage: "هیچ رویدادی به نمایش" }) }(), function () { !function () { function n(n, t, i, u) { var f = ""; switch (i) { case "s": return u ? "muutaman sekunnin" : "muutama sekunti"; case "m": return u ? "minuutin" : "minuutti"; case "mm": f = u ? "minuutin" : "minuuttia"; break; case "h": return u ? "tunnin" : "tunti"; case "hh": f = u ? "tunnin" : "tuntia"; break; case "d": return u ? "päivän" : "päivä"; case "dd": f = u ? "päivän" : "päivää"; break; case "M": return u ? "kuukauden" : "kuukausi"; case "MM": f = u ? "kuukauden" : "kuukautta"; break; case "y": return u ? "vuoden" : "vuosi"; case "yy": f = u ? "vuoden" : "vuotta" } return r(n, u) + " " + f } function r(n, t) { return n < 10 ? t ? u[n] : i[n] : n } var i = "nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "), u = ["nolla", "yhden", "kahden", "kolmen", "neljän", "viiden", "kuuden", i[7], i[8], i[9]]; return t.defineLocale("fi", { months: "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"), monthsShort: "tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"), weekdays: "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"), weekdaysShort: "su_ma_ti_ke_to_pe_la".split("_"), weekdaysMin: "su_ma_ti_ke_to_pe_la".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD.MM.YYYY", LL: "Do MMMM[ta] YYYY", LLL: "Do MMMM[ta] YYYY, [klo] HH.mm", LLLL: "dddd, Do MMMM[ta] YYYY, [klo] HH.mm", l: "D.M.YYYY", ll: "Do MMM YYYY", lll: "Do MMM YYYY, [klo] HH.mm", llll: "ddd, Do MMM YYYY, [klo] HH.mm" }, calendar: { sameDay: "[tänään] [klo] LT", nextDay: "[huomenna] [klo] LT", nextWeek: "dddd [klo] LT", lastDay: "[eilen] [klo] LT", lastWeek: "[viime] dddd[na] [klo] LT", sameElse: "L" }, relativeTime: { future: "%s päästä", past: "%s sitten", s: n, m: n, mm: n, h: n, hh: n, d: n, dd: n, M: n, MM: n, y: n, yy: n }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("fi", "fi", { closeText: "Sulje", prevText: "&#xAB;Edellinen", nextText: "Seuraava&#xBB;", currentText: "Tänään", monthNames: ["Tammikuu", "Helmikuu", "Maaliskuu", "Huhtikuu", "Toukokuu", "Kesäkuu", "Heinäkuu", "Elokuu", "Syyskuu", "Lokakuu", "Marraskuu", "Joulukuu"], monthNamesShort: ["Tammi", "Helmi", "Maalis", "Huhti", "Touko", "Kesä", "Heinä", "Elo", "Syys", "Loka", "Marras", "Joulu"], dayNamesShort: ["Su", "Ma", "Ti", "Ke", "To", "Pe", "La"], dayNames: ["Sunnuntai", "Maanantai", "Tiistai", "Keskiviikko", "Torstai", "Perjantai", "Lauantai"], dayNamesMin: ["Su", "Ma", "Ti", "Ke", "To", "Pe", "La"], weekHeader: "Vk", dateFormat: "d.m.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("fi", { buttonText: { month: "Kuukausi", week: "Viikko", day: "Päivä", list: "Tapahtumat" }, allDayText: "Koko päivä", eventLimitText: "lisää", noEventsMessage: "Ei näytettäviä tapahtumia" }) }(), function () { !function () { return t.defineLocale("fr", { months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"), monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"), monthsParseExact: !0, weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Aujourd'hui à] LT", nextDay: "[Demain à] LT", nextWeek: "dddd [à] LT", lastDay: "[Hier à] LT", lastWeek: "dddd [dernier à] LT", sameElse: "L" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, ordinalParse: /\d{1,2}(er|)/, ordinal: function (n) { return n + (1 === n ? "er" : "") }, week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("fr", "fr", { closeText: "Fermer", prevText: "Précédent", nextText: "Suivant", currentText: "Aujourd'hui", monthNames: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre"], monthNamesShort: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc."], dayNames: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"], dayNamesShort: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."], dayNamesMin: ["D", "L", "M", "M", "J", "V", "S"], weekHeader: "Sem.", dateFormat: "dd/mm/yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("fr", { buttonText: { year: "Année", month: "Mois", week: "Semaine", day: "Jour", list: "Mon planning" }, allDayHtml: "Toute la<br/>journée", eventLimitText: "en plus", noEventsMessage: "Aucun événement à afficher" }) }(), function () { !function () { return t.defineLocale("fr-ca", { months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"), monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"), monthsParseExact: !0, weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Aujourd'hui à] LT", nextDay: "[Demain à] LT", nextWeek: "dddd [à] LT", lastDay: "[Hier à] LT", lastWeek: "dddd [dernier à] LT", sameElse: "L" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, ordinalParse: /\d{1,2}(er|e)/, ordinal: function (n) { return n + (1 === n ? "er" : "e") } }) }(); n.fullCalendar.datepickerLocale("fr-ca", "fr-CA", { closeText: "Fermer", prevText: "Précédent", nextText: "Suivant", currentText: "Aujourd'hui", monthNames: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre"], monthNamesShort: ["janv.", "févr.", "mars", "avril", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc."], dayNames: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"], dayNamesShort: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."], dayNamesMin: ["D", "L", "M", "M", "J", "V", "S"], weekHeader: "Sem.", dateFormat: "yy-mm-dd", firstDay: 0, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("fr-ca", { buttonText: { year: "Année", month: "Mois", week: "Semaine", day: "Jour", list: "Mon planning" }, allDayHtml: "Toute la<br/>journée", eventLimitText: "en plus", noEventsMessage: "Aucun événement à afficher" }) }(), function () { !function () { return t.defineLocale("fr-ch", { months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"), monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"), monthsParseExact: !0, weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Aujourd'hui à] LT", nextDay: "[Demain à] LT", nextWeek: "dddd [à] LT", lastDay: "[Hier à] LT", lastWeek: "dddd [dernier à] LT", sameElse: "L" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, ordinalParse: /\d{1,2}(er|e)/, ordinal: function (n) { return n + (1 === n ? "er" : "e") }, week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("fr-ch", "fr-CH", { closeText: "Fermer", prevText: "&#x3C;Préc", nextText: "Suiv&#x3E;", currentText: "Courant", monthNames: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre"], monthNamesShort: ["janv.", "févr.", "mars", "avril", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc."], dayNames: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"], dayNamesShort: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."], dayNamesMin: ["D", "L", "M", "M", "J", "V", "S"], weekHeader: "Sm", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("fr-ch", { buttonText: { year: "Année", month: "Mois", week: "Semaine", day: "Jour", list: "Mon planning" }, allDayHtml: "Toute la<br/>journée", eventLimitText: "en plus", noEventsMessage: "Aucun événement à afficher" }) }(), function () { !function () { return t.defineLocale("gl", { months: "xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"), monthsShort: "xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "domingo_luns_martes_mércores_xoves_venres_sábado".split("_"), weekdaysShort: "dom._lun._mar._mér._xov._ven._sáb.".split("_"), weekdaysMin: "do_lu_ma_mé_xo_ve_sá".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY H:mm", LLLL: "dddd, D [de] MMMM [de] YYYY H:mm" }, calendar: { sameDay: function () { return "[hoxe " + (1 !== this.hours() ? "ás" : "á") + "] LT" }, nextDay: function () { return "[mañá " + (1 !== this.hours() ? "ás" : "á") + "] LT" }, nextWeek: function () { return "dddd [" + (1 !== this.hours() ? "ás" : "a") + "] LT" }, lastDay: function () { return "[onte " + (1 !== this.hours() ? "á" : "a") + "] LT" }, lastWeek: function () { return "[o] dddd [pasado " + (1 !== this.hours() ? "ás" : "a") + "] LT" }, sameElse: "L" }, relativeTime: { future: function (n) { return 0 === n.indexOf("un") ? "n" + n : "en " + n }, past: "hai %s", s: "uns segundos", m: "un minuto", mm: "%d minutos", h: "unha hora", hh: "%d horas", d: "un día", dd: "%d días", M: "un mes", MM: "%d meses", y: "un ano", yy: "%d anos" }, ordinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("gl", "gl", { closeText: "Pechar", prevText: "&#x3C;Ant", nextText: "Seg&#x3E;", currentText: "Hoxe", monthNames: ["Xaneiro", "Febreiro", "Marzo", "Abril", "Maio", "Xuño", "Xullo", "Agosto", "Setembro", "Outubro", "Novembro", "Decembro"], monthNamesShort: ["Xan", "Feb", "Mar", "Abr", "Mai", "Xuñ", "Xul", "Ago", "Set", "Out", "Nov", "Dec"], dayNames: ["Domingo", "Luns", "Martes", "Mércores", "Xoves", "Venres", "Sábado"], dayNamesShort: ["Dom", "Lun", "Mar", "Mér", "Xov", "Ven", "Sáb"], dayNamesMin: ["Do", "Lu", "Ma", "Mé", "Xo", "Ve", "Sá"], weekHeader: "Sm", dateFormat: "dd/mm/yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("gl", { buttonText: { month: "Mes", week: "Semana", day: "Día", list: "Axenda" }, allDayHtml: "Todo<br/>o día", eventLimitText: "máis", noEventsMessage: "Non hai eventos para amosar" }) }(), function () { !function () { return t.defineLocale("he", { months: "ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"), monthsShort: "ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"), weekdays: "ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"), weekdaysShort: "א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"), weekdaysMin: "א_ב_ג_ד_ה_ו_ש".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [ב]MMMM YYYY", LLL: "D [ב]MMMM YYYY HH:mm", LLLL: "dddd, D [ב]MMMM YYYY HH:mm", l: "D/M/YYYY", ll: "D MMM YYYY", lll: "D MMM YYYY HH:mm", llll: "ddd, D MMM YYYY HH:mm" }, calendar: { sameDay: "[היום ב־]LT", nextDay: "[מחר ב־]LT", nextWeek: "dddd [בשעה] LT", lastDay: "[אתמול ב־]LT", lastWeek: "[ביום] dddd [האחרון בשעה] LT", sameElse: "L" }, relativeTime: { future: "בעוד %s", past: "לפני %s", s: "מספר שניות", m: "דקה", mm: "%d דקות", h: "שעה", hh: function (n) { return 2 === n ? "שעתיים" : n + " שעות" }, d: "יום", dd: function (n) { return 2 === n ? "יומיים" : n + " ימים" }, M: "חודש", MM: function (n) { return 2 === n ? "חודשיים" : n + " חודשים" }, y: "שנה", yy: function (n) { return 2 === n ? "שנתיים" : n % 10 == 0 && 10 !== n ? n + " שנה" : n + " שנים" } }, meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i, isPM: function (n) { return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(n) }, meridiem: function (n, t, i) { return n < 5 ? "לפנות בוקר" : n < 10 ? "בבוקר" : n < 12 ? i ? 'לפנה"צ' : "לפני הצהריים" : n < 18 ? i ? 'אחה"צ' : "אחרי הצהריים" : "בערב" } }) }(); n.fullCalendar.datepickerLocale("he", "he", { closeText: "סגור", prevText: "&#x3C;הקודם", nextText: "הבא&#x3E;", currentText: "היום", monthNames: ["ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר"], monthNamesShort: ["ינו", "פבר", "מרץ", "אפר", "מאי", "יוני", "יולי", "אוג", "ספט", "אוק", "נוב", "דצמ"], dayNames: ["ראשון", "שני", "שלישי", "רביעי", "חמישי", "שישי", "שבת"], dayNamesShort: ["א'", "ב'", "ג'", "ד'", "ה'", "ו'", "שבת"], dayNamesMin: ["א'", "ב'", "ג'", "ד'", "ה'", "ו'", "שבת"], weekHeader: "Wk", dateFormat: "dd/mm/yy", firstDay: 0, isRTL: !0, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("he", { buttonText: { month: "חודש", week: "שבוע", day: "יום", list: "סדר יום" }, allDayText: "כל היום", eventLimitText: "אחר", noEventsMessage: "אין אירועים להצגה", weekNumberTitle: "שבוע" }) }(), function () { !function () { var n = { 1: "१", 2: "२", 3: "३", 4: "४", 5: "५", 6: "६", 7: "७", 8: "८", 9: "९", 0: "०" }, i = { "१": "1", "२": "2", "३": "3", "४": "4", "५": "5", "६": "6", "७": "7", "८": "8", "९": "9", "०": "0" }; return t.defineLocale("hi", { months: "जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"), monthsShort: "जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"), monthsParseExact: !0, weekdays: "रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"), weekdaysShort: "रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"), weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"), longDateFormat: { LT: "A h:mm बजे", LTS: "A h:mm:ss बजे", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm बजे", LLLL: "dddd, D MMMM YYYY, A h:mm बजे" }, calendar: { sameDay: "[आज] LT", nextDay: "[कल] LT", nextWeek: "dddd, LT", lastDay: "[कल] LT", lastWeek: "[पिछले] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s में", past: "%s पहले", s: "कुछ ही क्षण", m: "एक मिनट", mm: "%d मिनट", h: "एक घंटा", hh: "%d घंटे", d: "एक दिन", dd: "%d दिन", M: "एक महीने", MM: "%d महीने", y: "एक वर्ष", yy: "%d वर्ष" }, preparse: function (n) { return n.replace(/[१२३४५६७८९०]/g, function (n) { return i[n] }) }, postformat: function (t) { return t.replace(/\d/g, function (t) { return n[t] }) }, meridiemParse: /रात|सुबह|दोपहर|शाम/, meridiemHour: function (n, t) { return 12 === n && (n = 0), "रात" === t ? n < 4 ? n : n + 12 : "सुबह" === t ? n : "दोपहर" === t ? n >= 10 ? n : n + 12 : "शाम" === t ? n + 12 : void 0 }, meridiem: function (n) { return n < 4 ? "रात" : n < 10 ? "सुबह" : n < 17 ? "दोपहर" : n < 20 ? "शाम" : "रात" }, week: { dow: 0, doy: 6 } }) }(); n.fullCalendar.datepickerLocale("hi", "hi", { closeText: "बंद", prevText: "पिछला", nextText: "अगला", currentText: "आज", monthNames: ["जनवरी ", "फरवरी", "मार्च", "अप्रेल", "मई", "जून", "जूलाई", "अगस्त ", "सितम्बर", "अक्टूबर", "नवम्बर", "दिसम्बर"], monthNamesShort: ["जन", "फर", "मार्च", "अप्रेल", "मई", "जून", "जूलाई", "अग", "सित", "अक्ट", "नव", "दि"], dayNames: ["रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"], dayNamesShort: ["रवि", "सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"], dayNamesMin: ["रवि", "सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"], weekHeader: "हफ्ता", dateFormat: "dd/mm/yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("hi", { buttonText: { month: "महीना", week: "सप्ताह", day: "दिन", list: "कार्यसूची" }, allDayText: "सभी दिन", eventLimitText: function (n) { return "+अधिक " + n }, noEventsMessage: "कोई घटनाओं को प्रदर्शित करने के लिए" }) }(), function () { !function () { function n(n, t, i) { var r = n + " "; switch (i) { case "m": return t ? "jedna minuta" : "jedne minute"; case "mm": return r + (1 === n ? "minuta" : 2 === n || 3 === n || 4 === n ? "minute" : "minuta"); case "h": return t ? "jedan sat" : "jednog sata"; case "hh": return r + (1 === n ? "sat" : 2 === n || 3 === n || 4 === n ? "sata" : "sati"); case "dd": return r + (1 === n ? "dan" : "dana"); case "MM": return r + (1 === n ? "mjesec" : 2 === n || 3 === n || 4 === n ? "mjeseca" : "mjeseci"); case "yy": return r + (1 === n ? "godina" : 2 === n || 3 === n || 4 === n ? "godine" : "godina") } } return t.defineLocale("hr", { months: { format: "siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"), standalone: "siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_") }, monthsShort: "sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"), monthsParseExact: !0, weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sutra u] LT", nextWeek: function () { switch (this.day()) { case 0: return "[u] [nedjelju] [u] LT"; case 3: return "[u] [srijedu] [u] LT"; case 6: return "[u] [subotu] [u] LT"; case 1: case 2: case 4: case 5: return "[u] dddd [u] LT" } }, lastDay: "[jučer u] LT", lastWeek: function () { switch (this.day()) { case 0: case 3: return "[prošlu] dddd [u] LT"; case 6: return "[prošle] [subote] [u] LT"; case 1: case 2: case 4: case 5: return "[prošli] dddd [u] LT" } }, sameElse: "L" }, relativeTime: { future: "za %s", past: "prije %s", s: "par sekundi", m: n, mm: n, h: n, hh: n, d: "dan", dd: n, M: "mjesec", MM: n, y: "godinu", yy: n }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }(); n.fullCalendar.datepickerLocale("hr", "hr", { closeText: "Zatvori", prevText: "&#x3C;", nextText: "&#x3E;", currentText: "Danas", monthNames: ["Siječanj", "Veljača", "Ožujak", "Travanj", "Svibanj", "Lipanj", "Srpanj", "Kolovoz", "Rujan", "Listopad", "Studeni", "Prosinac"], monthNamesShort: ["Sij", "Velj", "Ožu", "Tra", "Svi", "Lip", "Srp", "Kol", "Ruj", "Lis", "Stu", "Pro"], dayNames: ["Nedjelja", "Ponedjeljak", "Utorak", "Srijeda", "Četvrtak", "Petak", "Subota"], dayNamesShort: ["Ned", "Pon", "Uto", "Sri", "Čet", "Pet", "Sub"], dayNamesMin: ["Ne", "Po", "Ut", "Sr", "Če", "Pe", "Su"], weekHeader: "Tje", dateFormat: "dd.mm.yy.", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("hr", { buttonText: { prev: "Prijašnji", next: "Sljedeći", month: "Mjesec", week: "Tjedan", day: "Dan", list: "Raspored" }, allDayText: "Cijeli dan", eventLimitText: function (n) { return "+ još " + n }, noEventsMessage: "Nema događaja za prikaz" }) }(), function () { !function () { function n(n, t, i, r) { var u = n; switch (i) { case "s": return r || t ? "néhány másodperc" : "néhány másodperce"; case "m": return "egy" + (r || t ? " perc" : " perce"); case "mm": return u + (r || t ? " perc" : " perce"); case "h": return "egy" + (r || t ? " óra" : " órája"); case "hh": return u + (r || t ? " óra" : " órája"); case "d": return "egy" + (r || t ? " nap" : " napja"); case "dd": return u + (r || t ? " nap" : " napja"); case "M": return "egy" + (r || t ? " hónap" : " hónapja"); case "MM": return u + (r || t ? " hónap" : " hónapja"); case "y": return "egy" + (r || t ? " év" : " éve"); case "yy": return u + (r || t ? " év" : " éve") } return "" } function i(n) { return (n ? "" : "[múlt] ") + "[" + r[this.day()] + "] LT[-kor]" } var r = "vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" "); return t.defineLocale("hu", { months: "január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"), monthsShort: "jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"), weekdays: "vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"), weekdaysShort: "vas_hét_kedd_sze_csüt_pén_szo".split("_"), weekdaysMin: "v_h_k_sze_cs_p_szo".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "YYYY.MM.DD.", LL: "YYYY. MMMM D.", LLL: "YYYY. MMMM D. H:mm", LLLL: "YYYY. MMMM D., dddd H:mm" }, meridiemParse: /de|du/i, isPM: function (n) { return "u" === n.charAt(1).toLowerCase() }, meridiem: function (n, t, i) { return n < 12 ? i === !0 ? "de" : "DE" : i === !0 ? "du" : "DU" }, calendar: { sameDay: "[ma] LT[-kor]", nextDay: "[holnap] LT[-kor]", nextWeek: function () { return i.call(this, !0) }, lastDay: "[tegnap] LT[-kor]", lastWeek: function () { return i.call(this, !1) }, sameElse: "L" }, relativeTime: { future: "%s múlva", past: "%s", s: n, m: n, mm: n, h: n, hh: n, d: n, dd: n, M: n, MM: n, y: n, yy: n }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("hu", "hu", { closeText: "bezár", prevText: "vissza", nextText: "előre", currentText: "ma", monthNames: ["Január", "Február", "Március", "Április", "Május", "Június", "Július", "Augusztus", "Szeptember", "Október", "November", "December"], monthNamesShort: ["Jan", "Feb", "Már", "Ápr", "Máj", "Jún", "Júl", "Aug", "Szep", "Okt", "Nov", "Dec"], dayNames: ["Vasárnap", "Hétfő", "Kedd", "Szerda", "Csütörtök", "Péntek", "Szombat"], dayNamesShort: ["Vas", "Hét", "Ked", "Sze", "Csü", "Pén", "Szo"], dayNamesMin: ["V", "H", "K", "Sze", "Cs", "P", "Szo"], weekHeader: "Hét", dateFormat: "yy.mm.dd.", firstDay: 1, isRTL: !1, showMonthAfterYear: !0, yearSuffix: "" }); n.fullCalendar.locale("hu", { buttonText: { month: "Hónap", week: "Hét", day: "Nap", list: "Napló" }, allDayText: "Egész nap", eventLimitText: "további", noEventsMessage: "Nincs megjeleníthető események" }) }(), function () { !function () { return t.defineLocale("id", { months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"), monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"), weekdays: "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"), weekdaysShort: "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"), weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /pagi|siang|sore|malam/, meridiemHour: function (n, t) { return 12 === n && (n = 0), "pagi" === t ? n : "siang" === t ? n >= 11 ? n : n + 12 : "sore" === t || "malam" === t ? n + 12 : void 0 }, meridiem: function (n) { return n < 11 ? "pagi" : n < 15 ? "siang" : n < 19 ? "sore" : "malam" }, calendar: { sameDay: "[Hari ini pukul] LT", nextDay: "[Besok pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kemarin pukul] LT", lastWeek: "dddd [lalu pukul] LT", sameElse: "L" }, relativeTime: { future: "dalam %s", past: "%s yang lalu", s: "beberapa detik", m: "semenit", mm: "%d menit", h: "sejam", hh: "%d jam", d: "sehari", dd: "%d hari", M: "sebulan", MM: "%d bulan", y: "setahun", yy: "%d tahun" }, week: { dow: 1, doy: 7 } }) }(); n.fullCalendar.datepickerLocale("id", "id", { closeText: "Tutup", prevText: "&#x3C;mundur", nextText: "maju&#x3E;", currentText: "hari ini", monthNames: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "Nopember", "Desember"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agus", "Sep", "Okt", "Nop", "Des"], dayNames: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"], dayNamesShort: ["Min", "Sen", "Sel", "Rab", "kam", "Jum", "Sab"], dayNamesMin: ["Mg", "Sn", "Sl", "Rb", "Km", "jm", "Sb"], weekHeader: "Mg", dateFormat: "dd/mm/yy", firstDay: 0, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("id", { buttonText: { month: "Bulan", week: "Minggu", day: "Hari", list: "Agenda" }, allDayHtml: "Sehari<br/>penuh", eventLimitText: "lebih", noEventsMessage: "Tidak ada acara untuk ditampilkan" }) }(), function () { !function () { function i(n) { return n % 100 == 11 || n % 10 != 1 } function n(n, t, r, u) { var f = n + " "; switch (r) { case "s": return t || u ? "nokkrar sekúndur" : "nokkrum sekúndum"; case "m": return t ? "mínúta" : "mínútu"; case "mm": return i(n) ? f + (t || u ? "mínútur" : "mínútum") : t ? f + "mínúta" : f + "mínútu"; case "hh": return i(n) ? f + (t || u ? "klukkustundir" : "klukkustundum") : f + "klukkustund"; case "d": return t ? "dagur" : u ? "dag" : "degi"; case "dd": return i(n) ? t ? f + "dagar" : f + (u ? "daga" : "dögum") : t ? f + "dagur" : f + (u ? "dag" : "degi"); case "M": return t ? "mánuður" : u ? "mánuð" : "mánuði"; case "MM": return i(n) ? t ? f + "mánuðir" : f + (u ? "mánuði" : "mánuðum") : t ? f + "mánuður" : f + (u ? "mánuð" : "mánuði"); case "y": return t || u ? "ár" : "ári"; case "yy": return i(n) ? f + (t || u ? "ár" : "árum") : f + (t || u ? "ár" : "ári") } } return t.defineLocale("is", { months: "janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"), monthsShort: "jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"), weekdays: "sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"), weekdaysShort: "sun_mán_þri_mið_fim_fös_lau".split("_"), weekdaysMin: "Su_Má_Þr_Mi_Fi_Fö_La".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY [kl.] H:mm", LLLL: "dddd, D. MMMM YYYY [kl.] H:mm" }, calendar: { sameDay: "[í dag kl.] LT", nextDay: "[á morgun kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[í gær kl.] LT", lastWeek: "[síðasta] dddd [kl.] LT", sameElse: "L" }, relativeTime: { future: "eftir %s", past: "fyrir %s síðan", s: n, m: n, mm: n, h: "klukkustund", hh: n, d: n, dd: n, M: n, MM: n, y: n, yy: n }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("is", "is", { closeText: "Loka", prevText: "&#x3C; Fyrri", nextText: "Næsti &#x3E;", currentText: "Í dag", monthNames: ["Janúar", "Febrúar", "Mars", "Apríl", "Maí", "Júní", "Júlí", "Ágúst", "September", "Október", "Nóvember", "Desember"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maí", "Jún", "Júl", "Ágú", "Sep", "Okt", "Nóv", "Des"], dayNames: ["Sunnudagur", "Mánudagur", "Þriðjudagur", "Miðvikudagur", "Fimmtudagur", "Föstudagur", "Laugardagur"], dayNamesShort: ["Sun", "Mán", "Þri", "Mið", "Fim", "Fös", "Lau"], dayNamesMin: ["Su", "Má", "Þr", "Mi", "Fi", "Fö", "La"], weekHeader: "Vika", dateFormat: "dd.mm.yy", firstDay: 0, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("is", { buttonText: { month: "Mánuður", week: "Vika", day: "Dagur", list: "Dagskrá" }, allDayHtml: "Allan<br/>daginn", eventLimitText: "meira", noEventsMessage: "Engir viðburðir til að sýna" }) }(), function () { !function () { return t.defineLocale("it", { months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"), monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"), weekdays: "Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"), weekdaysShort: "Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"), weekdaysMin: "Do_Lu_Ma_Me_Gi_Ve_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Oggi alle] LT", nextDay: "[Domani alle] LT", nextWeek: "dddd [alle] LT", lastDay: "[Ieri alle] LT", lastWeek: function () { switch (this.day()) { case 0: return "[la scorsa] dddd [alle] LT"; default: return "[lo scorso] dddd [alle] LT" } }, sameElse: "L" }, relativeTime: { future: function (n) { return (/^[0-9].+$/.test(n) ? "tra" : "in") + " " + n }, past: "%s fa", s: "alcuni secondi", m: "un minuto", mm: "%d minuti", h: "un'ora", hh: "%d ore", d: "un giorno", dd: "%d giorni", M: "un mese", MM: "%d mesi", y: "un anno", yy: "%d anni" }, ordinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("it", "it", { closeText: "Chiudi", prevText: "&#x3C;Prec", nextText: "Succ&#x3E;", currentText: "Oggi", monthNames: ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"], monthNamesShort: ["Gen", "Feb", "Mar", "Apr", "Mag", "Giu", "Lug", "Ago", "Set", "Ott", "Nov", "Dic"], dayNames: ["Domenica", "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato"], dayNamesShort: ["Dom", "Lun", "Mar", "Mer", "Gio", "Ven", "Sab"], dayNamesMin: ["Do", "Lu", "Ma", "Me", "Gi", "Ve", "Sa"], weekHeader: "Sm", dateFormat: "dd/mm/yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("it", { buttonText: { month: "Mese", week: "Settimana", day: "Giorno", list: "Agenda" }, allDayHtml: "Tutto il<br/>giorno", eventLimitText: function (n) { return "+altri " + n }, noEventsMessage: "Non ci sono eventi da visualizzare" }) }(), function () { !function () { return t.defineLocale("ja", { months: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"), weekdaysShort: "日_月_火_水_木_金_土".split("_"), weekdaysMin: "日_月_火_水_木_金_土".split("_"), longDateFormat: { LT: "Ah時m分", LTS: "Ah時m分s秒", L: "YYYY/MM/DD", LL: "YYYY年M月D日", LLL: "YYYY年M月D日Ah時m分", LLLL: "YYYY年M月D日Ah時m分 dddd" }, meridiemParse: /午前|午後/i, isPM: function (n) { return "午後" === n }, meridiem: function (n) { return n < 12 ? "午前" : "午後" }, calendar: { sameDay: "[今日] LT", nextDay: "[明日] LT", nextWeek: "[来週]dddd LT", lastDay: "[昨日] LT", lastWeek: "[前週]dddd LT", sameElse: "L" }, ordinalParse: /\d{1,2}日/, ordinal: function (n, t) { switch (t) { case "d": case "D": case "DDD": return n + "日"; default: return n } }, relativeTime: { future: "%s後", past: "%s前", s: "数秒", m: "1分", mm: "%d分", h: "1時間", hh: "%d時間", d: "1日", dd: "%d日", M: "1ヶ月", MM: "%dヶ月", y: "1年", yy: "%d年" } }) }(); n.fullCalendar.datepickerLocale("ja", "ja", { closeText: "閉じる", prevText: "&#x3C;前", nextText: "次&#x3E;", currentText: "今日", monthNames: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"], monthNamesShort: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"], dayNames: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"], dayNamesShort: ["日", "月", "火", "水", "木", "金", "土"], dayNamesMin: ["日", "月", "火", "水", "木", "金", "土"], weekHeader: "週", dateFormat: "yy/mm/dd", firstDay: 0, isRTL: !1, showMonthAfterYear: !0, yearSuffix: "年" }); n.fullCalendar.locale("ja", { buttonText: { month: "月", week: "週", day: "日", list: "予定リスト" }, allDayText: "終日", eventLimitText: function (n) { return "他 " + n + " 件" }, noEventsMessage: "イベントが表示されないように" }) }(), function () { !function () { var n = { 0: "-ші", 1: "-ші", 2: "-ші", 3: "-ші", 4: "-ші", 5: "-ші", 6: "-шы", 7: "-ші", 8: "-ші", 9: "-шы", 10: "-шы", 20: "-шы", 30: "-шы", 40: "-шы", 50: "-ші", 60: "-шы", 70: "-ші", 80: "-ші", 90: "-шы", 100: "-ші" }; return t.defineLocale("kk", { months: "қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"), monthsShort: "қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"), weekdays: "жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"), weekdaysShort: "жек_дүй_сей_сәр_бей_жұм_сен".split("_"), weekdaysMin: "жк_дй_сй_ср_бй_жм_сн".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Бүгін сағат] LT", nextDay: "[Ертең сағат] LT", nextWeek: "dddd [сағат] LT", lastDay: "[Кеше сағат] LT", lastWeek: "[Өткен аптаның] dddd [сағат] LT", sameElse: "L" }, relativeTime: { future: "%s ішінде", past: "%s бұрын", s: "бірнеше секунд", m: "бір минут", mm: "%d минут", h: "бір сағат", hh: "%d сағат", d: "бір күн", dd: "%d күн", M: "бір ай", MM: "%d ай", y: "бір жыл", yy: "%d жыл" }, ordinalParse: /\d{1,2}-(ші|шы)/, ordinal: function (t) { var i = t % 10, r = t >= 100 ? 100 : null; return t + (n[t] || n[i] || n[r]) }, week: { dow: 1, doy: 7 } }) }(); n.fullCalendar.datepickerLocale("kk", "kk", { closeText: "Жабу", prevText: "&#x3C;Алдыңғы", nextText: "Келесі&#x3E;", currentText: "Бүгін", monthNames: ["Қаңтар", "Ақпан", "Наурыз", "Сәуір", "Мамыр", "Маусым", "Шілде", "Тамыз", "Қыркүйек", "Қазан", "Қараша", "Желтоқсан"], monthNamesShort: ["Қаң", "Ақп", "Нау", "Сәу", "Мам", "Мау", "Шіл", "Там", "Қыр", "Қаз", "Қар", "Жел"], dayNames: ["Жексенбі", "Дүйсенбі", "Сейсенбі", "Сәрсенбі", "Бейсенбі", "Жұма", "Сенбі"], dayNamesShort: ["жкс", "дсн", "ссн", "срс", "бсн", "жма", "снб"], dayNamesMin: ["Жк", "Дс", "Сс", "Ср", "Бс", "Жм", "Сн"], weekHeader: "Не", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("kk", { buttonText: { month: "Ай", week: "Апта", day: "Күн", list: "Күн тәртібі" }, allDayText: "Күні бойы", eventLimitText: function (n) { return "+ тағы " + n }, noEventsMessage: "Көрсету үшін оқиғалар жоқ" }) }(), function () { !function () { return t.defineLocale("ko", { months: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"), monthsShort: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"), weekdays: "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"), weekdaysShort: "일_월_화_수_목_금_토".split("_"), weekdaysMin: "일_월_화_수_목_금_토".split("_"), longDateFormat: { LT: "A h시 m분", LTS: "A h시 m분 s초", L: "YYYY.MM.DD", LL: "YYYY년 MMMM D일", LLL: "YYYY년 MMMM D일 A h시 m분", LLLL: "YYYY년 MMMM D일 dddd A h시 m분" }, calendar: { sameDay: "오늘 LT", nextDay: "내일 LT", nextWeek: "dddd LT", lastDay: "어제 LT", lastWeek: "지난주 dddd LT", sameElse: "L" }, relativeTime: { future: "%s 후", past: "%s 전", s: "몇 초", ss: "%d초", m: "일분", mm: "%d분", h: "한 시간", hh: "%d시간", d: "하루", dd: "%d일", M: "한 달", MM: "%d달", y: "일 년", yy: "%d년" }, ordinalParse: /\d{1,2}일/, ordinal: "%d일", meridiemParse: /오전|오후/, isPM: function (n) { return "오후" === n }, meridiem: function (n) { return n < 12 ? "오전" : "오후" } }) }(); n.fullCalendar.datepickerLocale("ko", "ko", { closeText: "닫기", prevText: "이전달", nextText: "다음달", currentText: "오늘", monthNames: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"], monthNamesShort: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"], dayNames: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"], dayNamesShort: ["일", "월", "화", "수", "목", "금", "토"], dayNamesMin: ["일", "월", "화", "수", "목", "금", "토"], weekHeader: "주", dateFormat: "yy. m. d.", firstDay: 0, isRTL: !1, showMonthAfterYear: !0, yearSuffix: "년" }); n.fullCalendar.locale("ko", { buttonText: { month: "월", week: "주", day: "일", list: "일정목록" }, allDayText: "종일", eventLimitText: "개", noEventsMessage: "일정이 표시 없습니다" }) }(), function () { !function () { function n(n, t, i) { var r = { m: ["eng Minutt", "enger Minutt"], h: ["eng Stonn", "enger Stonn"], d: ["een Dag", "engem Dag"], M: ["ee Mount", "engem Mount"], y: ["ee Joer", "engem Joer"] }; return t ? r[i][0] : r[i][1] } function r(n) { var t = n.substr(0, n.indexOf(" ")); return i(t) ? "a " + n : "an " + n } function u(n) { var t = n.substr(0, n.indexOf(" ")); return i(t) ? "viru " + n : "virun " + n } function i(n) { if (n = parseInt(n, 10), isNaN(n)) return !1; if (n < 0) return !0; if (n < 10) return 4 <= n && n <= 7; if (n < 100) { var t = n % 10, r = n / 10; return i(0 === t ? r : t) } if (n < 1e4) { for (; n >= 10;) n /= 10; return i(n) } return n /= 1e3, i(n) } return t.defineLocale("lb", { months: "Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"), monthsParseExact: !0, weekdays: "Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"), weekdaysShort: "So._Mé._Dë._Më._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mé_Dë_Më_Do_Fr_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm [Auer]", LTS: "H:mm:ss [Auer]", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm [Auer]", LLLL: "dddd, D. MMMM YYYY H:mm [Auer]" }, calendar: { sameDay: "[Haut um] LT", sameElse: "L", nextDay: "[Muer um] LT", nextWeek: "dddd [um] LT", lastDay: "[Gëschter um] LT", lastWeek: function () { switch (this.day()) { case 2: case 4: return "[Leschten] dddd [um] LT"; default: return "[Leschte] dddd [um] LT" } } }, relativeTime: { future: r, past: u, s: "e puer Sekonnen", m: n, mm: "%d Minutten", h: n, hh: "%d Stonnen", d: n, dd: "%d Deeg", M: n, MM: "%d Méint", y: n, yy: "%d Joer" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("lb", "lb", { closeText: "Fäerdeg", prevText: "Zréck", nextText: "Weider", currentText: "Haut", monthNames: ["Januar", "Februar", "Mäerz", "Abrëll", "Mee", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"], monthNamesShort: ["Jan", "Feb", "Mäe", "Abr", "Mee", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"], dayNames: ["Sonndeg", "Méindeg", "Dënschdeg", "Mëttwoch", "Donneschdeg", "Freideg", "Samschdeg"], dayNamesShort: ["Son", "Méi", "Dën", "Mët", "Don", "Fre", "Sam"], dayNamesMin: ["So", "Mé", "Dë", "Më", "Do", "Fr", "Sa"], weekHeader: "W", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("lb", { buttonText: { month: "Mount", week: "Woch", day: "Dag", list: "Terminiwwersiicht" }, allDayText: "Ganzen Dag", eventLimitText: "méi", noEventsMessage: "Nee Evenementer ze affichéieren" }) }(), function () { !function () { function f(n, t, i, r) { return t ? "kelios sekundės" : r ? "kelių sekundžių" : "kelias sekundes" } function i(t, i, r, u) { return i ? n(r)[0] : u ? n(r)[1] : n(r)[2] } function u(n) { return n % 10 == 0 || n > 10 && n < 20 } function n(n) { return e[n].split("_") } function r(t, r, f, e) { var o = t + " "; return 1 === t ? o + i(t, r, f[0], e) : r ? o + (u(t) ? n(f)[1] : n(f)[0]) : e ? o + n(f)[1] : o + (u(t) ? n(f)[1] : n(f)[2]) } var e = { m: "minutė_minutės_minutę", mm: "minutės_minučių_minutes", h: "valanda_valandos_valandą", hh: "valandos_valandų_valandas", d: "diena_dienos_dieną", dd: "dienos_dienų_dienas", M: "mėnuo_mėnesio_mėnesį", MM: "mėnesiai_mėnesių_mėnesius", y: "metai_metų_metus", yy: "metai_metų_metus" }; return t.defineLocale("lt", { months: { format: "sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"), standalone: "sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"), isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/ }, monthsShort: "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"), weekdays: { format: "sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"), standalone: "sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"), isFormat: /dddd HH:mm/ }, weekdaysShort: "Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"), weekdaysMin: "S_P_A_T_K_Pn_Š".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "YYYY [m.] MMMM D [d.]", LLL: "YYYY [m.] MMMM D [d.], HH:mm [val.]", LLLL: "YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]", l: "YYYY-MM-DD", ll: "YYYY [m.] MMMM D [d.]", lll: "YYYY [m.] MMMM D [d.], HH:mm [val.]", llll: "YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]" }, calendar: { sameDay: "[Šiandien] LT", nextDay: "[Rytoj] LT", nextWeek: "dddd LT", lastDay: "[Vakar] LT", lastWeek: "[Praėjusį] dddd LT", sameElse: "L" }, relativeTime: { future: "po %s", past: "prieš %s", s: f, m: i, mm: r, h: i, hh: r, d: i, dd: r, M: i, MM: r, y: i, yy: r }, ordinalParse: /\d{1,2}-oji/, ordinal: function (n) { return n + "-oji" }, week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("lt", "lt", { closeText: "Uždaryti", prevText: "&#x3C;Atgal", nextText: "Pirmyn&#x3E;", currentText: "Šiandien", monthNames: ["Sausis", "Vasaris", "Kovas", "Balandis", "Gegužė", "Birželis", "Liepa", "Rugpjūtis", "Rugsėjis", "Spalis", "Lapkritis", "Gruodis"], monthNamesShort: ["Sau", "Vas", "Kov", "Bal", "Geg", "Bir", "Lie", "Rugp", "Rugs", "Spa", "Lap", "Gru"], dayNames: ["sekmadienis", "pirmadienis", "antradienis", "trečiadienis", "ketvirtadienis", "penktadienis", "šeštadienis"], dayNamesShort: ["sek", "pir", "ant", "tre", "ket", "pen", "šeš"], dayNamesMin: ["Se", "Pr", "An", "Tr", "Ke", "Pe", "Še"], weekHeader: "SAV", dateFormat: "yy-mm-dd", firstDay: 1, isRTL: !1, showMonthAfterYear: !0, yearSuffix: "" }); n.fullCalendar.locale("lt", { buttonText: { month: "Mėnuo", week: "Savaitė", day: "Diena", list: "Darbotvarkė" }, allDayText: "Visą dieną", eventLimitText: "daugiau", noEventsMessage: "Nėra įvykių rodyti" }) }(), function () { !function () { function r(n, t, i) { return i ? t % 10 == 1 && t % 100 != 11 ? n[2] : n[3] : t % 10 == 1 && t % 100 != 11 ? n[0] : n[1] } function n(n, t, i) { return n + " " + r(u[i], n, t) } function i(n, t, i) { return r(u[i], n, t) } function f(n, t) { return t ? "dažas sekundes" : "dažām sekundēm" } var u = { m: "minūtes_minūtēm_minūte_minūtes".split("_"), mm: "minūtes_minūtēm_minūte_minūtes".split("_"), h: "stundas_stundām_stunda_stundas".split("_"), hh: "stundas_stundām_stunda_stundas".split("_"), d: "dienas_dienām_diena_dienas".split("_"), dd: "dienas_dienām_diena_dienas".split("_"), M: "mēneša_mēnešiem_mēnesis_mēneši".split("_"), MM: "mēneša_mēnešiem_mēnesis_mēneši".split("_"), y: "gada_gadiem_gads_gadi".split("_"), yy: "gada_gadiem_gads_gadi".split("_") }; return t.defineLocale("lv", { months: "janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"), monthsShort: "jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"), weekdays: "svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"), weekdaysShort: "Sv_P_O_T_C_Pk_S".split("_"), weekdaysMin: "Sv_P_O_T_C_Pk_S".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY.", LL: "YYYY. [gada] D. MMMM", LLL: "YYYY. [gada] D. MMMM, HH:mm", LLLL: "YYYY. [gada] D. MMMM, dddd, HH:mm" }, calendar: { sameDay: "[Šodien pulksten] LT", nextDay: "[Rīt pulksten] LT", nextWeek: "dddd [pulksten] LT", lastDay: "[Vakar pulksten] LT", lastWeek: "[Pagājušā] dddd [pulksten] LT", sameElse: "L" }, relativeTime: { future: "pēc %s", past: "pirms %s", s: f, m: i, mm: n, h: i, hh: n, d: i, dd: n, M: i, MM: n, y: i, yy: n }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("lv", "lv", { closeText: "Aizvērt", prevText: "Iepr.", nextText: "Nāk.", currentText: "Šodien", monthNames: ["Janvāris", "Februāris", "Marts", "Aprīlis", "Maijs", "Jūnijs", "Jūlijs", "Augusts", "Septembris", "Oktobris", "Novembris", "Decembris"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Mai", "Jūn", "Jūl", "Aug", "Sep", "Okt", "Nov", "Dec"], dayNames: ["svētdiena", "pirmdiena", "otrdiena", "trešdiena", "ceturtdiena", "piektdiena", "sestdiena"], dayNamesShort: ["svt", "prm", "otr", "tre", "ctr", "pkt", "sst"], dayNamesMin: ["Sv", "Pr", "Ot", "Tr", "Ct", "Pk", "Ss"], weekHeader: "Ned.", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("lv", { buttonText: { month: "Mēnesis", week: "Nedēļa", day: "Diena", list: "Dienas kārtība" }, allDayText: "Visu dienu", eventLimitText: function (n) { return "+vēl " + n }, noEventsMessage: "Nav notikumu, lai parādītu" }) }(), function () { !function () { return t.defineLocale("mk", { months: "јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"), monthsShort: "јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"), weekdays: "недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"), weekdaysShort: "нед_пон_вто_сре_чет_пет_саб".split("_"), weekdaysMin: "нe_пo_вт_ср_че_пе_сa".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "D.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY H:mm", LLLL: "dddd, D MMMM YYYY H:mm" }, calendar: { sameDay: "[Денес во] LT", nextDay: "[Утре во] LT", nextWeek: "[Во] dddd [во] LT", lastDay: "[Вчера во] LT", lastWeek: function () { switch (this.day()) { case 0: case 3: case 6: return "[Изминатата] dddd [во] LT"; case 1: case 2: case 4: case 5: return "[Изминатиот] dddd [во] LT" } }, sameElse: "L" }, relativeTime: { future: "после %s", past: "пред %s", s: "неколку секунди", m: "минута", mm: "%d минути", h: "час", hh: "%d часа", d: "ден", dd: "%d дена", M: "месец", MM: "%d месеци", y: "година", yy: "%d години" }, ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/, ordinal: function (n) { var t = n % 10, i = n % 100; return 0 === n ? n + "-ев" : 0 === i ? n + "-ен" : i > 10 && i < 20 ? n + "-ти" : 1 === t ? n + "-ви" : 2 === t ? n + "-ри" : 7 === t || 8 === t ? n + "-ми" : n + "-ти" }, week: { dow: 1, doy: 7 } }) }(); n.fullCalendar.datepickerLocale("mk", "mk", { closeText: "Затвори", prevText: "&#x3C;", nextText: "&#x3E;", currentText: "Денес", monthNames: ["Јануари", "Февруари", "Март", "Април", "Мај", "Јуни", "Јули", "Август", "Септември", "Октомври", "Ноември", "Декември"], monthNamesShort: ["Јан", "Фев", "Мар", "Апр", "Мај", "Јун", "Јул", "Авг", "Сеп", "Окт", "Ное", "Дек"], dayNames: ["Недела", "Понеделник", "Вторник", "Среда", "Четврток", "Петок", "Сабота"], dayNamesShort: ["Нед", "Пон", "Вто", "Сре", "Чет", "Пет", "Саб"], dayNamesMin: ["Не", "По", "Вт", "Ср", "Че", "Пе", "Са"], weekHeader: "Сед", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("mk", { buttonText: { month: "Месец", week: "Недела", day: "Ден", list: "График" }, allDayText: "Цел ден", eventLimitText: function (n) { return "+повеќе " + n }, noEventsMessage: "Нема настани за прикажување" }) }(), function () { !function () { return t.defineLocale("ms", { months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"), monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"), weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"), weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"), weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /pagi|tengahari|petang|malam/, meridiemHour: function (n, t) { return 12 === n && (n = 0), "pagi" === t ? n : "tengahari" === t ? n >= 11 ? n : n + 12 : "petang" === t || "malam" === t ? n + 12 : void 0 }, meridiem: function (n) { return n < 11 ? "pagi" : n < 15 ? "tengahari" : n < 19 ? "petang" : "malam" }, calendar: { sameDay: "[Hari ini pukul] LT", nextDay: "[Esok pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kelmarin pukul] LT", lastWeek: "dddd [lepas pukul] LT", sameElse: "L" }, relativeTime: { future: "dalam %s", past: "%s yang lepas", s: "beberapa saat", m: "seminit", mm: "%d minit", h: "sejam", hh: "%d jam", d: "sehari", dd: "%d hari", M: "sebulan", MM: "%d bulan", y: "setahun", yy: "%d tahun" }, week: { dow: 1, doy: 7 } }) }(); n.fullCalendar.datepickerLocale("ms", "ms", { closeText: "Tutup", prevText: "&#x3C;Sebelum", nextText: "Selepas&#x3E;", currentText: "hari ini", monthNames: ["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember"], monthNamesShort: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogo", "Sep", "Okt", "Nov", "Dis"], dayNames: ["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"], dayNamesShort: ["Aha", "Isn", "Sel", "Rab", "kha", "Jum", "Sab"], dayNamesMin: ["Ah", "Is", "Se", "Ra", "Kh", "Ju", "Sa"], weekHeader: "Mg", dateFormat: "dd/mm/yy", firstDay: 0, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("ms", { buttonText: { month: "Bulan", week: "Minggu", day: "Hari", list: "Agenda" }, allDayText: "Sepanjang hari", eventLimitText: function (n) { return "masih ada " + n + " acara" }, noEventsMessage: "Tiada peristiwa untuk dipaparkan" }) }(), function () { !function () { return t.defineLocale("ms-my", { months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"), monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"), weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"), weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"), weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /pagi|tengahari|petang|malam/, meridiemHour: function (n, t) { return 12 === n && (n = 0), "pagi" === t ? n : "tengahari" === t ? n >= 11 ? n : n + 12 : "petang" === t || "malam" === t ? n + 12 : void 0 }, meridiem: function (n) { return n < 11 ? "pagi" : n < 15 ? "tengahari" : n < 19 ? "petang" : "malam" }, calendar: { sameDay: "[Hari ini pukul] LT", nextDay: "[Esok pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kelmarin pukul] LT", lastWeek: "dddd [lepas pukul] LT", sameElse: "L" }, relativeTime: { future: "dalam %s", past: "%s yang lepas", s: "beberapa saat", m: "seminit", mm: "%d minit", h: "sejam", hh: "%d jam", d: "sehari", dd: "%d hari", M: "sebulan", MM: "%d bulan", y: "setahun", yy: "%d tahun" }, week: { dow: 1, doy: 7 } }) }(); n.fullCalendar.datepickerLocale("ms-my", "ms", { closeText: "Tutup", prevText: "&#x3C;Sebelum", nextText: "Selepas&#x3E;", currentText: "hari ini", monthNames: ["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember"], monthNamesShort: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogo", "Sep", "Okt", "Nov", "Dis"], dayNames: ["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"], dayNamesShort: ["Aha", "Isn", "Sel", "Rab", "kha", "Jum", "Sab"], dayNamesMin: ["Ah", "Is", "Se", "Ra", "Kh", "Ju", "Sa"], weekHeader: "Mg", dateFormat: "dd/mm/yy", firstDay: 0, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("ms-my", { buttonText: { month: "Bulan", week: "Minggu", day: "Hari", list: "Agenda" }, allDayText: "Sepanjang hari", eventLimitText: function (n) { return "masih ada " + n + " acara" }, noEventsMessage: "Tiada peristiwa untuk dipaparkan" }) }(), function () { !function () { return t.defineLocale("nb", { months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"), monthsShort: "jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"), monthsParseExact: !0, weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"), weekdaysShort: "sø._ma._ti._on._to._fr._lø.".split("_"), weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY [kl.] HH:mm", LLLL: "dddd D. MMMM YYYY [kl.] HH:mm" }, calendar: { sameDay: "[i dag kl.] LT", nextDay: "[i morgen kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[i går kl.] LT", lastWeek: "[forrige] dddd [kl.] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "%s siden", s: "noen sekunder", m: "ett minutt", mm: "%d minutter", h: "en time", hh: "%d timer", d: "en dag", dd: "%d dager", M: "en måned", MM: "%d måneder", y: "ett år", yy: "%d år" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("nb", "nb", { closeText: "Lukk", prevText: "&#xAB;Forrige", nextText: "Neste&#xBB;", currentText: "I dag", monthNames: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"], monthNamesShort: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des"], dayNamesShort: ["søn", "man", "tir", "ons", "tor", "fre", "lør"], dayNames: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"], dayNamesMin: ["sø", "ma", "ti", "on", "to", "fr", "lø"], weekHeader: "Uke", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("nb", { buttonText: { month: "Måned", week: "Uke", day: "Dag", list: "Agenda" }, allDayText: "Hele dagen", eventLimitText: "til", noEventsMessage: "Ingen hendelser å vise" }) }(), function () { !function () { var r = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"), u = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"), n = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i], i = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i; return t.defineLocale("nl", { months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"), monthsShort: function (n, t) { return /-MMM-/.test(t) ? u[n.month()] : r[n.month()] }, monthsRegex: i, monthsShortRegex: i, monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i, monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i, monthsParse: n, longMonthsParse: n, shortMonthsParse: n, weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"), weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"), weekdaysMin: "Zo_Ma_Di_Wo_Do_Vr_Za".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[vandaag om] LT", nextDay: "[morgen om] LT", nextWeek: "dddd [om] LT", lastDay: "[gisteren om] LT", lastWeek: "[afgelopen] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "over %s", past: "%s geleden", s: "een paar seconden", m: "één minuut", mm: "%d minuten", h: "één uur", hh: "%d uur", d: "één dag", dd: "%d dagen", M: "één maand", MM: "%d maanden", y: "één jaar", yy: "%d jaar" }, ordinalParse: /\d{1,2}(ste|de)/, ordinal: function (n) { return n + (1 === n || 8 === n || n >= 20 ? "ste" : "de") }, week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("nl", "nl", { closeText: "Sluiten", prevText: "←", nextText: "→", currentText: "Vandaag", monthNames: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december"], monthNamesShort: ["jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec"], dayNames: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"], dayNamesShort: ["zon", "maa", "din", "woe", "don", "vri", "zat"], dayNamesMin: ["zo", "ma", "di", "wo", "do", "vr", "za"], weekHeader: "Wk", dateFormat: "dd-mm-yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("nl", { buttonText: { month: "Maand", week: "Week", day: "Dag", list: "Agenda" }, allDayText: "Hele dag", eventLimitText: "extra", noEventsMessage: "Geen evenementen om te laten zien" }) }(), function () { !function () { var r = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"), u = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"), n = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i], i = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i; return t.defineLocale("nl-be", { months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"), monthsShort: function (n, t) { return /-MMM-/.test(t) ? u[n.month()] : r[n.month()] }, monthsRegex: i, monthsShortRegex: i, monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i, monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i, monthsParse: n, longMonthsParse: n, shortMonthsParse: n, weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"), weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"), weekdaysMin: "Zo_Ma_Di_Wo_Do_Vr_Za".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[vandaag om] LT", nextDay: "[morgen om] LT", nextWeek: "dddd [om] LT", lastDay: "[gisteren om] LT", lastWeek: "[afgelopen] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "over %s", past: "%s geleden", s: "een paar seconden", m: "één minuut", mm: "%d minuten", h: "één uur", hh: "%d uur", d: "één dag", dd: "%d dagen", M: "één maand", MM: "%d maanden", y: "één jaar", yy: "%d jaar" }, ordinalParse: /\d{1,2}(ste|de)/, ordinal: function (n) { return n + (1 === n || 8 === n || n >= 20 ? "ste" : "de") }, week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("nl-be", "nl-BE", { closeText: "Sluiten", prevText: "←", nextText: "→", currentText: "Vandaag", monthNames: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december"], monthNamesShort: ["jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec"], dayNames: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"], dayNamesShort: ["zon", "maa", "din", "woe", "don", "vri", "zat"], dayNamesMin: ["zo", "ma", "di", "wo", "do", "vr", "za"], weekHeader: "Wk", dateFormat: "dd/mm/yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("nl-be", { buttonText: { month: "Maand", week: "Week", day: "Dag", list: "Agenda" }, allDayText: "Hele dag", eventLimitText: "extra", noEventsMessage: "Geen evenementen om te laten zien" }) }(), function () { !function () { return t.defineLocale("nn", { months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"), monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"), weekdays: "sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"), weekdaysShort: "sun_mån_tys_ons_tor_fre_lau".split("_"), weekdaysMin: "su_må_ty_on_to_fr_lø".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY [kl.] H:mm", LLLL: "dddd D. MMMM YYYY [kl.] HH:mm" }, calendar: { sameDay: "[I dag klokka] LT", nextDay: "[I morgon klokka] LT", nextWeek: "dddd [klokka] LT", lastDay: "[I går klokka] LT", lastWeek: "[Føregåande] dddd [klokka] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "%s sidan", s: "nokre sekund", m: "eit minutt", mm: "%d minutt", h: "ein time", hh: "%d timar", d: "ein dag", dd: "%d dagar", M: "ein månad", MM: "%d månader", y: "eit år", yy: "%d år" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("nn", "nn", { closeText: "Lukk", prevText: "&#xAB;Førre", nextText: "Neste&#xBB;", currentText: "I dag", monthNames: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"], monthNamesShort: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des"], dayNamesShort: ["sun", "mån", "tys", "ons", "tor", "fre", "lau"], dayNames: ["sundag", "måndag", "tysdag", "onsdag", "torsdag", "fredag", "laurdag"], dayNamesMin: ["su", "må", "ty", "on", "to", "fr", "la"], weekHeader: "Veke", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("nn", { buttonText: { month: "Månad", week: "Veke", day: "Dag", list: "Agenda" }, allDayText: "Heile dagen", eventLimitText: "til", noEventsMessage: "Ingen hendelser å vise" }) }(), function () { !function () { function i(n) { return n % 10 < 5 && n % 10 > 1 && ~~(n / 10) % 10 != 1 } function n(n, t, r) { var u = n + " "; switch (r) { case "m": return t ? "minuta" : "minutę"; case "mm": return u + (i(n) ? "minuty" : "minut"); case "h": return t ? "godzina" : "godzinę"; case "hh": return u + (i(n) ? "godziny" : "godzin"); case "MM": return u + (i(n) ? "miesiące" : "miesięcy"); case "yy": return u + (i(n) ? "lata" : "lat") } } var r = "styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"), u = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"); return t.defineLocale("pl", { months: function (n, t) { return "" === t ? "(" + u[n.month()] + "|" + r[n.month()] + ")" : /D MMMM/.test(t) ? u[n.month()] : r[n.month()] }, monthsShort: "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"), weekdays: "niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"), weekdaysShort: "ndz_pon_wt_śr_czw_pt_sob".split("_"), weekdaysMin: "Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Dziś o] LT", nextDay: "[Jutro o] LT", nextWeek: "[W] dddd [o] LT", lastDay: "[Wczoraj o] LT", lastWeek: function () { switch (this.day()) { case 0: return "[W zeszłą niedzielę o] LT"; case 3: return "[W zeszłą środę o] LT"; case 6: return "[W zeszłą sobotę o] LT"; default: return "[W zeszły] dddd [o] LT" } }, sameElse: "L" }, relativeTime: { future: "za %s", past: "%s temu", s: "kilka sekund", m: n, mm: n, h: n, hh: n, d: "1 dzień", dd: "%d dni", M: "miesiąc", MM: n, y: "rok", yy: n }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("pl", "pl", { closeText: "Zamknij", prevText: "&#x3C;Poprzedni", nextText: "Następny&#x3E;", currentText: "Dziś", monthNames: ["Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"], monthNamesShort: ["Sty", "Lu", "Mar", "Kw", "Maj", "Cze", "Lip", "Sie", "Wrz", "Pa", "Lis", "Gru"], dayNames: ["Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota"], dayNamesShort: ["Nie", "Pn", "Wt", "Śr", "Czw", "Pt", "So"], dayNamesMin: ["N", "Pn", "Wt", "Śr", "Cz", "Pt", "So"], weekHeader: "Tydz", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("pl", { buttonText: { month: "Miesiąc", week: "Tydzień", day: "Dzień", list: "Plan dnia" }, allDayText: "Cały dzień", eventLimitText: "więcej", noEventsMessage: "Brak wydarzeń do wyświetlenia" }) }(), function () { !function () { return t.defineLocale("pt", { months: "Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"), monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"), weekdays: "Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado".split("_"), weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"), weekdaysMin: "Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY HH:mm", LLLL: "dddd, D [de] MMMM [de] YYYY HH:mm" }, calendar: { sameDay: "[Hoje às] LT", nextDay: "[Amanhã às] LT", nextWeek: "dddd [às] LT", lastDay: "[Ontem às] LT", lastWeek: function () { return 0 === this.day() || 6 === this.day() ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT" }, sameElse: "L" }, relativeTime: { future: "em %s", past: "há %s", s: "segundos", m: "um minuto", mm: "%d minutos", h: "uma hora", hh: "%d horas", d: "um dia", dd: "%d dias", M: "um mês", MM: "%d meses", y: "um ano", yy: "%d anos" }, ordinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("pt", "pt", { closeText: "Fechar", prevText: "Anterior", nextText: "Seguinte", currentText: "Hoje", monthNames: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"], monthNamesShort: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"], dayNames: ["Domingo", "Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "Sábado"], dayNamesShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"], dayNamesMin: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"], weekHeader: "Sem", dateFormat: "dd/mm/yy", firstDay: 0, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("pt", { buttonText: { month: "Mês", week: "Semana", day: "Dia", list: "Agenda" }, allDayText: "Todo o dia", eventLimitText: "mais", noEventsMessage: "Não há eventos para mostrar" }) }(), function () { !function () { return t.defineLocale("pt-br", { months: "Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"), monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"), weekdays: "Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"), weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"), weekdaysMin: "Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY [às] HH:mm", LLLL: "dddd, D [de] MMMM [de] YYYY [às] HH:mm" }, calendar: { sameDay: "[Hoje às] LT", nextDay: "[Amanhã às] LT", nextWeek: "dddd [às] LT", lastDay: "[Ontem às] LT", lastWeek: function () { return 0 === this.day() || 6 === this.day() ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT" }, sameElse: "L" }, relativeTime: { future: "em %s", past: "%s atrás", s: "poucos segundos", m: "um minuto", mm: "%d minutos", h: "uma hora", hh: "%d horas", d: "um dia", dd: "%d dias", M: "um mês", MM: "%d meses", y: "um ano", yy: "%d anos" }, ordinalParse: /\d{1,2}º/, ordinal: "%dº" }) }(); n.fullCalendar.datepickerLocale("pt-br", "pt-BR", { closeText: "Fechar", prevText: "&#x3C;Anterior", nextText: "Próximo&#x3E;", currentText: "Hoje", monthNames: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"], monthNamesShort: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"], dayNames: ["Domingo", "Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "Sábado"], dayNamesShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"], dayNamesMin: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"], weekHeader: "Sm", dateFormat: "dd/mm/yy", firstDay: 0, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("pt-br", { buttonText: { month: "Mês", week: "Semana", day: "Dia", list: "Lista" }, allDayText: "dia inteiro", eventLimitText: function (n) { return "mais +" + n }, noEventsMessage: "Não há eventos para mostrar" }) }(), function () { !function () { function n(n, t, i) { var r = " "; return (n % 100 >= 20 || n >= 100 && n % 100 == 0) && (r = " de "), n + r + { mm: "minute", hh: "ore", dd: "zile", MM: "luni", yy: "ani" }[i] } return t.defineLocale("ro", { months: "ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"), monthsShort: "ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"), weekdaysShort: "Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"), weekdaysMin: "Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY H:mm", LLLL: "dddd, D MMMM YYYY H:mm" }, calendar: { sameDay: "[azi la] LT", nextDay: "[mâine la] LT", nextWeek: "dddd [la] LT", lastDay: "[ieri la] LT", lastWeek: "[fosta] dddd [la] LT", sameElse: "L" }, relativeTime: { future: "peste %s", past: "%s în urmă", s: "câteva secunde", m: "un minut", mm: n, h: "o oră", hh: n, d: "o zi", dd: n, M: "o lună", MM: n, y: "un an", yy: n }, week: { dow: 1, doy: 7 } }) }(); n.fullCalendar.datepickerLocale("ro", "ro", { closeText: "Închide", prevText: "&#xAB; Luna precedentă", nextText: "Luna următoare &#xBB;", currentText: "Azi", monthNames: ["Ianuarie", "Februarie", "Martie", "Aprilie", "Mai", "Iunie", "Iulie", "August", "Septembrie", "Octombrie", "Noiembrie", "Decembrie"], monthNamesShort: ["Ian", "Feb", "Mar", "Apr", "Mai", "Iun", "Iul", "Aug", "Sep", "Oct", "Nov", "Dec"], dayNames: ["Duminică", "Luni", "Marţi", "Miercuri", "Joi", "Vineri", "Sâmbătă"], dayNamesShort: ["Dum", "Lun", "Mar", "Mie", "Joi", "Vin", "Sâm"], dayNamesMin: ["Du", "Lu", "Ma", "Mi", "Jo", "Vi", "Sâ"], weekHeader: "Săpt", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("ro", { buttonText: { prev: "precedentă", next: "următoare", month: "Lună", week: "Săptămână", day: "Zi", list: "Agendă" }, allDayText: "Toată ziua", eventLimitText: function (n) { return "+alte " + n }, noEventsMessage: "Nu există evenimente de afișat" }) }(), function () { !function () { function r(n, t) { var i = n.split("_"); return t % 10 == 1 && t % 100 != 11 ? i[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? i[1] : i[2] } function n(n, t, i) { var u = { mm: t ? "минута_минуты_минут" : "минуту_минуты_минут", hh: "час_часа_часов", dd: "день_дня_дней", MM: "месяц_месяца_месяцев", yy: "год_года_лет" }; return "m" === i ? t ? "минута" : "минуту" : n + " " + r(u[i], +n) } var i = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i]; return t.defineLocale("ru", { months: { format: "января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"), standalone: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_") }, monthsShort: { format: "янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"), standalone: "янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_") }, weekdays: { standalone: "воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"), format: "воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"), isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/ }, weekdaysShort: "вс_пн_вт_ср_чт_пт_сб".split("_"), weekdaysMin: "вс_пн_вт_ср_чт_пт_сб".split("_"), monthsParse: i, longMonthsParse: i, shortMonthsParse: i, monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i, monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i, monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i, monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY г.", LLL: "D MMMM YYYY г., HH:mm", LLLL: "dddd, D MMMM YYYY г., HH:mm" }, calendar: { sameDay: "[Сегодня в] LT", nextDay: "[Завтра в] LT", lastDay: "[Вчера в] LT", nextWeek: function (n) { if (n.week() === this.week()) return 2 === this.day() ? "[Во] dddd [в] LT" : "[В] dddd [в] LT"; switch (this.day()) { case 0: return "[В следующее] dddd [в] LT"; case 1: case 2: case 4: return "[В следующий] dddd [в] LT"; case 3: case 5: case 6: return "[В следующую] dddd [в] LT" } }, lastWeek: function (n) { if (n.week() === this.week()) return 2 === this.day() ? "[Во] dddd [в] LT" : "[В] dddd [в] LT"; switch (this.day()) { case 0: return "[В прошлое] dddd [в] LT"; case 1: case 2: case 4: return "[В прошлый] dddd [в] LT"; case 3: case 5: case 6: return "[В прошлую] dddd [в] LT" } }, sameElse: "L" }, relativeTime: { future: "через %s", past: "%s назад", s: "несколько секунд", m: n, mm: n, h: "час", hh: n, d: "день", dd: n, M: "месяц", MM: n, y: "год", yy: n }, meridiemParse: /ночи|утра|дня|вечера/i, isPM: function (n) { return /^(дня|вечера)$/.test(n) }, meridiem: function (n) { return n < 4 ? "ночи" : n < 12 ? "утра" : n < 17 ? "дня" : "вечера" }, ordinalParse: /\d{1,2}-(й|го|я)/, ordinal: function (n, t) { switch (t) { case "M": case "d": case "DDD": return n + "-й"; case "D": return n + "-го"; case "w": case "W": return n + "-я"; default: return n } }, week: { dow: 1, doy: 7 } }) }(); n.fullCalendar.datepickerLocale("ru", "ru", { closeText: "Закрыть", prevText: "&#x3C;Пред", nextText: "След&#x3E;", currentText: "Сегодня", monthNames: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"], monthNamesShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"], dayNames: ["воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"], dayNamesShort: ["вск", "пнд", "втр", "срд", "чтв", "птн", "сбт"], dayNamesMin: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"], weekHeader: "Нед", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("ru", { buttonText: { month: "Месяц", week: "Неделя", day: "День", list: "Повестка дня" }, allDayText: "Весь день", eventLimitText: function (n) { return "+ ещё " + n }, noEventsMessage: "Нет событий для отображения" }) }(), function () { !function () { function i(n) { return n > 1 && n < 5 } function n(n, t, r, u) { var f = n + " "; switch (r) { case "s": return t || u ? "pár sekúnd" : "pár sekundami"; case "m": return t ? "minúta" : u ? "minútu" : "minútou"; case "mm": return t || u ? f + (i(n) ? "minúty" : "minút") : f + "minútami"; case "h": return t ? "hodina" : u ? "hodinu" : "hodinou"; case "hh": return t || u ? f + (i(n) ? "hodiny" : "hodín") : f + "hodinami"; case "d": return t || u ? "deň" : "dňom"; case "dd": return t || u ? f + (i(n) ? "dni" : "dní") : f + "dňami"; case "M": return t || u ? "mesiac" : "mesiacom"; case "MM": return t || u ? f + (i(n) ? "mesiace" : "mesiacov") : f + "mesiacmi"; case "y": return t || u ? "rok" : "rokom"; case "yy": return t || u ? f + (i(n) ? "roky" : "rokov") : f + "rokmi" } } var r = "január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"), u = "jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_"); return t.defineLocale("sk", { months: r, monthsShort: u, weekdays: "nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"), weekdaysShort: "ne_po_ut_st_št_pi_so".split("_"), weekdaysMin: "ne_po_ut_st_št_pi_so".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd D. MMMM YYYY H:mm" }, calendar: { sameDay: "[dnes o] LT", nextDay: "[zajtra o] LT", nextWeek: function () { switch (this.day()) { case 0: return "[v nedeľu o] LT"; case 1: case 2: return "[v] dddd [o] LT"; case 3: return "[v stredu o] LT"; case 4: return "[vo štvrtok o] LT"; case 5: return "[v piatok o] LT"; case 6: return "[v sobotu o] LT" } }, lastDay: "[včera o] LT", lastWeek: function () { switch (this.day()) { case 0: return "[minulú nedeľu o] LT"; case 1: case 2: return "[minulý] dddd [o] LT"; case 3: return "[minulú stredu o] LT"; case 4: case 5: return "[minulý] dddd [o] LT"; case 6: return "[minulú sobotu o] LT" } }, sameElse: "L" }, relativeTime: { future: "za %s", past: "pred %s", s: n, m: n, mm: n, h: n, hh: n, d: n, dd: n, M: n, MM: n, y: n, yy: n }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("sk", "sk", { closeText: "Zavrieť", prevText: "&#x3C;Predchádzajúci", nextText: "Nasledujúci&#x3E;", currentText: "Dnes", monthNames: ["január", "február", "marec", "apríl", "máj", "jún", "júl", "august", "september", "október", "november", "december"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Máj", "Jún", "Júl", "Aug", "Sep", "Okt", "Nov", "Dec"], dayNames: ["nedeľa", "pondelok", "utorok", "streda", "štvrtok", "piatok", "sobota"], dayNamesShort: ["Ned", "Pon", "Uto", "Str", "Štv", "Pia", "Sob"], dayNamesMin: ["Ne", "Po", "Ut", "St", "Št", "Pia", "So"], weekHeader: "Ty", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("sk", { buttonText: { month: "Mesiac", week: "Týždeň", day: "Deň", list: "Rozvrh" }, allDayText: "Celý deň", eventLimitText: function (n) { return "+ďalšie: " + n }, noEventsMessage: "Žiadne akcie na zobrazenie" }) }(), function () { !function () { function n(n, t, i, r) { var u = n + " "; switch (i) { case "s": return t || r ? "nekaj sekund" : "nekaj sekundami"; case "m": return t ? "ena minuta" : "eno minuto"; case "mm": return u + (1 === n ? t ? "minuta" : "minuto" : 2 === n ? t || r ? "minuti" : "minutama" : n < 5 ? t || r ? "minute" : "minutami" : t || r ? "minut" : "minutami"); case "h": return t ? "ena ura" : "eno uro"; case "hh": return u + (1 === n ? t ? "ura" : "uro" : 2 === n ? t || r ? "uri" : "urama" : n < 5 ? t || r ? "ure" : "urami" : t || r ? "ur" : "urami"); case "d": return t || r ? "en dan" : "enim dnem"; case "dd": return u + (1 === n ? t || r ? "dan" : "dnem" : 2 === n ? t || r ? "dni" : "dnevoma" : t || r ? "dni" : "dnevi"); case "M": return t || r ? "en mesec" : "enim mesecem"; case "MM": return u + (1 === n ? t || r ? "mesec" : "mesecem" : 2 === n ? t || r ? "meseca" : "mesecema" : n < 5 ? t || r ? "mesece" : "meseci" : t || r ? "mesecev" : "meseci"); case "y": return t || r ? "eno leto" : "enim letom"; case "yy": return u + (1 === n ? t || r ? "leto" : "letom" : 2 === n ? t || r ? "leti" : "letoma" : n < 5 ? t || r ? "leta" : "leti" : t || r ? "let" : "leti") } } return t.defineLocale("sl", { months: "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"), monthsShort: "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"), weekdaysShort: "ned._pon._tor._sre._čet._pet._sob.".split("_"), weekdaysMin: "ne_po_to_sr_če_pe_so".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danes ob] LT", nextDay: "[jutri ob] LT", nextWeek: function () { switch (this.day()) { case 0: return "[v] [nedeljo] [ob] LT"; case 3: return "[v] [sredo] [ob] LT"; case 6: return "[v] [soboto] [ob] LT"; case 1: case 2: case 4: case 5: return "[v] dddd [ob] LT" } }, lastDay: "[včeraj ob] LT", lastWeek: function () { switch (this.day()) { case 0: return "[prejšnjo] [nedeljo] [ob] LT"; case 3: return "[prejšnjo] [sredo] [ob] LT"; case 6: return "[prejšnjo] [soboto] [ob] LT"; case 1: case 2: case 4: case 5: return "[prejšnji] dddd [ob] LT" } }, sameElse: "L" }, relativeTime: { future: "čez %s", past: "pred %s", s: n, m: n, mm: n, h: n, hh: n, d: n, dd: n, M: n, MM: n, y: n, yy: n }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }(); n.fullCalendar.datepickerLocale("sl", "sl", { closeText: "Zapri", prevText: "&#x3C;Prejšnji", nextText: "Naslednji&#x3E;", currentText: "Trenutni", monthNames: ["Januar", "Februar", "Marec", "April", "Maj", "Junij", "Julij", "Avgust", "September", "Oktober", "November", "December"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Avg", "Sep", "Okt", "Nov", "Dec"], dayNames: ["Nedelja", "Ponedeljek", "Torek", "Sreda", "Četrtek", "Petek", "Sobota"], dayNamesShort: ["Ned", "Pon", "Tor", "Sre", "Čet", "Pet", "Sob"], dayNamesMin: ["Ne", "Po", "To", "Sr", "Če", "Pe", "So"], weekHeader: "Teden", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("sl", { buttonText: { month: "Mesec", week: "Teden", day: "Dan", list: "Dnevni red" }, allDayText: "Ves dan", eventLimitText: "več", noEventsMessage: "Ni dogodkov za prikaz" }) }(), function () { !function () { var n = { words: { m: ["jedan minut", "jedne minute"], mm: ["minut", "minute", "minuta"], h: ["jedan sat", "jednog sata"], hh: ["sat", "sata", "sati"], dd: ["dan", "dana", "dana"], MM: ["mesec", "meseca", "meseci"], yy: ["godina", "godine", "godina"] }, correctGrammaticalCase: function (n, t) { return 1 === n ? t[0] : n >= 2 && n <= 4 ? t[1] : t[2] }, translate: function (t, i, r) { var u = n.words[r]; return 1 === r.length ? i ? u[0] : u[1] : t + " " + n.correctGrammaticalCase(t, u) } }; return t.defineLocale("sr", { months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"), monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sre._čet._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sutra u] LT", nextWeek: function () { switch (this.day()) { case 0: return "[u] [nedelju] [u] LT"; case 3: return "[u] [sredu] [u] LT"; case 6: return "[u] [subotu] [u] LT"; case 1: case 2: case 4: case 5: return "[u] dddd [u] LT" } }, lastDay: "[juče u] LT", lastWeek: function () { return ["[prošle] [nedelje] [u] LT", "[prošlog] [ponedeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT"][this.day()] }, sameElse: "L" }, relativeTime: { future: "za %s", past: "pre %s", s: "nekoliko sekundi", m: n.translate, mm: n.translate, h: n.translate, hh: n.translate, d: "dan", dd: n.translate, M: "mesec", MM: n.translate, y: "godinu", yy: n.translate }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }(); n.fullCalendar.datepickerLocale("sr", "sr", { closeText: "Затвори", prevText: "&#x3C;", nextText: "&#x3E;", currentText: "Данас", monthNames: ["Јануар", "Фебруар", "Март", "Април", "Мај", "Јун", "Јул", "Август", "Септембар", "Октобар", "Новембар", "Децембар"], monthNamesShort: ["Јан", "Феб", "Мар", "Апр", "Мај", "Јун", "Јул", "Авг", "Сеп", "Окт", "Нов", "Дец"], dayNames: ["Недеља", "Понедељак", "Уторак", "Среда", "Четвртак", "Петак", "Субота"], dayNamesShort: ["Нед", "Пон", "Уто", "Сре", "Чет", "Пет", "Суб"], dayNamesMin: ["Не", "По", "Ут", "Ср", "Че", "Пе", "Су"], weekHeader: "Сед", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("sr", { buttonText: { month: "Месец", week: "Недеља", day: "Дан", list: "Планер" }, allDayText: "Цео дан", eventLimitText: function (n) { return "+ још " + n }, noEventsMessage: "Нема догађаја за приказ" }) }(), function () { !function () { var n = { words: { m: ["један минут", "једне минуте"], mm: ["минут", "минуте", "минута"], h: ["један сат", "једног сата"], hh: ["сат", "сата", "сати"], dd: ["дан", "дана", "дана"], MM: ["месец", "месеца", "месеци"], yy: ["година", "године", "година"] }, correctGrammaticalCase: function (n, t) { return 1 === n ? t[0] : n >= 2 && n <= 4 ? t[1] : t[2] }, translate: function (t, i, r) { var u = n.words[r]; return 1 === r.length ? i ? u[0] : u[1] : t + " " + n.correctGrammaticalCase(t, u) } }; return t.defineLocale("sr-cyrl", { months: "јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"), monthsShort: "јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"), monthsParseExact: !0, weekdays: "недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"), weekdaysShort: "нед._пон._уто._сре._чет._пет._суб.".split("_"), weekdaysMin: "не_по_ут_ср_че_пе_су".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[данас у] LT", nextDay: "[сутра у] LT", nextWeek: function () { switch (this.day()) { case 0: return "[у] [недељу] [у] LT"; case 3: return "[у] [среду] [у] LT"; case 6: return "[у] [суботу] [у] LT"; case 1: case 2: case 4: case 5: return "[у] dddd [у] LT" } }, lastDay: "[јуче у] LT", lastWeek: function () { return ["[прошле] [недеље] [у] LT", "[прошлог] [понедељка] [у] LT", "[прошлог] [уторка] [у] LT", "[прошле] [среде] [у] LT", "[прошлог] [четвртка] [у] LT", "[прошлог] [петка] [у] LT", "[прошле] [суботе] [у] LT"][this.day()] }, sameElse: "L" }, relativeTime: { future: "за %s", past: "пре %s", s: "неколико секунди", m: n.translate, mm: n.translate, h: n.translate, hh: n.translate, d: "дан", dd: n.translate, M: "месец", MM: n.translate, y: "годину", yy: n.translate }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }(); n.fullCalendar.datepickerLocale("sr-cyrl", "sr", { closeText: "Затвори", prevText: "&#x3C;", nextText: "&#x3E;", currentText: "Данас", monthNames: ["Јануар", "Фебруар", "Март", "Април", "Мај", "Јун", "Јул", "Август", "Септембар", "Октобар", "Новембар", "Децембар"], monthNamesShort: ["Јан", "Феб", "Мар", "Апр", "Мај", "Јун", "Јул", "Авг", "Сеп", "Окт", "Нов", "Дец"], dayNames: ["Недеља", "Понедељак", "Уторак", "Среда", "Четвртак", "Петак", "Субота"], dayNamesShort: ["Нед", "Пон", "Уто", "Сре", "Чет", "Пет", "Суб"], dayNamesMin: ["Не", "По", "Ут", "Ср", "Че", "Пе", "Су"], weekHeader: "Сед", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("sr-cyrl", { buttonText: { month: "Месец", week: "Недеља", day: "Дан", list: "Планер" }, allDayText: "Цео дан", eventLimitText: function (n) { return "+ још " + n }, noEventsMessage: "Нема догађаја за приказ" }) }(), function () { !function () { return t.defineLocale("sv", { months: "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"), monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"), weekdays: "söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"), weekdaysShort: "sön_mån_tis_ons_tor_fre_lör".split("_"), weekdaysMin: "sö_må_ti_on_to_fr_lö".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [kl.] HH:mm", LLLL: "dddd D MMMM YYYY [kl.] HH:mm", lll: "D MMM YYYY HH:mm", llll: "ddd D MMM YYYY HH:mm" }, calendar: { sameDay: "[Idag] LT", nextDay: "[Imorgon] LT", lastDay: "[Igår] LT", nextWeek: "[På] dddd LT", lastWeek: "[I] dddd[s] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "för %s sedan", s: "några sekunder", m: "en minut", mm: "%d minuter", h: "en timme", hh: "%d timmar", d: "en dag", dd: "%d dagar", M: "en månad", MM: "%d månader", y: "ett år", yy: "%d år" }, ordinalParse: /\d{1,2}(e|a)/, ordinal: function (n) { var t = n % 10, i = 1 == ~~(n % 100 / 10) ? "e" : 1 === t ? "a" : 2 === t ? "a" : "e"; return n + i }, week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("sv", "sv", { closeText: "Stäng", prevText: "&#xAB;Förra", nextText: "Nästa&#xBB;", currentText: "Idag", monthNames: ["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"], dayNamesShort: ["Sön", "Mån", "Tis", "Ons", "Tor", "Fre", "Lör"], dayNames: ["Söndag", "Måndag", "Tisdag", "Onsdag", "Torsdag", "Fredag", "Lördag"], dayNamesMin: ["Sö", "Må", "Ti", "On", "To", "Fr", "Lö"], weekHeader: "Ve", dateFormat: "yy-mm-dd", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("sv", { buttonText: { month: "Månad", week: "Vecka", day: "Dag", list: "Program" }, allDayText: "Heldag", eventLimitText: "till", noEventsMessage: "Inga händelser att visa" }) }(), function () { !function () { return t.defineLocale("th", { months: "มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"), monthsShort: "ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"), monthsParseExact: !0, weekdays: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"), weekdaysShort: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"), weekdaysMin: "อา._จ._อ._พ._พฤ._ศ._ส.".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "YYYY/MM/DD", LL: "D MMMM YYYY", LLL: "D MMMM YYYY เวลา H:mm", LLLL: "วันddddที่ D MMMM YYYY เวลา H:mm" }, meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/, isPM: function (n) { return "หลังเที่ยง" === n }, meridiem: function (n) { return n < 12 ? "ก่อนเที่ยง" : "หลังเที่ยง" }, calendar: { sameDay: "[วันนี้ เวลา] LT", nextDay: "[พรุ่งนี้ เวลา] LT", nextWeek: "dddd[หน้า เวลา] LT", lastDay: "[เมื่อวานนี้ เวลา] LT", lastWeek: "[วัน]dddd[ที่แล้ว เวลา] LT", sameElse: "L" }, relativeTime: { future: "อีก %s", past: "%sที่แล้ว", s: "ไม่กี่วินาที", m: "1 นาที", mm: "%d นาที", h: "1 ชั่วโมง", hh: "%d ชั่วโมง", d: "1 วัน", dd: "%d วัน", M: "1 เดือน", MM: "%d เดือน", y: "1 ปี", yy: "%d ปี" } }) }(); n.fullCalendar.datepickerLocale("th", "th", { closeText: "ปิด", prevText: "&#xAB;&#xA0;ย้อน", nextText: "ถัดไป&#xA0;&#xBB;", currentText: "วันนี้", monthNames: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม"], monthNamesShort: ["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค."], dayNames: ["อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัสบดี", "ศุกร์", "เสาร์"], dayNamesShort: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."], dayNamesMin: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."], weekHeader: "Wk", dateFormat: "dd/mm/yy", firstDay: 0, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("th", { buttonText: { month: "เดือน", week: "สัปดาห์", day: "วัน", list: "แผนงาน" }, allDayText: "ตลอดวัน", eventLimitText: "เพิ่มเติม", noEventsMessage: "ไม่มีกิจกรรมที่จะแสดง" }) }(), function () { !function () { var n = { 1: "'inci", 5: "'inci", 8: "'inci", 70: "'inci", 80: "'inci", 2: "'nci", 7: "'nci", 20: "'nci", 50: "'nci", 3: "'üncü", 4: "'üncü", 100: "'üncü", 6: "'ncı", 9: "'uncu", 10: "'uncu", 30: "'uncu", 60: "'ıncı", 90: "'ıncı" }; return t.defineLocale("tr", { months: "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"), monthsShort: "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"), weekdays: "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"), weekdaysShort: "Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"), weekdaysMin: "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[bugün saat] LT", nextDay: "[yarın saat] LT", nextWeek: "[haftaya] dddd [saat] LT", lastDay: "[dün] LT", lastWeek: "[geçen hafta] dddd [saat] LT", sameElse: "L" }, relativeTime: { future: "%s sonra", past: "%s önce", s: "birkaç saniye", m: "bir dakika", mm: "%d dakika", h: "bir saat", hh: "%d saat", d: "bir gün", dd: "%d gün", M: "bir ay", MM: "%d ay", y: "bir yıl", yy: "%d yıl" }, ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/, ordinal: function (t) { if (0 === t) return t + "'ıncı"; var i = t % 10, r = t % 100 - i, u = t >= 100 ? 100 : null; return t + (n[i] || n[r] || n[u]) }, week: { dow: 1, doy: 7 } }) }(); n.fullCalendar.datepickerLocale("tr", "tr", { closeText: "kapat", prevText: "&#x3C;geri", nextText: "ileri&#x3e", currentText: "bugün", monthNames: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"], monthNamesShort: ["Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara"], dayNames: ["Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"], dayNamesShort: ["Pz", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"], dayNamesMin: ["Pz", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"], weekHeader: "Hf", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("tr", { buttonText: { next: "ileri", month: "Ay", week: "Hafta", day: "Gün", list: "Ajanda" }, allDayText: "Tüm gün", eventLimitText: "daha fazla", noEventsMessage: "Herhangi bir etkinlik görüntülemek için" }) }(), function () { !function () { function r(n, t) { var i = n.split("_"); return t % 10 == 1 && t % 100 != 11 ? i[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? i[1] : i[2] } function n(n, t, i) { var u = { mm: t ? "хвилина_хвилини_хвилин" : "хвилину_хвилини_хвилин", hh: t ? "година_години_годин" : "годину_години_годин", dd: "день_дні_днів", MM: "місяць_місяці_місяців", yy: "рік_роки_років" }; return "m" === i ? t ? "хвилина" : "хвилину" : "h" === i ? t ? "година" : "годину" : n + " " + r(u[i], +n) } function u(n, t) { var i = { nominative: "неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"), accusative: "неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"), genitive: "неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_") }, r = /(\[[ВвУу]\]) ?dddd/.test(t) ? "accusative" : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(t) ? "genitive" : "nominative"; return i[r][n.day()] } function i(n) { return function () { return n + "о" + (11 === this.hours() ? "б" : "") + "] LT" } } return t.defineLocale("uk", { months: { format: "січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"), standalone: "січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_") }, monthsShort: "січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"), weekdays: u, weekdaysShort: "нд_пн_вт_ср_чт_пт_сб".split("_"), weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY р.", LLL: "D MMMM YYYY р., HH:mm", LLLL: "dddd, D MMMM YYYY р., HH:mm" }, calendar: { sameDay: i("[Сьогодні "), nextDay: i("[Завтра "), lastDay: i("[Вчора "), nextWeek: i("[У] dddd ["), lastWeek: function () { switch (this.day()) { case 0: case 3: case 5: case 6: return i("[Минулої] dddd [").call(this); case 1: case 2: case 4: return i("[Минулого] dddd [").call(this) } }, sameElse: "L" }, relativeTime: { future: "за %s", past: "%s тому", s: "декілька секунд", m: n, mm: n, h: "годину", hh: n, d: "день", dd: n, M: "місяць", MM: n, y: "рік", yy: n }, meridiemParse: /ночі|ранку|дня|вечора/, isPM: function (n) { return /^(дня|вечора)$/.test(n) }, meridiem: function (n) { return n < 4 ? "ночі" : n < 12 ? "ранку" : n < 17 ? "дня" : "вечора" }, ordinalParse: /\d{1,2}-(й|го)/, ordinal: function (n, t) { switch (t) { case "M": case "d": case "DDD": case "w": case "W": return n + "-й"; case "D": return n + "-го"; default: return n } }, week: { dow: 1, doy: 7 } }) }(); n.fullCalendar.datepickerLocale("uk", "uk", { closeText: "Закрити", prevText: "&#x3C;", nextText: "&#x3E;", currentText: "Сьогодні", monthNames: ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень"], monthNamesShort: ["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру"], dayNames: ["неділя", "понеділок", "вівторок", "середа", "четвер", "п’ятниця", "субота"], dayNamesShort: ["нед", "пнд", "вів", "срд", "чтв", "птн", "сбт"], dayNamesMin: ["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"], weekHeader: "Тиж", dateFormat: "dd.mm.yy", firstDay: 1, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("uk", { buttonText: { month: "Місяць", week: "Тиждень", day: "День", list: "Порядок денний" }, allDayText: "Увесь день", eventLimitText: function (n) { return "+ще " + n + "..." }, noEventsMessage: "Немає подій для відображення" }) }(), function () { !function () { return t.defineLocale("vi", { months: "tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"), monthsShort: "Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"), monthsParseExact: !0, weekdays: "chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"), weekdaysShort: "CN_T2_T3_T4_T5_T6_T7".split("_"), weekdaysMin: "CN_T2_T3_T4_T5_T6_T7".split("_"), weekdaysParseExact: !0, meridiemParse: /sa|ch/i, isPM: function (n) { return /^ch$/i.test(n) }, meridiem: function (n, t, i) { return n < 12 ? i ? "sa" : "SA" : i ? "ch" : "CH" }, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM [năm] YYYY", LLL: "D MMMM [năm] YYYY HH:mm", LLLL: "dddd, D MMMM [năm] YYYY HH:mm", l: "DD/M/YYYY", ll: "D MMM YYYY", lll: "D MMM YYYY HH:mm", llll: "ddd, D MMM YYYY HH:mm" }, calendar: { sameDay: "[Hôm nay lúc] LT", nextDay: "[Ngày mai lúc] LT", nextWeek: "dddd [tuần tới lúc] LT", lastDay: "[Hôm qua lúc] LT", lastWeek: "dddd [tuần rồi lúc] LT", sameElse: "L" }, relativeTime: { future: "%s tới", past: "%s trước", s: "vài giây", m: "một phút", mm: "%d phút", h: "một giờ", hh: "%d giờ", d: "một ngày", dd: "%d ngày", M: "một tháng", MM: "%d tháng", y: "một năm", yy: "%d năm" }, ordinalParse: /\d{1,2}/, ordinal: function (n) { return n }, week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("vi", "vi", { closeText: "Đóng", prevText: "&#x3C;Trước", nextText: "Tiếp&#x3E;", currentText: "Hôm nay", monthNames: ["Tháng Một", "Tháng Hai", "Tháng Ba", "Tháng Tư", "Tháng Năm", "Tháng Sáu", "Tháng Bảy", "Tháng Tám", "Tháng Chín", "Tháng Mười", "Tháng Mười Một", "Tháng Mười Hai"], monthNamesShort: ["Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"], dayNames: ["Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"], dayNamesShort: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"], dayNamesMin: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"], weekHeader: "Tu", dateFormat: "dd/mm/yy", firstDay: 0, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }); n.fullCalendar.locale("vi", { buttonText: { month: "Tháng", week: "Tuần", day: "Ngày", list: "Lịch biểu" }, allDayText: "Cả ngày", eventLimitText: function (n) { return "+ thêm " + n }, noEventsMessage: "Không có sự kiện để hiển thị" }) }(), function () { !function () { return t.defineLocale("zh-cn", { months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"), weekdaysShort: "周日_周一_周二_周三_周四_周五_周六".split("_"), weekdaysMin: "日_一_二_三_四_五_六".split("_"), longDateFormat: { LT: "Ah点mm分", LTS: "Ah点m分s秒", L: "YYYY-MM-DD", LL: "YYYY年MMMD日", LLL: "YYYY年MMMD日Ah点mm分", LLLL: "YYYY年MMMD日ddddAh点mm分", l: "YYYY-MM-DD", ll: "YYYY年MMMD日", lll: "YYYY年MMMD日Ah点mm分", llll: "YYYY年MMMD日ddddAh点mm分" }, meridiemParse: /凌晨|早上|上午|中午|下午|晚上/, meridiemHour: function (n, t) { return 12 === n && (n = 0), "凌晨" === t || "早上" === t || "上午" === t ? n : "下午" === t || "晚上" === t ? n + 12 : n >= 11 ? n : n + 12 }, meridiem: function (n, t) { var i = 100 * n + t; return i < 600 ? "凌晨" : i < 900 ? "早上" : i < 1130 ? "上午" : i < 1230 ? "中午" : i < 1800 ? "下午" : "晚上" }, calendar: { sameDay: function () { return 0 === this.minutes() ? "[今天]Ah[点整]" : "[今天]LT" }, nextDay: function () { return 0 === this.minutes() ? "[明天]Ah[点整]" : "[明天]LT" }, lastDay: function () { return 0 === this.minutes() ? "[昨天]Ah[点整]" : "[昨天]LT" }, nextWeek: function () { var i, n; return i = t().startOf("week"), n = this.diff(i, "days") >= 7 ? "[下]" : "[本]", 0 === this.minutes() ? n + "dddAh点整" : n + "dddAh点mm" }, lastWeek: function () { var i, n; return i = t().startOf("week"), n = this.unix() < i.unix() ? "[上]" : "[本]", 0 === this.minutes() ? n + "dddAh点整" : n + "dddAh点mm" }, sameElse: "LL" }, ordinalParse: /\d{1,2}(日|月|周)/, ordinal: function (n, t) { switch (t) { case "d": case "D": case "DDD": return n + "日"; case "M": return n + "月"; case "w": case "W": return n + "周"; default: return n } }, relativeTime: { future: "%s内", past: "%s前", s: "几秒", m: "1 分钟", mm: "%d 分钟", h: "1 小时", hh: "%d 小时", d: "1 天", dd: "%d 天", M: "1 个月", MM: "%d 个月", y: "1 年", yy: "%d 年" }, week: { dow: 1, doy: 4 } }) }(); n.fullCalendar.datepickerLocale("zh-cn", "zh-CN", { closeText: "关闭", prevText: "&#x3C;上月", nextText: "下月&#x3E;", currentText: "今天", monthNames: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"], monthNamesShort: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"], dayNames: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"], dayNamesShort: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"], dayNamesMin: ["日", "一", "二", "三", "四", "五", "六"], weekHeader: "周", dateFormat: "yy-mm-dd", firstDay: 1, isRTL: !1, showMonthAfterYear: !0, yearSuffix: "年" }); n.fullCalendar.locale("zh-cn", { buttonText: { month: "月", week: "周", day: "日", list: "日程" }, allDayText: "全天", eventLimitText: function (n) { return "另外 " + n + " 个" }, noEventsMessage: "没有事件显示" }) }(), function () { !function () { return t.defineLocale("zh-tw", { months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"), weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"), weekdaysMin: "日_一_二_三_四_五_六".split("_"), longDateFormat: { LT: "Ah點mm分", LTS: "Ah點m分s秒", L: "YYYY年MMMD日", LL: "YYYY年MMMD日", LLL: "YYYY年MMMD日Ah點mm分", LLLL: "YYYY年MMMD日ddddAh點mm分", l: "YYYY年MMMD日", ll: "YYYY年MMMD日", lll: "YYYY年MMMD日Ah點mm分", llll: "YYYY年MMMD日ddddAh點mm分" }, meridiemParse: /凌晨|早上|上午|中午|下午|晚上/, meridiemHour: function (n, t) { return 12 === n && (n = 0), "凌晨" === t || "早上" === t || "上午" === t ? n : "中午" === t ? n >= 11 ? n : n + 12 : "下午" === t || "晚上" === t ? n + 12 : void 0 }, meridiem: function (n, t) { var i = 100 * n + t; return i < 600 ? "凌晨" : i < 900 ? "早上" : i < 1130 ? "上午" : i < 1230 ? "中午" : i < 1800 ? "下午" : "晚上" }, calendar: { sameDay: "[今天]LT", nextDay: "[明天]LT", nextWeek: "[下]ddddLT", lastDay: "[昨天]LT", lastWeek: "[上]ddddLT", sameElse: "L" }, ordinalParse: /\d{1,2}(日|月|週)/, ordinal: function (n, t) { switch (t) { case "d": case "D": case "DDD": return n + "日"; case "M": return n + "月"; case "w": case "W": return n + "週"; default: return n } }, relativeTime: { future: "%s內", past: "%s前", s: "幾秒", m: "1 分鐘", mm: "%d 分鐘", h: "1 小時", hh: "%d 小時", d: "1 天", dd: "%d 天", M: "1 個月", MM: "%d 個月", y: "1 年", yy: "%d 年" } }) }(); n.fullCalendar.datepickerLocale("zh-tw", "zh-TW", { closeText: "關閉", prevText: "&#x3C;上月", nextText: "下月&#x3E;", currentText: "今天", monthNames: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"], monthNamesShort: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"], dayNames: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"], dayNamesShort: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"], dayNamesMin: ["日", "一", "二", "三", "四", "五", "六"], weekHeader: "周", dateFormat: "yy/mm/dd", firstDay: 1, isRTL: !1, showMonthAfterYear: !0, yearSuffix: "年" }); n.fullCalendar.locale("zh-tw", { buttonText: { month: "月", week: "週", day: "天", list: "活動列表" }, allDayText: "整天", eventLimitText: "顯示更多", noEventsMessage: "没有任何活動" }) }(); t.locale("en"); n.fullCalendar.locale("en"); n.datepicker && n.datepicker.setDefaults(n.datepicker.regional[""]) })